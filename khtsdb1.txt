oracle@khtsdb1:[/home/oracle]sql'
> 
oracle@khtsdb1:[/home/oracle]sql

SQL*Plus: Release 11.2.0.4.0 Production on Fri Dec 9 13:52:02 2022

Copyright (c) 1982, 2013, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.4.0 - 64bit Production
With the Partitioning, Real Application Clusters, Automatic Storage Management, OLAP,
Data Mining and Real Application Testing options

SYS@khtsdb1>  set linesize 222
SYS@khtsdb1>  col object_name for a50;
SYS@khtsdb1>  select  a.owner,a.OBJECT_NAME,a.OBJECT_TYPE  from dba_objects a  where a.owner not in ('SYS','SYSTEM','OUTLN','DIP','ORACLE_OCM','DBSNMP','APPQOSSYS','WMSYS','EXFSYS','TXSYS','XDB','ANONYMOUS','XS$NULL','ORDPLUGINS','ORDSYS','SI_INFORMTN_SCHEMA','ORDDATA','MDSYS','OLAPSYS','MDDATA','SPATIAL_WFS_ADMIN_USR','SPATIAL_CSW_ADMIN_USR','SYSMAN','MGMT_VIEW','FLOWS_FILES','APEX_030200','APEX_PUBLIC_USER','OWBSYS','OWBSYS_AUDIT','SCOTT','CTXSYS') and a.OBJECT_TYPE='PROCEDURE';
 

set linesize 200 pagesize 999  long 20000 \r
select 'select dbms_metadata.get_ddl(''PROCEDURE'',''' || OBJECT_NAME || ''',''' ||
                OWNER || ''') FROM DUAL;'
           from dba_objects a
          where a.owner not in ('SYS',

OWNER                          OBJECT_NAME                                        OBJECT_TYPE
------------------------------ -------------------------------------------------- -------------------
CSCDS                          SP_SFMY                                            PROCEDURE
WLSTYDB                        CSCDS_BAK                                          PROCEDURE
WLSTYDB                        LINK_CSCDS_TASK                                    PROCEDURE
EIPUSR                         CLEAN_DATA_P                                       PROCEDURE
EIPUSR                         STATISTICS                                         PROCEDURE
EIPUSR                         TEST_DELAY                                         PROCEDURE
CSCDS                          BUG_F8                                             PROCEDURE
CSCDS                          GETID                                              PROCEDURE
CSCDS                          P_DUBAN_GENERATER_MSG                              PROCEDURE
CSCDS                          P_DUBAN_SCAN                                       PROCEDURE
CSCDS                          P_DUBAN_SCAN_PORTAL                                PROCEDURE

OWNER                          OBJECT_NAME                                        OBJECT_TYPE
------------------------------ -------------------------------------------------- -------------------
CSCDS                          P_DUBAN_SCAN_PORTAL_TSDS                           PROCEDURE
CSCDS                          P_DUBAN_SEND_MSG                                   PROCEDURE
CSCDS                          P_DUBAN_TH                                         PROCEDURE
CSCDS                          P_DUBAN_TH_PORTAL                                  PROCEDURE
CSCDS                          P_DUBAN_UPDATE_DB_COUNT                            PROCEDURE
CSCDS                          P_DUBAN_UPDATE_DB_COUNT_CF                         PROCEDURE
CSCDS                          P_INSERT_DBYJ_SEND_SERIALNO                        PROCEDURE
CSCDS                          P_INSERT_DBYJ_SEND_SERIALNO_CF                     PROCEDURE
CSCDS                          P_JIEDUANHUIFU                                     PROCEDURE
CSCDS                          P_MV_REFLUSH                                       PROCEDURE
CSCDS                          P_MV_VIEW_COMPLAIN_OPTION                          PROCEDURE

OWNER                          OBJECT_NAME                                        OBJECT_TYPE
------------------------------ -------------------------------------------------- -------------------
CSCDS                          P_TABLE_COMPLAIN_F12                               PROCEDURE
CSCDS                          P_TABLE_COMPLAIN_F12_SLEEP                         PROCEDURE
CSCDS                          P_TABLE_COMPLAIN_F12_UP                            PROCEDURE
CSCDS                          P_TABLE_COMPLAIN_F22                               PROCEDURE
CSCDS                          P_TABLE_COMPLAIN_F8                                PROCEDURE
CSCDS                          P_TABLE_COMPLAIN_F8_SLEEP                          PROCEDURE
CSCDS                          P_TABLE_COMPLAIN_F8_UP                             PROCEDURE
CSCDS                          P_TABLE_VIEW_COMPLAIN_PD_RL                        PROCEDURE
CSCDS                          P_TAB_REFLUSH                                      PROCEDURE
CSCDS                          P_TAB_REFLUSH_RESULT                               PROCEDURE
CSCDS                          P_TAB_REFLUSH_RESULT_COMPLAIN                      PROCEDURE

OWNER                          OBJECT_NAME                                        OBJECT_TYPE
------------------------------ -------------------------------------------------- -------------------
CSCDS                          P_TAB_XCY_SYS_INTERACTIVE_LOG                      PROCEDURE
CSCDS                          P_V_COMPLAIN_UP_STATISTICS                         PROCEDURE
CSCDS                          SP_BUG_EMOS                                        PROCEDURE
CSCDS                          SP_DELETE_DANZI                                    PROCEDURE
CSCDS                          SP_ESB_LOG_SERIALE_NO                              PROCEDURE
CSCDS                          SP_INFO_SYS_TBS_JK                                 PROCEDURE
CSCDS                          SP_LYL_SP_YWMC                                     PROCEDURE
CSCDS                          SP_UPDATE_REPORT                                   PROCEDURE
CSCDS                          LYL_STAT                                           PROCEDURE
CSCDS                          SP_PRE_EXP                                         PROCEDURE
NMYD                           DELE_XCY_NUM_LOG                                   PROCEDURE

OWNER                          OBJECT_NAME                                        OBJECT_TYPE
------------------------------ -------------------------------------------------- -------------------
NMYD                           XCY_IMB_BACKUP                                     PROCEDURE
NMYD                           XCY_KHTS_BACKUP                                    PROCEDURE
NMYD                           XCY_OANEW_BACKUP                                   PROCEDURE
APPVERSION                     XCY_VERSION_DOWNLOAD_BACKUP                        PROCEDURE
CSCDS                          SP_DELETE_DANZI_BL_F8                              PROCEDURE
NMYD                           XCY_PRD_STARTPAGE_HISTORY                          PROCEDURE
CSCDS                          P_TABLE_COMPLAIN_F8_JTKD                           PROCEDURE
NMYD                           XCY_PRD_MODEL_COUNTGATHER                          PROCEDURE
CSCDS                          SP_GDSJ_200313                                     PROCEDURE
CSCDS                          P_DUBAN_UPDATE_DB_COUNT_BZQ                        PROCEDURE
CSCDS                          P_DUBAN_UPDATE_DB_COUNT_CS                         PROCEDURE

OWNER                          OBJECT_NAME                                        OBJECT_TYPE
------------------------------ -------------------------------------------------- -------------------
CSCDS                          P_DUBAN_UPDATE_DB_COUNT_SJ                         PROCEDURE
CSCDS                          P_INSERT_DBYJ_SEND_SN_BZQ                          PROCEDURE
CSCDS                          P_INSERT_DBYJ_SEND_SN_CS                           PROCEDURE
CSCDS                          P_INSERT_DBYJ_SEND_SN_FGS                          PROCEDURE
CSCDS                          P_INSERT_DBYJ_SEND_SN_FGS_CF                       PROCEDURE
                                'SYSTEM',
CSCDS                          P_INSERT_DBYJ_SEND_SN_SJ                           PROCEDURE
CSCDS                          P_BHG                                              PROCEDURE
PRD_SOAINFRA                   B2B_ARCHIVE_INSTANCE_MSGS                          PROCEDURE
PRD_SOAINFRA                   B2B_ARCHIVE_INST_MSGS_PS5                          PROCEDURE
PRD_SOAINFRA                   B2B_ARCHIVE_PROCEDURE                              PROCEDURE
PRD_SOAINFRA                   B2B_DBMS_JOB                                       PROCEDURE

OWNER                          OBJECT_NAME                                        OBJECT_TYPE
------------------------------ -------------------------------------------------- -------------------
PRD_SOAINFRA                   B2B_DBMS_REMOVEJOB                                 PROCEDURE
PRD_SOAINFRA                   B2B_DISABLE_CONSTRAINTS                            PROCEDURE
PRD_SOAINFRA                   B2B_ENABLE_CONSTRAINTS                             PROCEDURE
PRD_SOAINFRA                   B2B_EXPORT_JOB                                     PROCEDURE
PRD_SOAINFRA                   B2B_INSTANCEMSG                                    PROCEDURE
PRD_SOAINFRA                   B2B_PURGE_INSTANCE_MSGS                            PROCEDURE
PRD_SOAINFRA                   B2B_PURGE_INSTANCE_MSGS_AUDIT                      PROCEDURE
PRD_SOAINFRA                   B2B_PURGE_INST_MSGS_AUDIT_PS5                      PROCEDURE
PRD_SOAINFRA                   B2B_PURGE_INST_MSGS_PS5                            PROCEDURE
PRD_SOAINFRA                   B2B_REFRESH_MV                                     PROCEDURE
PRD_SOAINFRA                   B2B_RESTORE_PROCEDURE                              PROCEDURE

OWNER                          OBJECT_NAME                                        OBJECT_TYPE
------------------------------ -------------------------------------------------- -------------------
PRD_SOAINFRA                   CLOSE_FILE                                         PROCEDURE
PRD_SOAINFRA                   DEBUG_PURGE                                        PROCEDURE
PRD_SOAINFRA                   EDN_ADD_SHARED_CLUSTER                             PROCEDURE
PRD_SOAINFRA                   EDN_CONTEXT_GET                                    PROCEDURE
PRD_SOAINFRA                   EDN_DECOMPRESS_EVENT                               PROCEDURE
PRD_SOAINFRA                   EDN_DEQUEUE_BUS_EVENT                              PROCEDURE
PRD_SOAINFRA                   EDN_DEQUEUE_OAOO_DELIVERY                          PROCEDURE
PRD_SOAINFRA                   EDN_DISABLE_SUBSCRIPTION                           PROCEDURE
PRD_SOAINFRA                   EDN_ENABLE_LOGGING                                 PROCEDURE
PRD_SOAINFRA                   EDN_ENABLE_SUBSCRIPTION                            PROCEDURE
PRD_SOAINFRA                   EDN_ENQUEUE_BUSINESS_EVENT                         PROCEDURE

OWNER                          OBJECT_NAME                                        OBJECT_TYPE
------------------------------ -------------------------------------------------- -------------------
PRD_SOAINFRA                   EDN_ENQUEUE_OAOO_DELIVERY                          PROCEDURE
PRD_SOAINFRA                   EDN_ERROR_HANDLER                                  PROCEDURE
PRD_SOAINFRA                   EDN_EVENT_AGENT                                    PROCEDURE
PRD_SOAINFRA                   EDN_FILTER_AND_DELIVER_EVENT                       PROCEDURE
PRD_SOAINFRA                   EDN_INIT_SHARED_EDN                                PROCEDURE
PRD_SOAINFRA                   EDN_INTERNAL_DECOMPRESS_EVENT                      PROCEDURE
PRD_SOAINFRA                   EDN_INTERNAL_PUBLISH_EVENT                         PROCEDURE
PRD_SOAINFRA                   EDN_LOG_MESSAGE                                    PROCEDURE
PRD_SOAINFRA                   EDN_LOOKUP_CLUSTER_ID                              PROCEDURE
PRD_SOAINFRA                   EDN_PUBLISH_COMPRESSED_EVENT                       PROCEDURE
PRD_SOAINFRA                   EDN_PUBLISH_EVENT                                  PROCEDURE

OWNER                          OBJECT_NAME                                        OBJECT_TYPE
------------------------------ -------------------------------------------------- -------------------
PRD_SOAINFRA                   EDN_REGISTER_AGENT                                 PROCEDURE
PRD_SOAINFRA                   EDN_REMOVE_SHARED_CLUSTER                          PROCEDURE
PRD_SOAINFRA                   EDN_SUBSCRIBE                                      PROCEDURE
PRD_SOAINFRA                   EDN_SUBSCRIBE_IMMEDIATE                            PROCEDURE
PRD_SOAINFRA                   EDN_SUBSCRIPTION_EXISTS                            PROCEDURE
PRD_SOAINFRA                   EDN_UNINIT_SHARED_EDN                              PROCEDURE
PRD_SOAINFRA                   EDN_UNREGISTER_AGENT                               PROCEDURE
PRD_SOAINFRA                   EDN_UNSUBSCRIBE                                    PROCEDURE
PRD_SOAINFRA                   EDN_UNSUBSCRIBE_ALL                                PROCEDURE
PRD_SOAINFRA                   GET_WIREMESSAGE_PID                                PROCEDURE
PRD_SOAINFRA                   GET_WIREMESSAGE_PIDPCID                            PROCEDURE

OWNER                          OBJECT_NAME                                        OBJECT_TYPE
------------------------------ -------------------------------------------------- -------------------
PRD_SOAINFRA                   IS_ACTIVE                                          PROCEDURE
PRD_SOAINFRA                   LOG_ERROR                                          PROCEDURE
PRD_SOAINFRA                   LOG_INFO                                           PROCEDURE
PRD_SOAINFRA                   PC_CREATEASSIGNEEHISTORY                           PROCEDURE
PRD_SOAINFRA                   PC_INSERTASSIGNEE                                  PROCEDURE
PRD_SOAINFRA                   PURGE_ALL                                          PROCEDURE
PRD_SOAINFRA                   PURGE_B2B_INSTANCES_DOWN                           PROCEDURE
PRD_SOAINFRA                   PURGE_RUNTIME                                      PROCEDURE
PRD_SOAINFRA                   PURGE_RUNTIME_BY_ID                                PROCEDURE
PRD_SOAINFRA                   PURGE_RUNTIME_WITH_TIMEOUT                         PROCEDURE
PRD_SOAINFRA                   WRITE_DROP_PARTITION_QUERY                         PROCEDURE

OWNER                          OBJECT_NAME                                        OBJECT_TYPE
------------------------------ -------------------------------------------------- -------------------
PRD_SOAINFRA                   WRITE_LINE                                         PROCEDURE
PRD_SOAINFRA                   WRITE_QUERY_COMMENTS                               PROCEDURE
TDEIPUSR                       TEST_DELAY                                         PROCEDURE
CSCDS                          SP_RCWZL_DATE                                      PROCEDURE
CSCDS                          P_INSERT_DBYJ_SEND_SN_CS2                          PROCEDURE
CSCDS                          P_INSERT_DBYJ_SEND_SN_BZQ_DAY                      PROCEDURE
CSCDS                          SP_SYSJ_5GD                                        PROCEDURE
CSCDS                          SP_COMPLAIN_RD_CT                                  PROCEDURE
CSCDS                          P_TABLE_COMPLAIN_LEADER_GDCX                       PROCEDURE

130 rows selected.

SYS@khtsdb1> SYS@khtsdb1> SYS@khtsdb1> SP2-0158: unknown SET option "\r"
SYS@khtsdb1>   2    3    4    5    6                                  'OUTLN',
  7                                  'DIP',
  8                                  'ORACLE_OCM',
  9                                  'DBSNMP',
 10                                  'APPQOSSYS',
 11                                  'WMSYS',
 12                                  'EXFSYS',
 13                                  'TXSYS',
 14                                  'XDB',
 15                                  'ANONYMOUS',
 16                                  'XS$NULL',
 17                                  'ORDPLUGINS',
 18                                  'ORDSYS',
 19                                  'SI_INFORMTN_SCHEMA',
 20                                  'ORDDATA',
 21                                  'MDSYS',
 22                                  'OLAPSYS',
 23                                  'MDDATA',
 24                                  'SPATIAL_WFS_ADMIN_USR',
 25                                  'SPATIAL_CSW_ADMIN_USR',
 26                                  'SYSMAN',
 27                                  'MGMT_VIEW',
 28                                  'FLOWS_FILES',
 29                                  'APEX_030200',
 30                                  'APEX_PUBLIC_USER',
 31                                  'OWBSYS',
 32                                  'OWBSYS_AUDIT',
 33                                  'SCOTT',
 34                                  'CTXSYS')
 35              and a.OBJECT_TYPE = 'PROCEDURE';

'SELECTDBMS_METADATA.GET_DDL(''PROCEDURE'','''||OBJECT_NAME||''','''||OWNER||''')FROMDUAL;'
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
select dbms_metadata.get_ddl('PROCEDURE','SP_SFMY','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','CSCDS_BAK','WLSTYDB') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','LINK_CSCDS_TASK','WLSTYDB') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','CLEAN_DATA_P','EIPUSR') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','STATISTICS','EIPUSR') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','TEST_DELAY','EIPUSR') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','BUG_F8','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','GETID','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_DUBAN_GENERATER_MSG','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_DUBAN_SCAN','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_DUBAN_SCAN_PORTAL','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_DUBAN_SCAN_PORTAL_TSDS','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_DUBAN_SEND_MSG','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_DUBAN_TH','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_DUBAN_TH_PORTAL','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_DUBAN_UPDATE_DB_COUNT','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_DUBAN_UPDATE_DB_COUNT_CF','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_INSERT_DBYJ_SEND_SERIALNO','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_INSERT_DBYJ_SEND_SERIALNO_CF','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_JIEDUANHUIFU','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_MV_REFLUSH','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_MV_VIEW_COMPLAIN_OPTION','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_TABLE_COMPLAIN_F12','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_TABLE_COMPLAIN_F12_SLEEP','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_TABLE_COMPLAIN_F12_UP','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_TABLE_COMPLAIN_F22','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_TABLE_COMPLAIN_F8','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_TABLE_COMPLAIN_F8_SLEEP','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_TABLE_COMPLAIN_F8_UP','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_TABLE_VIEW_COMPLAIN_PD_RL','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_TAB_REFLUSH','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_TAB_REFLUSH_RESULT','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_TAB_REFLUSH_RESULT_COMPLAIN','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_TAB_XCY_SYS_INTERACTIVE_LOG','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_V_COMPLAIN_UP_STATISTICS','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','SP_BUG_EMOS','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','SP_DELETE_DANZI','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','SP_ESB_LOG_SERIALE_NO','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','SP_INFO_SYS_TBS_JK','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','SP_LYL_SP_YWMC','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','SP_UPDATE_REPORT','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','LYL_STAT','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','SP_PRE_EXP','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','DELE_XCY_NUM_LOG','NMYD') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','XCY_IMB_BACKUP','NMYD') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','XCY_KHTS_BACKUP','NMYD') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','XCY_OANEW_BACKUP','NMYD') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','XCY_VERSION_DOWNLOAD_BACKUP','APPVERSION') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','SP_DELETE_DANZI_BL_F8','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','XCY_PRD_STARTPAGE_HISTORY','NMYD') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_TABLE_COMPLAIN_F8_JTKD','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','XCY_PRD_MODEL_COUNTGATHER','NMYD') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','SP_GDSJ_200313','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_DUBAN_UPDATE_DB_COUNT_BZQ','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_DUBAN_UPDATE_DB_COUNT_CS','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_DUBAN_UPDATE_DB_COUNT_SJ','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_INSERT_DBYJ_SEND_SN_BZQ','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_INSERT_DBYJ_SEND_SN_CS','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_INSERT_DBYJ_SEND_SN_FGS','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_INSERT_DBYJ_SEND_SN_FGS_CF','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_INSERT_DBYJ_SEND_SN_SJ','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_BHG','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','B2B_ARCHIVE_INSTANCE_MSGS','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','B2B_ARCHIVE_INST_MSGS_PS5','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','B2B_ARCHIVE_PROCEDURE','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','B2B_DBMS_JOB','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','B2B_DBMS_REMOVEJOB','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','B2B_DISABLE_CONSTRAINTS','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','B2B_ENABLE_CONSTRAINTS','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','B2B_EXPORT_JOB','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','B2B_INSTANCEMSG','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','B2B_PURGE_INSTANCE_MSGS','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','B2B_PURGE_INSTANCE_MSGS_AUDIT','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','B2B_PURGE_INST_MSGS_AUDIT_PS5','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','B2B_PURGE_INST_MSGS_PS5','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','B2B_REFRESH_MV','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','B2B_RESTORE_PROCEDURE','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','CLOSE_FILE','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','DEBUG_PURGE','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','EDN_ADD_SHARED_CLUSTER','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','EDN_CONTEXT_GET','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','EDN_DECOMPRESS_EVENT','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','EDN_DEQUEUE_BUS_EVENT','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','EDN_DEQUEUE_OAOO_DELIVERY','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','EDN_DISABLE_SUBSCRIPTION','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','EDN_ENABLE_LOGGING','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','EDN_ENABLE_SUBSCRIPTION','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','EDN_ENQUEUE_BUSINESS_EVENT','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','EDN_ENQUEUE_OAOO_DELIVERY','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','EDN_ERROR_HANDLER','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','EDN_EVENT_AGENT','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','EDN_FILTER_AND_DELIVER_EVENT','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','EDN_INIT_SHARED_EDN','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','EDN_INTERNAL_DECOMPRESS_EVENT','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','EDN_INTERNAL_PUBLISH_EVENT','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','EDN_LOG_MESSAGE','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','EDN_LOOKUP_CLUSTER_ID','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','EDN_PUBLISH_COMPRESSED_EVENT','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','EDN_PUBLISH_EVENT','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','EDN_REGISTER_AGENT','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','EDN_REMOVE_SHARED_CLUSTER','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','EDN_SUBSCRIBE','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','EDN_SUBSCRIBE_IMMEDIATE','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','EDN_SUBSCRIPTION_EXISTS','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','EDN_UNINIT_SHARED_EDN','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','EDN_UNREGISTER_AGENT','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','EDN_UNSUBSCRIBE','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','EDN_UNSUBSCRIBE_ALL','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','GET_WIREMESSAGE_PID','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','GET_WIREMESSAGE_PIDPCID','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','IS_ACTIVE','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','LOG_ERROR','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','LOG_INFO','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','PC_CREATEASSIGNEEHISTORY','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','PC_INSERTASSIGNEE','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','PURGE_ALL','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','PURGE_B2B_INSTANCES_DOWN','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','PURGE_RUNTIME','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','PURGE_RUNTIME_BY_ID','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','PURGE_RUNTIME_WITH_TIMEOUT','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','WRITE_DROP_PARTITION_QUERY','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','WRITE_LINE','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','WRITE_QUERY_COMMENTS','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','TEST_DELAY','TDEIPUSR') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','SP_RCWZL_DATE','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_INSERT_DBYJ_SEND_SN_CS2','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_INSERT_DBYJ_SEND_SN_BZQ_DAY','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','SP_SYSJ_5GD','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','SP_COMPLAIN_RD_CT','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_TABLE_COMPLAIN_LEADER_GDCX','CSCDS') FROM DUAL;

130 rows selected.

SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','SP_SFMY','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','CSCDS_BAK','WLSTYDB') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','LINK_CSCDS_TASK','WLSTYDB') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','CLEAN_DATA_P','EIPUSR') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','STATISTICS','EIPUSR') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','TEST_DELAY','EIPUSR') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','BUG_F8','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','GETID','CSCDS') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','SP_SFMY','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."SP_SFMY" (vd_start date,vd_end date) as
  vv_sn       varchar2(40);
  vn_c_id     number;
  vn_my_count number;
  -- option
  vn_id          varchar2(2000);
  vv_f_sfmy      varchar2(2000);
  vv_f_sfmy_yj   varchar2(2000);
  vv_f_sfmy_bz   varchar2(2000);
  vd_create_date date;
  -- sn
  cursor cr_complain_maanger is
    select t.f_serialno f_serialno, t.complainid id
      from w_complain_updatetime t
     where t.updatetime > vd_start
       and t.updatetime < vd_end;
begin
  OPEN cr_complain_maanger;
  LOOP
    FETCH cr_complain_maanger
      INTO vv_sn, vn_c_id;
    EXIT WHEN cr_complain_maanger%NOTFOUND;
    select count(1)
      into vn_my_count
      from w_sfmy m
     where m.f_complainid = vn_c_id;
    if vn_my_count = 0 then
      -- tiqu options shuju
      -- DBMS_OUTPUT.PUT_LINE('SN is' || vv_sn);
      begin --step  111
        select m.id, m.f_sfmy, m.f_sfmy_yj, m.f_sfmy_bz, m.create_date
          into vn_id,
               vv_f_sfmy,
               vv_f_sfmy_yj,
               vv_f_sfmy_bz,
               vd_create_date
          from (select t.id, t.f_sfmy, t.f_sfmy_yj, t.f_sfmy_bz, t.create_date
                  from xcy_complain_option t
                 where t.complain_id = vn_c_id
                   and t.f_sfmy is not null
                 order by t.create_date desc) m
         where rownum = 1;
         -- cha ru man yi biao
         insert into w_sfmy(id,f_complainid,f_serial_no,f_sfmy,f_sfmy_yj,f_sfmy_bz,create_date)
         values (vn_id,vn_c_id,vv_sn,vv_f_sfmy,vv_f_sfmy_yj,vv_f_sfmy_bz,vd_create_date);
         -- logs
         insert into w_sfmy_test(sn,comm) values(vv_sn,'ok');
/*         update t_complaints_details t -- F8baobiao
            set t.派单是否满意       = vv_f_sfmy,
                t.派单不满意原因     = vv_f_sfmy_yj,
                t.派单不满意原因备注 = vv_f_sfmy_bz
          where t.流水号 = vv_sn;
*/       exception
         when no_data_found then
            insert into w_sfmy_test(sn,comm) values(vv_sn,'no found options sfmy');
       end; --- step 111
    end if;
  END LOOP;
  CLOSE cr_complain_maanger;
  commit;
end;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','P_DUBAN_GENERATER_MSG','CSCDS') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','CSCDS_BAK','WLSTYDB')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "WLSTYDB"."CSCDS_BAK" as
         nd_now date:=sysdate;
  begin
     insert into  bak_tydb_cscds_task_log(token_id,create_date)
     select token_id,create_date
     from bak_tydb_cscds_task
     where create_date<nd_now-10;--10天之前的数据备份

     delete from bak_tydb_cscds_task where create_date<nd_now-10;
     execute immediate 'alter index ind_bak_t_cscds_token_id rebuild';
  end;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','P_DUBAN_SCAN','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_DUBAN_SCAN_PORTAL','CSCDS') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','LINK_CSCDS_TASK','WLSTYDB')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "WLSTYDB"."LINK_CSCDS_TASK" AS
var_startdate date:=sysdate;
Begin
  --删除临时表数据
  execute immediate 'alter session set nls_timestamp_format=''yyyy-mm-dd HH24:mi:ss''';
  execute immediate 'delete from  tydb_cscds_task';
  --获取待办信息
  INSERT INTO tydb_cscds_task
    SELECT *
    -- lyl 2020-01-11--bak  FROM cscds.tydb_cscds_task_view
    from cscds.tydb_cscds_problem_task_view t
     where /*sysdate between trunc(sysdate, 'dd') + 8 / 24 and
           trunc(sysdate, 'dd') + 19 / 24 and */ not exists (
          select 1 from  qccg_tydb_date a where a.token_id = t.token_id
           );
  -- 备份日志
  insert into bak_tydb_cscds_task
    select t.token_id, sysdate from tydb_cscds_task t where  not exists (
          select 1 from  qccg_tydb_date a where a.token_id = t.token_id
           );
    -- 现在量
 /* insert into l_cscds_count
    (c, create_date, t)
    select count(1), var_startdate, '1' from tydb_v_cscds;
    -- 以前量
  insert into l_cscds_count
    (c, create_date, t)
    select count(1), var_startdate, '2'
      from tydb_cscds_task t
     WHERE NOT EXISTS (select 1
              from qccg_tydb_date b
             where t.token_id = b.token_id
               and trim('cscds') = b.app_key
               and t.username = b.username);
    --本次抓取的量
  insert into l_cscds_count
  (c, create_date, t)
  select count(1), var_startdate, '3' from tydb_cscds_task; */
   COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
END LINK_CSCDS_TASK;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','P_DUBAN_SCAN_PORTAL_TSDS','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_DUBAN_SEND_MSG','CSCDS') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','CLEAN_DATA_P','EIPUSR')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "EIPUSR"."CLEAN_DATA_P" IS
  cursor_name    INTEGER;
  rows_processed INTEGER;
   R_CONFIG     EIP_CLEAN_DATA_CONFIG%ROWTYPE; --记录当前行
    R_CLEAN_DATA varchar2(255);
    CURSOR C_CONFIG IS
      SELECT C.ID,
             C.TABLE_NAME,
             C.CLEAN_INTERVAL,
             C.LAST_UPDATE_DATE,
             C.ENABLED_FLAG
        FROM EIP_CLEAN_DATA_CONFIG C
       WHERE C.ENABLED_FLAG = 'Y'
       ORDER BY C.ID; --定义读取配置表的游标
BEGIN
  BEGIN
    OPEN C_CONFIG;
    LOOP
      FETCH C_CONFIG
        INTO R_CONFIG;
      EXIT WHEN C_CONFIG%NOTFOUND;
      select to_char(sysdate-R_CONFIG.CLEAN_INTERVAL/24/60,'yyyy-mm-dd HH24:MI:SS') into R_CLEA
N_DATA from dual;  --获得当前时间减去时间间隔的时间
      cursor_name := dbms_sql.open_cursor;--动态执行删除SQL
      dbms_sql.parse(cursor_name,
                     'DELETE FROM '|| R_CONFIG.TABLE_NAME ||' WHERE LAST_UPDATE_DATE <= :x',
                     dbms_sql.native);
      dbms_sql.bind_variable(cursor_name, ':x', to_date(R_CLEAN_DATA,'yyyy-mm-dd HH24:MI:SS'));
      rows_processed := dbms_sql.execute(cursor_name);
      dbms_sql.close_cursor(cursor_name);
    END LOOP;
    CLOSE C_CONFIG;
  EXCEPTION
    WHEN OTHERS THEN
      dbms_sql.close_cursor(cursor_name);
      ROLLBACK;
  END;
  COMMIT;
END CLEAN_DATA_P;




SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','P_DUBAN_TH','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_DUBAN_TH_PORTAL','CSCDS') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','STATISTICS','EIPUSR')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "EIPUSR"."STATISTICS" is
  monthNum INTEGER := 0;
begin
  --月数据
  WHILE monthNum <= 3 LOOP
    monthNum := monthNum + 1;
    --运行次数
    ----按服务名称
    INSERT INTO EIP_ALFRE_SRV_ONE_MONTH
      (SELECT EIP_ALFRE_SRV_ONE_MONTH_S.NEXTVAL AS ID,
              T.*,
              1 AS CREATED_BY,
              SYSDATE AS CREATION_DATE,
              1 AS LAST_UPDATED_BY,
              SYSDATE AS LAST_UPDATE_DATE,
              1 AS LAST_UPDATE_LOGIN,
              'Y' AS ENABLED_FLAG,
              1 AS OBJ_VERSION
         FROM (SELECT EI.PROVINCE_CODE AS PROVINCE_CODE,
                      EI.PROVINCE_NAME AS PROVINCE_NAME,
                      EI.SERVICE_NAME_EN AS SERVICE_NAME_EN,
                      MIN(EI.CREATION_DATE) AS MIN_CREATION_DATE,
                      MAX(EI.CREATION_DATE) AS MAX_CREATION_DATE,
                      TO_CHAR(CREATION_DATE, 'YYYY"年"-MM"月"') AS INVOKE_DATE,
                      COUNT(1) AS TOTAL_COUNT
                 FROM EIP_INSTANCES EI
                WHERE TO_CHAR(CREATION_DATE, 'YYYY-MM') =
                      TO_CHAR(ADD_MONTHS(SYSDATE, 0 - monthNum), 'YYYY-MM') --循环变量1的倍数
                GROUP BY EI.PROVINCE_CODE,
                         EI.PROVINCE_NAME,
                         EI.SERVICE_NAME_EN,
                         TO_CHAR(CREATION_DATE, 'YYYY"年"-MM"月"')) T);
    ----按系统名称
    INSERT INTO EIP_ALFRE_APP_ONE_MONTH
      (SELECT EIP_ALFRE_APP_ONE_MONTH_S.NEXTVAL AS ID,
              T.*,
              1 AS CREATED_BY,
              SYSDATE AS CREATION_DATE,
              1 AS LAST_UPDATED_BY,
              SYSDATE AS LAST_UPDATE_DATE,
              1 AS LAST_UPDATE_LOGIN,
              'Y' AS ENABLED_FLAG,
              1 AS OBJ_VERSION
         FROM (SELECT EI.PROVINCE_CODE AS PROVINCE_CODE,
                      EI.PROVINCE_NAME AS PROVINCE_NAME,
                      EI.SERVICE_NAME_EN AS SERVICE_NAME_EN,
                      EI.APPLICATION_NAME AS APPLICATION,
                      MIN(EI.CREATION_DATE) AS MIN_CREATION_DATE,
                      MAX(EI.CREATION_DATE) AS MAX_CREATION_DATE,
                      TO_CHAR(CREATION_DATE, 'YYYY"年"-MM"月"') AS INVOKE_DATE,
                      COUNT(1) AS TOTAL_COUNT
                 FROM EIP_INSTANCES EI
                WHERE TO_CHAR(CREATION_DATE, 'YYYY-MM') =
                      TO_CHAR(ADD_MONTHS(SYSDATE, 0 - monthNum), 'YYYY-MM') --循环变量1的倍数
                GROUP BY EI.PROVINCE_CODE,
                         EI.PROVINCE_NAME,
                         EI.APPLICATION_NAME,
                         EI.SERVICE_NAME_EN,
                         TO_CHAR(CREATION_DATE, 'YYYY"年"-MM"月"')) T);
    --运行时长
    ----按服务名称
    INSERT INTO EIP_ALTIME_SRV_ONE_MONTH
      (SELECT EIP_ALTIME_SRV_ONE_MONTH_S.NEXTVAL AS ID,
              T.*,
              1 AS CREATED_BY,
              SYSDATE AS CREATION_DATE,
              1 AS LAST_UPDATED_BY,
              SYSDATE AS LAST_UPDATE_DATE,
              1 AS LAST_UPDATE_LOGIN,
              'Y' AS ENABLED_FLAG,
              1 AS OBJ_VERSION
         FROM (SELECT EI.PROVINCE_CODE AS PROVINCE_CODE,
                      EI.PROVINCE_NAME AS PROVINCE_NAME,
                      EI.SERVICE_NAME_EN AS SERVICE_NAME_EN,
                      TRUNC(SUM(EI.COST) / COUNT(1), 2) AS COST_TIME,
                      MAX(EI.COST) MAX_TIME,
                      MIN(EI.COST) MIN_TIME,
                      TO_CHAR(CREATION_DATE, 'YYYY"年"-MM"月"') AS INVOKE_DATE
                 FROM EIP_INSTANCES EI
                WHERE TO_CHAR(CREATION_DATE, 'YYYY-MM') =
                      TO_CHAR(ADD_MONTHS(SYSDATE, 0 - monthNum), 'YYYY-MM')
                GROUP BY EI.PROVINCE_CODE,
                         EI.PROVINCE_NAME,
                         EI.SERVICE_NAME_EN,
                         TO_CHAR(CREATION_DATE, 'YYYY"年"-MM"月"')) T);
    ----按系统名称
    INSERT INTO EIP_ALTIME_APP_ONE_MONTH
      (SELECT EIP_ALTIME_APP_ONE_MONTH_S.NEXTVAL AS ID,
              T.*,
              1 AS CREATED_BY,
              SYSDATE AS CREATION_DATE,
              1 AS LAST_UPDATED_BY,
              SYSDATE AS LAST_UPDATE_DATE,
              1 AS LAST_UPDATE_LOGIN,
              'Y' AS ENABLED_FLAG,
              1 AS OBJ_VERSION
         FROM (SELECT EI.PROVINCE_CODE AS PROVINCE_CODE,
                      EI.PROVINCE_NAME AS PROVINCE_NAME,
                      EI.SERVICE_NAME_EN AS SERVICE_NAME_EN,
                      EI.APPLICATION_NAME AS APPLICATION,
                      TRUNC(SUM(EI.COST) / COUNT(1), 2) AS COST_TIME,
                      MAX(EI.COST) MAX_TIME,
                      MIN(EI.COST) MIN_TIME,
                      TO_CHAR(CREATION_DATE, 'YYYY"年"-MM"月"') AS INVOKE_DATE
                 FROM EIP_INSTANCES EI
                WHERE TO_CHAR(CREATION_DATE, 'YYYY-MM') =
                      TO_CHAR(ADD_MONTHS(SYSDATE, 0 - monthNum), 'YYYY-MM')
                GROUP BY EI.PROVINCE_CODE,
                         EI.PROVINCE_NAME,
                         EI.SERVICE_NAME_EN,
                         EI.APPLICATION_NAME,
                         TO_CHAR(CREATION_DATE, 'YYYY"年"-MM"月"')) T);
    --异常清单
    INSERT INTO EIP_ALEXC_ONE_MONTH
      (SELECT EIP_ALEXC_ONE_MONTH_S.NEXTVAL AS ID,
              T.*,
              1 AS CREATED_BY,
              SYSDATE AS CREATION_DATE,
              1 AS LAST_UPDATED_BY,
              SYSDATE AS LAST_UPDATE_DATE,
              1 AS LAST_UPDATE_LOGIN,
              'Y' AS ENABLED_FLAG,
              1 AS OBJ_VERSION
         FROM (SELECT DISTINCT EI.PROVINCE_CODE AS PROVINCE_CODE,
                               EI.PROVINCE_NAME AS PROVINCE_NAME,
                               EI.SERVICE_NAME_EN AS SERVICE_NAME_EN,
                               EI.APPLICATION_NAME AS APPLICATION,
                               MIN(EI.CREATION_DATE) AS MIN_CREATION_DATE,
                               MAX(EI.CREATION_DATE) AS MAX_CREATION_DATE,
                               TO_CHAR(CREATION_DATE, 'YYYY"年"-MM"月"') AS INVOKE_DATE,
                               COUNT(1) AS EXCEPTION_COUNT
                 FROM EIP_INSTANCES EI, EIP_AUDIT_TRAILS EA
                WHERE EI.CIKEY = EA.CIKEY
                  AND TO_CHAR(CREATION_DATE, 'YYYY-MM') =
                      TO_CHAR(ADD_MONTHS(SYSDATE, 0 - monthNum), 'YYYY-MM')
                GROUP BY EI.PROVINCE_CODE,
                         EI.PROVINCE_NAME,
                         EI.SERVICE_NAME_EN,
                         EI.APPLICATION_NAME,
                         TO_CHAR(CREATION_DATE, 'YYYY"年"-MM"月"')) T);
  END LOOP;
  commit;
end STATISTICS;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','P_DUBAN_UPDATE_DB_COUNT','CSCDS') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','TEST_DELAY','EIPUSR')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "EIPUSR"."TEST_DELAY" (second in number,result out varchar2) as
t number;
begin
  DBMS_LOCK.SLEEP(second);
  dbms_output.put_line( 'YES');
  result:='OK';
end TEST_DELAY;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','P_DUBAN_UPDATE_DB_COUNT_CF','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_INSERT_DBYJ_SEND_SERIALNO','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_INSERT_DBYJ_SEND_SERIALNO_CF','CSCDS') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','BUG_F8','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."BUG_F8" as

     lv_ywnr t_complaints_details.客户投诉内容%type;
     lv_sn t_complaints_details.流水号%type;
     CURSOR f8_cur
     IS
          SELECT 客户投诉内容,流水号
            FROM t_complaints_details t

            where t.createtime >= to_date('2016-06-01','yyyy-mm-dd')
            and t.createtime <= to_date('2016-10-01','yyyy-mm-dd') ;

  BEGIN
     OPEN f8_cur;

     LOOP
        FETCH f8_cur INTO lv_ywnr,lv_sn;
        EXIT WHEN f8_cur%NOTFOUND;
        --insert into cscds.bug_ywnr_1130(sn,ywnr) values(lv_sn,lv_ywnr);
        select regexp_replace(lv_ywnr,'[0-9]{6,}','******') into lv_ywnr from dual;
        update cscds.t_complaints_details a set a.客户投诉内容 =lv_ywnr where a.流水号 = lv_sn;
     END LOOP;

     CLOSE f8_cur;
     commit;
  END;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','P_JIEDUANHUIFU','CSCDS') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','GETID','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."GETID" ()  AS
BEGIN
  select complaint_id  from cscds.bpm_complaints;
END GetId;




SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','P_MV_REFLUSH','CSCDS') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','P_DUBAN_GENERATER_MSG','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_DUBAN_GENERATER_MSG" (d_begin_date DATE default trunc(sysdate),
                                                    d_end_date   DATE default sysdate,
                                                    v_scan_type  VARCHAR2 DEFAULT 'DUBA
N_MSG') AS
  /***
  以天为单位
  ***/
  vn_minus_date number:=1 - 17 / 24 - 2 / 48;--时间周期调整
  i_index     NUMBER := 0;
  i_commit    NUMBER := 500;
  n_msg_level NUMBER;
  type rec_duban is record(
    msg_flag    number,
    msg_level   number,
    tsfl        varchar2(100 char),
    db_level    integer,
    create_date date,
    frequence   integer,
    id          number,
    rd          varchar2(40));
  duban rec_duban;
  cursor cur_msg is
    SELECT (sign(db.all_count - w.blue_warn_threshold + 1) + 1) * 1000 +
           (sign(db.all_count - w.yellow_warn_threshold + 1) + 1) * 100 +
           (sign(db.all_count - w.red_warn_threshold + 1) + 1) * 10 msg_flag,
           instr('' || (sign(db.all_count - w.blue_warn_threshold + 1) + 1) ||
                 (sign(db.all_count - w.yellow_warn_threshold + 1) + 1) ||
                 (sign(db.all_count - w.red_warn_threshold + 1) + 1) || 0,
                 '2',
                 -1,
                 1) - 1 msg_level,
           db.tsfl,
           sign(db.all_count - w.supervision_threshold + 1) db_level,
           db.create_date,
           db.frequence,
           db.id,
           db.rowid rd
      FROM xcy_sys_warn_set w, xcy_complaints_duban db
     WHERE db.create_date >= trunc(d_begin_date+vn_minus_date, 'DD')
       and db.create_date < d_end_date
       AND w.complaints_type_id = db.tsfl/*
       AND db.all_count >= w.blue_warn_threshold
       AND db.msg_flag <
           (sign(db.all_count - w.blue_warn_threshold + 1) + 1) * 1000 +
           (sign(db.all_count - w.yellow_warn_threshold + 1) + 1) * 100 +
           (sign(db.all_count - w.red_warn_threshold + 1) + 1) * 10*/
       and db.all_count >= w.supervision_threshold
       AND w.statistical_frequency = db.frequence
       and db.msg_flag <=90000
       and db.frequence = 0;
  --n_db_count   NUMBER;
BEGIN
/*  INSERT INTO xcy_complaints_duban_scan
    (last_date, scan_type)
  VALUES
    (d_begin_date, v_scan_type);*/
  open cur_msg;
  loop
    fetch cur_msg
      into duban;
    exit when cur_msg%notfound;
/*    UPDATE xcy_complaints_duban
       SET msg_flag = duban.msg_flag
     WHERE ROWID = duban.rd;*/

/*    INSERT INTO xcy_complaints_duban_msg
      (db_id, tsfl, msg_level, frequence, db_create_date, id)
    VALUES
      (duban.id,
       duban.tsfl,
select dbms_metadata.get_ddl('PROCEDURE','P_MV_VIEW_COMPLAIN_OPTION','CSCDS') FROM DUAL;
       duban.msg_level,
       duban.frequence,
       duban.create_date,
       sq_xcy_complaints_duban_msg.nextval);*/
    IF duban.db_level = 1 THEN
      INSERT INTO xcy_complaints_duban_msg
        (db_id, tsfl, msg_level, frequence, db_create_date, id)
      VALUES
        (duban.id,
         duban.tsfl,
         3,
         duban.frequence,
         duban.create_date,
         sq_xcy_complaints_duban_msg.nextval);
      UPDATE xcy_complaints_duban
       SET msg_flag = 90000+msg_flag--只督办一次
     WHERE ROWID = duban.rd;

     n_msg_level := CASE duban.db_level
                   WHEN 1 THEN
                    3
                   ELSE
                    duban.msg_level
                 END;
     p_duban_send_msg(v_tsfl        => duban.tsfl,
                       d_create_date => duban.create_date,
                       n_db_id       => duban.id,
                       n_msg_level   => n_msg_level,
                       n_frequence   => duban.frequence);
      i_index := i_index + 1;
      IF MOD(i_index, i_commit) = 0 THEN
        COMMIT;
      END IF;

    end if;
  end loop;
  close cur_msg;
  -- 发送短信
 /* UPDATE xcy_complaints_duban_scan scan
     SET scan.last_date = d_begin_date
   WHERE scan.scan_type = v_scan_type;*/
  INSERT INTO xcy_complaints_duban_scan_log
    (scan_begin, scan_end, scan_type)
  VALUES
    (d_begin_date, d_end_date, v_scan_type);
  COMMIT;

END;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','P_TABLE_COMPLAIN_F12','CSCDS') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','P_DUBAN_SCAN','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_DUBAN_SCAN" (d_end_date  DATE DEFAULT SYSDATE,
                                         v_scan_type VARCHAR2 DEFAULT 'DUBAN') AS
  -- 最后一扫描时间做为开始扫描时间
  --
  d_begin_scan xcy_complaints_duban_scan.last_date%TYPE;
  vn_minus_date number:=1 - 17 / 24 - 1 / 48;--时间周期调整
BEGIN
  SELECT MAX(last_date)
    INTO d_begin_scan
    FROM xcy_complaints_duban_scan
   WHERE scan_type = v_scan_type;
  IF d_begin_scan IS NULL THEN
    d_begin_scan := SYSDATE;
    INSERT INTO xcy_complaints_duban_scan
      (last_date, scan_type)
    VALUES
      (d_begin_scan, v_scan_type);
  END IF;

  IF d_begin_scan > d_end_date THEN
    RETURN;
  END IF;

  MERGE INTO xcy_complaints_duban duban
  USING (
    WITH a AS
     (SELECT *
        FROM (SELECT t.f_slhmlx
                    ,trunc(t.f_slsj+vn_minus_date, 'dd') d
                    ,
                     -- count(1) over(partition by t.f_slhmlx, trunc(t.f_slsj, 'dd')) dd,
                     trunc(t.f_slsj+vn_minus_date, 'mm') m
                    ,
                     -- count(1) over(partition by t.f_slhmlx, trunc(t.f_slsj, 'm
m')) mm,
                     trunc(t.f_slsj+vn_minus_date, 'q') q
                    ,
                     -- count(1) over(partition by t.f_slhmlx, trunc(t.f_slsj, 'q')) qq,
                     trunc(t.f_slsj+vn_minus_date, 'yyyy') y --,
              --count(1) over(partition by t.f_slhmlx, trunc(t.f_slsj, 'yyyy')) yy
                FROM xcy_complaints_temp t
               WHERE t.create_date >= d_begin_scan
                 AND t.create_date < d_end_date))
    SELECT f_slhmlx
          , /*max(dd)*/SUM(1) c
          ,0 f
          ,d
      FROM a
     GROUP BY f_slhmlx
             ,d/*
    UNION ALL
    SELECT f_slhmlx
          , \*max(mm)*\SUM(1)
          ,1
          ,m
      FROM a
     GROUP BY f_slhmlx
             ,m
    UNION ALL
    SELECT f_slhmlx
          , \*max(qq)*\SUM(1)
          ,2
          ,q
      FROM a
     GROUP BY f_slhmlx
             ,q
    UNION ALL
    SELECT f_slhmlx
          , \*max(yy)*\SUM(1)
          ,3
          ,y
      FROM a
     GROUP BY f_slhmlx
             ,y*/) temp
        ON (duban.create_date = temp.d AND duban.frequence = temp.f AND
           duban.tsfl = temp.f_slhmlx)
    -- update and insert
     WHEN MATCHED THEN
      UPDATE
         SET duban.all_count = duban.all_count + temp.c,
             duban.update_date = d_end_date
    WHEN NOT MATCHED THEN
      INSERT
        (id, tsfl, all_count, frequence, duban.create_date)
      VALUES
        (seq_xcy_complaints_duban.nextval, temp.f_slhmlx, temp.c, temp.f,
         temp.d);
  COMMIT;
  p_duban_th(d_begin_date => d_begin_scan, d_end_date => d_end_date);
  --生成督办数据
  p_duban_generater_msg(d_begin_date => d_begin_scan, d_end_date => d_end_date);
  --dbms_output.put_line(d_end_date);
  --dbms_output.put_line(v_scan_type);
  UPDATE xcy_complaints_duban_scan scan
     SET scan.last_date = d_end_date
   WHERE scan.scan_type = v_scan_type;
  INSERT INTO xcy_complaints_duban_scan_log
    (scan_begin, scan_end, scan_type)
  VALUES
    (d_begin_scan, d_end_date, v_scan_type);
END;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','P_TABLE_COMPLAIN_F12_SLEEP','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_TABLE_COMPLAIN_F12_UP','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_TABLE_COMPLAIN_F22','CSCDS') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','P_DUBAN_SCAN_PORTAL','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_DUBAN_SCAN_PORTAL" (d_end_date  DATE DEFAULT SYSDATE,
                                         v_scan_type VARCHAR2 DEFAULT 'DUBAN_PORTAL') AS
  -- 最后一扫描时间做为开始扫描时间
  --
  d_begin_scan xcy_complaints_duban_scan.last_date%TYPE;

BEGIN

 --qi ling
update xcy_complaints_duban_scan t set t.last_date = date'2010-01-01' where t.scan_type = 'DUBAN_PORTAL';
execute immediate   'truncate table xcy_complaints_duban_portal';

  SELECT MAX(last_date)
    INTO d_begin_scan
    FROM xcy_complaints_duban_scan
   WHERE scan_type = v_scan_type;
  IF d_begin_scan IS NULL THEN
    d_begin_scan := SYSDATE;
    INSERT INTO xcy_complaints_duban_scan
      (last_date, scan_type)
    VALUES
      (d_begin_scan, v_scan_type);
  END IF;

  IF d_begin_scan > d_end_date THEN
    RETURN;
  END IF;

  MERGE INTO xcy_complaints_duban_portal duban
  USING (
    WITH a AS
     (SELECT *
        FROM (SELECT t.f_slhmlx
                    ,trunc(t.f_slsj, 'dd') d
                    ,
                     -- count(1) over(partition by t.f_slhmlx, trunc(t.f_slsj, 'dd')) dd,
                     trunc(t.f_slsj, 'mm') m
                    ,
                     -- count(1) over(partition by t.f_slhmlx, trunc(t.f_slsj, 'mm')) mm,
                     trunc(t.f_slsj, 'q') q
                    ,
                     -- count(1) over(partition by t.f_slhmlx, trunc(t.f_slsj, 'q')) qq,
                     trunc(t.f_slsj, 'yyyy') y --,
              --count(1) over(partition by t.f_slhmlx, trunc(t.f_slsj, 'yyyy')) yy
                FROM xcy_complaints_temp t
               WHERE t.create_date >= d_begin_scan
                 AND t.create_date < d_end_date
                 and t.f_serialno not in (
                     select m.f_serialno
                     from w_complain_error_is_consult m
                 )))
    SELECT f_slhmlx
          , /*max(dd)*/SUM(1) c
          ,0 f
          ,d
      FROM a
     GROUP BY f_slhmlx
             ,d
    UNION ALL
    SELECT f_slhmlx
          , /*max(mm)*/SUM(1)
          ,1
          ,m
      FROM a
     GROUP BY f_slhmlx
             ,m
    UNION ALL
    SELECT f_slhmlx
          , /*max(qq)*/SUM(1)
          ,2
          ,q
      FROM a
     GROUP BY f_slhmlx
             ,q
    UNION ALL
    SELECT f_slhmlx
          , /*max(yy)*/SUM(1)
          ,3
          ,y
      FROM a
     GROUP BY f_slhmlx
             ,y) temp
        ON (duban.create_date = temp.d AND duban.frequence = temp.f AND
           duban.tsfl = temp.f_slhmlx)
    -- update and insert
     WHEN MATCHED THEN
      UPDATE
         SET duban.all_count = duban. all_count + temp.c,
             duban.update_date = d_end_date
    WHEN NOT MATCHED THEN
      INSERT
        (id, tsfl, all_count, frequence, duban.create_date)
      VALUES
        (seq_xcy_complaints_duban.nextval, temp.f_slhmlx, temp.c, temp.f,
         temp.d);
  COMMIT;
  P_DUBAN_TH_PORTAL(d_begin_date => d_begin_scan, d_end_date => d_end_date);
  --生成督办数据
  --p_duban_generater_msg(d_begin_date => d_begin_scan, d_end_date => d_end_date);
  --dbms_output.put_line(d_end_date);
  --dbms_output.put_line(v_scan_type);
  UPDATE xcy_complaints_duban_scan scan
     SET scan.last_date = d_end_date
   WHERE scan.scan_type = v_scan_type;
  INSERT INTO xcy_complaints_duban_scan_log
    (scan_begin, scan_end, scan_type)
  VALUES
    (d_begin_scan, d_end_date, v_scan_type);
END;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','P_TABLE_COMPLAIN_F8','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_TABLE_COMPLAIN_F8_SLEEP','CSCDS') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','P_DUBAN_SCAN_PORTAL_TSDS','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_DUBAN_SCAN_PORTAL_TSDS" (d_end_date  DATE DEFAULT SYSDATE,
                                         v_scan_type VARCHAR2 DEFAULT 'DUBAN_PORTAL_TSDS') AS
  -- 最后一扫描时间做为开始扫描时间
  --
  d_begin_scan xcy_complaints_duban_scan.last_date%TYPE;

BEGIN

 --qi ling
update xcy_complaints_duban_scan t set t.last_date = date'2010-01-01' where t.scan_type = 'DUBAN_PORTAL
_TSDS';
execute immediate   'truncate table xcy_complaints_duban_port_tsds';

  SELECT MAX(last_date)
    INTO d_begin_scan
    FROM xcy_complaints_duban_scan
   WHERE scan_type = v_scan_type;
  IF d_begin_scan IS NULL THEN
    d_begin_scan := SYSDATE;
    INSERT INTO xcy_complaints_duban_scan
      (last_date, scan_type)
    VALUES
      (d_begin_scan, v_scan_type);
  END IF;

  IF d_begin_scan > d_end_date THEN
    RETURN;
  END IF;

  MERGE INTO xcy_complaints_duban_port_tsds duban
  USING (
    WITH a AS
     (SELECT *
        FROM (SELECT t.f_slhmlx,t.f_yhtsds
                    ,trunc(t.f_slsj, 'dd') d
                    ,
                     -- count(1) over(partition by t.f_slhmlx, trunc(t.f_slsj, 'd
d')) dd,
                     trunc(t.f_slsj, 'mm') m
                    ,
                     -- count(1) over(partition by t.f_slhmlx, trunc(t.f_slsj, 'mm')
) mm,
                     trunc(t.f_slsj, 'q') q
                    ,
                     -- count(1) over(partition by t.f_slhmlx, trunc(t.f_slsj, 'q')) qq,

                     trunc(t.f_slsj, 'yyyy') y --,
              --count(1) over(partition by t.f_slhmlx, trunc(t.f_slsj, 'yyyy')) yy
                FROM --xcy_complaints_temp t
                     xcy_complaints_temp_mv t
               WHERE t.create_date >= d_begin_scan
                 AND t.create_date < d_end_date
                 ))
    SELECT f_slhmlx,'999' f_yhtsds,/*max(dd)*/SUM(1) c,0 f,d FROM a GROUP BY f_slhmlx,d
    UNION ALL
    SELECT f_slhmlx,'999' f_yhtsds,/*max(mm)*/SUM(1),1,m FROM a GROUP BY f_slhmlx,m
    UNION ALL
    SELECT f_slhmlx,'999' f_yhtsds,/*max(qq)*/SUM(1),2,q FROM a GROUP BY f_slhmlx,q
    UNION ALL
    SELECT f_slhmlx,'999' f_yhtsds,/*max(yy)*/SUM(1),3,y FROM a GROUP BY f_slhmlx,y
    --新增begin
    UNION ALL
    SELECT f_slhmlx,f_yhtsds,/*max(dd)*/SUM(1) c,0 f ,d FROM a GROUP BY f_slhmlx,f_yh
tsds,d
    UNION ALL
    SELECT f_slhmlx,f_yhtsds,/*max(mm)*/SUM(1),1,m FROM a GROUP BY f_slhmlx,f_yhtsds,m
    UNION ALL
    SELECT f_slhmlx,f_yhtsds,/*max(qq)*/SUM(1),2,q FROM a GROUP BY f_slhmlx,f_yhtsds,q
    UNION ALL
    SELECT f_slhmlx,f_yhtsds,/*max(yy)*/SUM(1),3,y FROM a GROUP BY f_slhmlx,f_yhtsds,y
    --新增end

    ) temp
        ON (duban.create_date = temp.d AND duban.frequence = temp.f AND
           duban.tsfl = temp.f_slhmlx)
    -- update and insert
     WHEN MATCHED THEN
      UPDATE
         SET duban.all_count = duban. all_count + temp.c,
             duban.update_date = d_end_date
    WHEN NOT MATCHED THEN
      INSERT
        (id, tsfl, all_count, frequence, duban.create_date, tsds)
      VALUES
        (seq_xcy_complaints_duban_tsds.nextval, temp.f_slhmlx, temp.c, temp.f,
         temp.d, temp.f_yhtsds);
  COMMIT;
  --P_DUBAN_TH_PORTAL_TSDS(d_begin_date => d_begin_scan, d_end_date => d_end_date);
  --生成督办数据
  --p_duban_generater_msg(d_begin_date => d_begin_scan, d_end_date => d_end_date);
  --dbms_output.put_line(d_end_date);
  --dbms_output.put_line(v_scan_type);
  UPDATE xcy_complaints_duban_scan scan
     SET scan.last_date = d_end_date
   WHERE scan.scan_type = v_scan_type;
  INSERT INTO xcy_complaints_duban_scan_log
    (scan_begin, scan_end, scan_type)
  VALUES
    (d_begin_scan, d_end_date, v_scan_type);
END;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','P_TABLE_COMPLAIN_F8_UP','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_TABLE_VIEW_COMPLAIN_PD_RL','CSCDS') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','P_DUBAN_SEND_MSG','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_DUBAN_SEND_MSG" (v_tsfl        VARCHAR2,
                                             d_create_date DATE,
                                             n_db_id       NUMBER,
                                             n_msg_level   NUMBER,
                                             n_frequence   NUMBER) AS
  v_tsfl_fullname VARCHAR2(200);
  v_city_str      VARCHAR2(4000);
  v_msg_content   VARCHAR2(10000);
  v_date_fromat   VARCHAR2(40) := 'YYYY"年"MM"月"DD"日"HH24"时"MI"分"SS"秒"';
  v_current_date  VARCHAR2(40);
  TYPE type_level IS VARRAY(4) OF VARCHAR2(10);
  arry_type_level  type_level := type_level('蓝色', '黄色', '红色', '督办');
  arry_date_format type_level := type_level('dd', 'mm', 'q', 'yyyy');
  d_db_update_date DATE;
  n_count          NUMBER; -- 投诉总量
  n_msg_id         NUMBER;
BEGIN
  v_current_date := to_char(SYSDATE, v_date_fromat);
  SELECT MAX(a.fullname)
    INTO v_tsfl_fullname
    FROM dict.t_sr_servicerequesttype a
   WHERE a.srtypeid = v_tsfl;

  IF v_tsfl_fullname IS NULL THEN
    RETURN;
  END IF;

  SELECT b.all_count
        ,b.update_date
    INTO n_count
        ,d_db_update_date
    FROM xcy_complaints_duban b
   WHERE b.id = n_db_id;

  SELECT m.id
    INTO n_msg_id
    FROM xcy_complaints_duban_msg m
   WHERE m.db_id = n_db_id
     AND m.msg_level = n_msg_level
     AND m.frequence = n_frequence;
  SELECT listagg(nvl(c.name,'其它') || ':' || COUNT(1) || '件', '、') within GROUP(ORDER BY c.gradeid)
    INTO v_city_str
    FROM dict.xcy_dict_complaintcity c
        ,xcy_complaints_temp         d
   WHERE d.f_yhtsds = c.gradeid(+)
     AND d.f_slhmlx = v_tsfl
     AND d.create_date < d_db_update_date
     AND trunc(d.f_slsj+(1-17/24-1/48), arry_date_format(n_frequence + 1)) = d_create_date
   GROUP BY c.gradeid
           ,nvl(c.name,'其它');
  v_msg_content := v_current_date || arry_type_level(n_msg_level + 1) ||
                   '告警：' || '【' || v_tsfl_fullname || '】' || '工单已达' ||
                   n_count || '件。分布情况：' || v_city_str || '。(OA投诉处理系
统)。';

  -- 插入短信临时表
  INSERT INTO xcy_complaints_duban_msg_con
    (tsfl, db_id, msg_id, msg_content)
  VALUES
    (v_tsfl, n_db_id, n_msg_id, v_msg_content);
-- 插入短信扫描表，扫描后把数据删除
  INSERT INTO xcy_complaints_duban_msg_con_t
    (tsfl, db_id, msg_id, msg_content)
  VALUES
    (v_tsfl, n_db_id, n_msg_id, v_msg_content);
  /*dbms_output.put_line(v_city_str);
  dbms_output.put_line(d_db_update_date);
  dbms_output.put_line(n_count);
  dbms_output.put_line(v_tsfl_fullname);
  dbms_output.put_line(arry_date_format(n_frequence + 1));
  dbms_output.put_line(arry_type_level(n_msg_level + 1));
  dbms_output.put_line(v_msg_content);*/

END;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','P_TAB_REFLUSH','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_TAB_REFLUSH_RESULT','CSCDS') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','P_DUBAN_TH','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_DUBAN_TH" (d_begin_date DATE, d_end_date DATE)
/***********
  设置同比、环比值
  以p_duban_scan 参数同步
  ***********/
 AS
  n_prev_count NUMBER; -- 同比值
  n_huan_bi    NUMBER; -- 环比值
  vn_minus_date number:=1 - 17 / 24 - 1 / 48;--时间周期调整
  --n_db_count   NUMBER; -- 督办次数
  d_now        DATE;
  n_index      NUMBER := 0;
  type rec_cur is record(
    rowid       varchar2(40),
    all_count   integer,
    create_date date,
    frequence   integer,
    rd          varchar2(40),
    tsfl        varchar2(40));
  cur rec_cur;
  cursor cur_cur is
    WITH a AS
     (SELECT *
        FROM (SELECT t.f_slhmlx,
                     trunc(t.f_slsj+vn_minus_date, 'dd') d,
                     trunc(t.f_slsj+vn_minus_date, 'mm') m,
                     trunc(t.f_slsj+vn_minus_date, 'q') q,
                     trunc(t.f_slsj+vn_minus_date, 'yyyy') y
                FROM xcy_complaints_temp t
               WHERE t.create_date >= d_begin_date
                 AND t.create_date < d_end_date)),
    b AS
     (SELECT f_slhmlx, 0 f, d
        FROM a
       GROUP BY f_slhmlx, d
      UNION ALL
      SELECT f_slhmlx, 1, m
        FROM a
       GROUP BY f_slhmlx, m
      UNION ALL
      SELECT f_slhmlx, 2, q
        FROM a
       GROUP BY f_slhmlx, q
      UNION ALL
      SELECT f_slhmlx, 3, y
        FROM a
       GROUP BY f_slhmlx, y)
    SELECT duban.rowid,
           duban.all_count,
           duban.create_date,
           duban.frequence,
           duban.rowid rd,
           duban.tsfl
      FROM xcy_complaints_duban duban, b temp
     WHERE (duban.create_date = temp.d AND duban.frequence = temp.f AND
           duban.tsfl = temp.f_slhmlx and
           DUBAN.CREATE_DATE >= trunc(d_begin_date, 'dd') AND
           DUBAN.CREATE_DATE < d_end_date);
BEGIN
  open cur_cur;

  LOOP
    fetch cur_cur
      into cur;
    exit when cur_cur%notfound;
    IF cur.frequence = 0 THEN
      BEGIN
        SELECT all_count
          INTO n_prev_count
select dbms_metadata.get_ddl('PROCEDURE','P_TAB_REFLUSH_RESULT_COMPLAIN','CSCDS') FROM DUAL;
          FROM xcy_complaints_duban dd
         WHERE dd.create_date = cur.create_date - 1
           AND dd.tsfl = cur.tsfl
           AND dd.frequence = 0;
      EXCEPTION
        WHEN no_data_found THEN
          n_prev_count := 0;
      END;

      BEGIN
        SELECT all_count
          INTO n_huan_bi
          FROM xcy_complaints_duban dd
         WHERE dd.create_date = add_months(cur.create_date, -12)
           AND dd.tsfl = cur.tsfl
           AND dd.frequence = 0;
      EXCEPTION
        WHEN no_data_found THEN
          n_huan_bi := 0;
      END;
     /* UPDATE xcy_complaints_duban dd
         SET dd.prev     = n_prev_count,
             dd.hb       = n_huan_bi,
             dd.db_count = n_db_count
       WHERE ROWID = cur.rd;*/
    ELSIF cur.frequence = 1 THEN
      BEGIN
        SELECT all_count
          INTO n_prev_count
          FROM xcy_complaints_duban dd
         WHERE dd.create_date = add_months(cur.create_date, -1)
           AND dd.tsfl = cur.tsfl
           AND dd.frequence = 1;
      EXCEPTION
        WHEN no_data_found THEN
          n_prev_count := 0;
      END;

      BEGIN
        SELECT all_count
          INTO n_huan_bi
          FROM xcy_complaints_duban dd
         WHERE dd.create_date = add_months(cur.create_date, -12)
           AND dd.tsfl = cur.tsfl
           AND dd.frequence = 1;
      EXCEPTION
        WHEN no_data_found THEN
          n_huan_bi := 0;
      END;
    ELSIF cur.frequence = 2 THEN
      BEGIN
        SELECT all_count
          INTO n_prev_count
          FROM xcy_complaints_duban dd
         WHERE dd.create_date = add_months(cur.create_date, -3)
           AND dd.tsfl = cur.tsfl
           AND dd.frequence = 2;
      EXCEPTION
        WHEN no_data_found THEN
          n_prev_count := 0;
      END;

      BEGIN
        SELECT all_count
          INTO n_huan_bi
          FROM xcy_complaints_duban dd
         WHERE dd.create_date = add_months(cur.create_date, -12)
           AND dd.tsfl = cur.tsfl
           AND dd.frequence = 2;
      EXCEPTION
        WHEN no_data_found THEN
          n_huan_bi := 0;
      END;

    ELSIF cur.frequence = 3 THEN
      BEGIN
        SELECT all_count
          INTO n_prev_count
          FROM xcy_complaints_duban dd
         WHERE dd.create_date = add_months(cur.create_date, -12)
           AND dd.tsfl = cur.tsfl
           AND dd.frequence = 3;
      EXCEPTION
        WHEN no_data_found THEN
          n_prev_count := 0;
      END;

      BEGIN
        SELECT all_count
          INTO n_huan_bi
          FROM xcy_complaints_duban dd
         WHERE dd.create_date = add_months(cur.create_date, -12)
           AND dd.tsfl = cur.tsfl
           AND dd.frequence = 3;
      EXCEPTION
        WHEN no_data_found THEN
          n_huan_bi := 0;
      END;
    END IF;
    IF MOD(n_index, 10000) = 0 THEN
      d_now := SYSDATE;
      commit;
    END IF;
    n_index := n_index + 1;
    UPDATE xcy_complaints_duban dd
       SET dd.prev = n_prev_count, dd.hb = n_huan_bi
     WHERE ROWID = cur.rd;
  END LOOP;
  commit;
END;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','P_TAB_XCY_SYS_INTERACTIVE_LOG','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_V_COMPLAIN_UP_STATISTICS','CSCDS') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','P_DUBAN_TH_PORTAL','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_DUBAN_TH_PORTAL" (d_begin_date DATE, d_end_date DATE)
/***********
  设置同比、环比值
  以p_duban_scan 参数同步
  ***********/
 AS
  n_prev_count NUMBER; -- 同比值
  n_huan_bi    NUMBER; -- 环比值
  --n_db_count   NUMBER; -- 督办次数
  d_now        DATE;
  n_index      NUMBER := 0;
  type rec_cur is record(
    rowid       varchar2(40),
    all_count   integer,
    create_date date,
    frequence   integer,
    rd          varchar2(40),
    tsfl        varchar2(40));
  cur rec_cur;
  cursor cur_cur is
    WITH a AS
     (SELECT *
        FROM (SELECT t.f_slhmlx,
                     trunc(t.f_slsj, 'dd') d,
                     trunc(t.f_slsj, 'mm') m,
                     trunc(t.f_slsj, 'q') q,
                     trunc(t.f_slsj, 'yyyy') y
                FROM xcy_complaints_temp t
               WHERE t.create_date >= d_begin_date
                 AND t.create_date < d_end_date)),
    b AS
     (SELECT f_slhmlx, 0 f, d
        FROM a
       GROUP BY f_slhmlx, d
      UNION ALL
      SELECT f_slhmlx, 1, m
        FROM a
       GROUP BY f_slhmlx, m
      UNION ALL
      SELECT f_slhmlx, 2, q
        FROM a
       GROUP BY f_slhmlx, q
      UNION ALL
      SELECT f_slhmlx, 3, y
        FROM a
       GROUP BY f_slhmlx, y)
    SELECT duban.rowid,
           duban.all_count,
           duban.create_date,
           duban.frequence,
           duban.rowid rd,
           duban.tsfl
      FROM xcy_complaints_duban_portal duban, b temp
     WHERE (duban.create_date = temp.d AND duban.frequence = temp.f AND
           duban.tsfl = temp.f_slhmlx and
           DUBAN.CREATE_DATE >= trunc(d_begin_date, 'dd') AND
           DUBAN.CREATE_DATE < d_end_date);
BEGIN
  open cur_cur;

  LOOP
    fetch cur_cur
      into cur;
    exit when cur_cur%notfound;
    IF cur.frequence = 0 THEN
      BEGIN
        SELECT all_count
          INTO n_prev_count
          FROM xcy_complaints_duban_portal dd
         WHERE dd.create_date = cur.create_date - 1
           AND dd.tsfl = cur.tsfl
           AND dd.frequence = 0;
      EXCEPTION
        WHEN no_data_found THEN
          n_prev_count := 0;
      END;

      BEGIN
        SELECT all_count
          INTO n_huan_bi
          FROM xcy_complaints_duban_portal dd
         WHERE dd.create_date = add_months(cur.create_date, -12)
           AND dd.tsfl = cur.tsfl
           AND dd.frequence = 0;
      EXCEPTION
        WHEN no_data_found THEN
          n_huan_bi := 0;
      END;
     /* UPDATE xcy_complaints_duban_portal dd
         SET dd.prev     = n_prev_count,
             dd.hb       = n_huan_bi,
             dd.db_count = n_db_count
       WHERE ROWID = cur.rd;*/
    ELSIF cur.frequence = 1 THEN
      BEGIN
        SELECT all_count
          INTO n_prev_count
          FROM xcy_complaints_duban_portal dd
         WHERE dd.create_date = add_months(cur.create_date, -1)
           AND dd.tsfl = cur.tsfl
           AND dd.frequence = 1;
      EXCEPTION
        WHEN no_data_found THEN
          n_prev_count := 0;
      END;

      BEGIN
        SELECT all_count
          INTO n_huan_bi
          FROM xcy_complaints_duban_portal dd
         WHERE dd.create_date = add_months(cur.create_date, -12)
           AND dd.tsfl = cur.tsfl
           AND dd.frequence = 1;
      EXCEPTION
        WHEN no_data_found THEN
          n_huan_bi := 0;
      END;
    ELSIF cur.frequence = 2 THEN
      BEGIN
        SELECT all_count
          INTO n_prev_count
          FROM xcy_complaints_duban_portal dd
         WHERE dd.create_date = add_months(cur.create_date, -3)
           AND dd.tsfl = cur.tsfl
           AND dd.frequence = 2;
      EXCEPTION
        WHEN no_data_found THEN
          n_prev_count := 0;
      END;

      BEGIN
        SELECT all_count
          INTO n_huan_bi
          FROM xcy_complaints_duban_portal dd
         WHERE dd.create_date = add_months(cur.create_date, -12)
           AND dd.tsfl = cur.tsfl
           AND dd.frequence = 2;
      EXCEPTION
        WHEN no_data_found THEN
          n_huan_bi := 0;
      END;

    ELSIF cur.frequence = 3 THEN
      BEGIN
        SELECT all_count
          INTO n_prev_count
          FROM xcy_complaints_duban_portal dd
         WHERE dd.create_date = add_months(cur.create_date, -12)
           AND dd.tsfl = cur.tsfl
           AND dd.frequence = 3;
      EXCEPTION
        WHEN no_data_found THEN
          n_prev_count := 0;
      END;

      BEGIN
        SELECT all_count
          INTO n_huan_bi
          FROM xcy_complaints_duban_portal dd
         WHERE dd.create_date = add_months(cur.create_date, -12)
           AND dd.tsfl = cur.tsfl
           AND dd.frequence = 3;
      EXCEPTION
        WHEN no_data_found THEN
          n_huan_bi := 0;
      END;
    END IF;
    IF MOD(n_index, 10000) = 0 THEN
      d_now := SYSDATE;
      commit;
    END IF;
    n_index := n_index + 1;
    UPDATE xcy_complaints_duban_portal dd
       SET dd.prev = n_prev_count, dd.hb = n_huan_bi
     WHERE ROWID = cur.rd;
  END LOOP;
  commit;
END;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','SP_BUG_EMOS','CSCDS') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','P_DUBAN_UPDATE_DB_COUNT','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_DUBAN_UPDATE_DB_COUNT" (pv_tsfl in varchar) as
  vn_db_count number;
begin
  /*  for cur in (SELECT db.rowid rd
                FROM xcy_complaints_duban db, xcy_complaints_duban_msg m
               WHERE m.msg_level = 3
                 AND m.db_id = db.id
                 AND m.tsfl = db.tsfl
                 AND m.frequence = db.frequence
                 and db.status = '0'
                 and m.tsfl = pv_tsfl) loop
    update xcy_complaints_duban
       set db_count =
           (select count(1) from w_dbd t where t.f_tsfl = pv_tsfl)
     where cur.rd = rowid;
  end loop;*/
  /* select count(1) into vn_db_count from w_dbd t where t.f_tsfl = pv_tsfl and t.actinsti
d is not null;
  for cur in (SELECT m.rowid rd
                FROM  xcy_complaints_duban_msg m
               WHERE m.msg_level = 3
                 AND m.frequence = 0
                 and m.status = '0'
                 and m.tsfl = pv_tsfl) loop
     xcy_complaints_duban_msg
       seupdatet db_count =vn_db_count
     where cur.rd = rowid;
  end loop;*/
  -- lyl 2016年9月22日18:27:06
  update xcy_db_tsfl t
     set t.db_count = t.db_count + 1
   where t.tsfl = pv_tsfl;
end;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','SP_DELETE_DANZI','CSCDS') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','P_DUBAN_UPDATE_DB_COUNT_CF','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_DUBAN_UPDATE_DB_COUNT_CF" (pv_tsfl in varchar) as
  vn_db_count number;
begin
  /*  for cur in (SELECT db.rowid rd
                FROM xcy_complaints_duban db, xcy_complaints_duban_msg m
               WHERE m.msg_level = 3
                 AND m.db_id = db.id
                 AND m.tsfl = db.tsfl
                 AND m.frequence = db.frequence
                 and db.status = '0'
                 and m.tsfl = pv_tsfl) loop
    update xcy_complaints_duban
       set db_count =
           (select count(1) from w_dbd t where t.f_tsfl = pv_tsfl)
     where cur.rd = rowid;
  end loop;*/
  /* select count(1) into vn_db_count from w_dbd t where t.f_tsfl = pv_tsfl and t.actin
stid is not null;
  for cur in (SELECT m.rowid rd
                FROM  xcy_complaints_duban_msg m
               WHERE m.msg_level = 3
                 AND m.frequence = 0
                 and m.status = '0'
                 and m.tsfl = pv_tsfl) loop
     xcy_complaints_duban_msg
       seupdatet db_count =vn_db_count
     where cur.rd = rowid;
  end loop;*/
  -- lyl 2016年9月22日18:27:06
  update xcy_db_tsfl_cf t
     set t.db_count = t.db_count + 1
   where t.tsfl = pv_tsfl;
end;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','SP_ESB_LOG_SERIALE_NO','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','SP_INFO_SYS_TBS_JK','CSCDS') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','P_INSERT_DBYJ_SEND_SERIALNO','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_INSERT_DBYJ_SEND_SERIALNO" (v_tsfl   VARCHAR2,
                                                        v_byr    VARCHAR2,
                                                        v_sendId NUMBER) as
  v_send_serialno_id NUMBER(20); --发送流水号表id
  v_temp_tsfl_count number; -- 查询是不是存在tsfl
begin
  -- 2019年12月5日19:59:50
  select count(1) into v_temp_tsfl_count
  from xcy_yujing_tsfl_dict
  where tsfl_id = v_tsfl;

  if v_temp_tsfl_count = 0 then
    --根据投诉分类，查询昨天17:30到今天17:30之间创建的工单流水号
    for i in (select c.f_serialno
                from w_complain_manager c
               where c.servicerequesttypeid = v_tsfl
                 and c.consultationorcomplaint = '0'
                 and c.create_date >= trunc(sysdate - 1) + ((17 * 2 + 1) / (24 * 2))
                 and c.create_date < trunc(sysdate) + ((17 * 2 + 1) / (24 * 2))) loop
      v_send_serialno_id := 0;
      --根据v_sendId和v_serialNo来查看w_dbyj_send_serialno表中是否有记录
      begin
        select t.id
          into v_send_serialno_id
          from w_dbyj_send_serialno t
         where t.f_sendid = v_sendId
           and t.f_serialno = i.f_serialno;
        --如果记录存在，就更新记录
        if (v_byr = 0) then
          update W_DBYJ_SEND_SERIALNO
             set f_blue = 'true'
           where id = v_send_serialno_id;
        elsif (v_byr = 1) then
          update W_DBYJ_SEND_SERIALNO
             set f_yellow = 'true'
           where id = v_send_serialno_id;
        elsif (v_byr = 2) then
          update W_DBYJ_SEND_SERIALNO
             set f_red = 'true'
           where id = v_send_serialno_id;
        end if;
      EXCEPTION
        WHEN others THEN
          DBMS_OUTPUT.PUT_LINE(i.f_serialno || ':' || SQLCODE || '---' || SQLERRM);
          --如果不存在，就新增一条
          insert into W_DBYJ_SEND_SERIALNO
            (ID, F_SENDID, F_SERIALNO, F_BLUE, F_YELLOW, F_RED)
          values
            (SEQ_DBYJ_SEND_SERIALNO.Nextval,
             v_sendId,
             i.f_serialno,
             decode(v_byr, 0, 'true', null),
             decode(v_byr, 1, 'true', null),
             decode(v_byr, 2, 'true', null));
      end;
    end loop;
  else
    -- 需要通过字典表来处理
    for i in (select c.f_serialno
                from w_complain_manager c,xcy_yujing_tsfl_dict d -- 2019年12月5日19:24:38
               where d.tsfl_id = v_tsfl
                 and d.tsfl_real_id = c.servicerequesttypeid
                 and c.consultationorcomplaint = '0'
                 and c.create_date >= trunc(sysdate - 1) + ((17 * 2 + 1) / (24 * 2))
                 and c.create_date < trunc(sysdate) + ((17 * 2 + 1) / (24 * 2))) loop
      v_send_serialno_id := 0;
      --根据v_sendId和v_serialNo来查看w_dbyj_send_serialno表中是否有记录
      begin
        select t.id
          into v_send_serialno_id
          from w_dbyj_send_serialno t
         where t.f_sendid = v_sendId
           and t.f_serialno = i.f_serialno;
        --如果记录存在，就更新记录
        if (v_byr = 0) then
          update W_DBYJ_SEND_SERIALNO
             set f_blue = 'true'
           where id = v_send_serialno_id;
        elsif (v_byr = 1) then
          update W_DBYJ_SEND_SERIALNO
             set f_yellow = 'true'
           where id = v_send_serialno_id;
        elsif (v_byr = 2) then
          update W_DBYJ_SEND_SERIALNO
             set f_red = 'true'
           where id = v_send_serialno_id;
        end if;
      EXCEPTION
        WHEN others THEN
          DBMS_OUTPUT.PUT_LINE(i.f_serialno || ':' || SQLCODE || '---' || SQLERRM);
          --如果不存在，就新增一条
          insert into W_DBYJ_SEND_SERIALNO
            (ID, F_SENDID, F_SERIALNO, F_BLUE, F_YELLOW, F_RED)
          values
            (SEQ_DBYJ_SEND_SERIALNO.Nextval,
             v_sendId,
             i.f_serialno,
             decode(v_byr, 0, 'true', null),
             decode(v_byr, 1, 'true', null),
             decode(v_byr, 2, 'true', null));
      end;
    end loop;
  end if;


  commit;
end;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','SP_LYL_SP_YWMC','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','SP_UPDATE_REPORT','CSCDS') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','P_INSERT_DBYJ_SEND_SERIALNO_CF','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_INSERT_DBYJ_SEND_SERIALNO_CF" (v_tsfl   VARCHAR2,
                                                           v_byr    VARCHAR2,
                                                           v_sendId NUMBER,
                                                           v_slhm   VARCHAR2) as
  v_send_serialno_id NUMBER(20); --发送流水号表id
  v_temp_tsfl_count  number; -- 查询是不是存在tsfl
begin

-- 2019年12月5日19:59:50
  select count(1) into v_temp_tsfl_count
  from xcy_yujing_tsfl_dict
  where tsfl_id = v_tsfl;

  if v_temp_tsfl_count = 0 then
      --根据投诉分类，查询昨天17:30到今天17:30之间创建的工单流水号
    for i in (select c.f_serialno
                from w_complain_manager c
               where c.servicerequesttypeid = v_tsfl
                 and c.f_slhm = v_slhm
select dbms_metadata.get_ddl('PROCEDURE','LYL_STAT','CSCDS') FROM DUAL;
                 and c.create_date >= trunc(sysdate, 'mm')
                 and c.create_date < sysdate) loop
      v_send_serialno_id := 0;
      --根据v_sendId和v_serialNo来查看w_dbyj_send_serialno表中是否有记录
      begin
        select t.id
          into v_send_serialno_id
          from w_dbyj_send_serialno_cf t
         where t.f_sendid = v_sendId
           and t.f_serialno = i.f_serialno
           and t.slhm = v_slhm;
        --如果记录存在，就更新记录
        if (v_byr = 0) then
          update w_dbyj_send_serialno_cf
             set f_blue = 'true'
           where id = v_send_serialno_id;
        elsif (v_byr = 1) then
          update w_dbyj_send_serialno_cf
             set f_yellow = 'true'
           where id = v_send_serialno_id;
        elsif (v_byr = 2) then
          update w_dbyj_send_serialno_cf
             set f_red = 'true'
           where id = v_send_serialno_id;
        end if;
      EXCEPTION
        WHEN others THEN
          DBMS_OUTPUT.PUT_LINE(i.f_serialno || ':' || SQLCODE || '---' ||
                               SQLERRM);
          --如果不存在，就新增一条
          insert into w_dbyj_send_serialno_cf
            (ID, F_SENDID, F_SERIALNO, F_BLUE, F_YELLOW, F_RED, slhm)
          values
            (SEQ_DBYJ_SEND_SERIALNO.Nextval,
             v_sendId,
             i.f_serialno,
             decode(v_byr, 0, 'true', null),
             decode(v_byr, 1, 'true', null),
             decode(v_byr, 2, 'true', null),
             v_slhm);
      end;
    end loop;
  else
    --根据投诉分类，查询昨天17:30到今天17:30之间创建的工单流水号
    -- 2019年12月5日20:15:14
    for i in (select c.f_serialno
                from w_complain_manager c,xcy_yujing_tsfl_dict d -- 2019年12月5日19:24:38
               where d.tsfl_id = v_tsfl
                 and d.tsfl_real_id = c.servicerequesttypeid
                 and c.f_slhm = v_slhm
                 and c.create_date >= trunc(sysdate, 'mm')
                 and c.create_date < sysdate) loop
      v_send_serialno_id := 0;
      --根据v_sendId和v_serialNo来查看w_dbyj_send_serialno表中是否有记录
      begin
        select t.id
          into v_send_serialno_id
          from w_dbyj_send_serialno_cf t
         where t.f_sendid = v_sendId
           and t.f_serialno = i.f_serialno
           and t.slhm = v_slhm;
        --如果记录存在，就更新记录
        if (v_byr = 0) then
          update w_dbyj_send_serialno_cf
             set f_blue = 'true'
           where id = v_send_serialno_id;
        elsif (v_byr = 1) then
          update w_dbyj_send_serialno_cf
             set f_yellow = 'true'
           where id = v_send_serialno_id;
        elsif (v_byr = 2) then
          update w_dbyj_send_serialno_cf
             set f_red = 'true'
           where id = v_send_serialno_id;
        end if;
      EXCEPTION
        WHEN others THEN
          DBMS_OUTPUT.PUT_LINE(i.f_serialno || ':' || SQLCODE || '---' ||
                               SQLERRM);
          --如果不存在，就新增一条
          insert into w_dbyj_send_serialno_cf
            (ID, F_SENDID, F_SERIALNO, F_BLUE, F_YELLOW, F_RED, slhm)
          values
            (SEQ_DBYJ_SEND_SERIALNO.Nextval,
             v_sendId,
             i.f_serialno,
             decode(v_byr, 0, 'true', null),
             decode(v_byr, 1, 'true', null),
             decode(v_byr, 2, 'true', null),
             v_slhm);
      end;
    end loop;
  end if;

  commit;
end;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','SP_PRE_EXP','CSCDS') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','P_JIEDUANHUIFU','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_JIEDUANHUIFU" (pn_opinionid number,
                                           pn_userid    number,
                                           pv_comm      varchar2) as
  /**
  老数据无法更新，没有阶段回复的人员记录数据
  一级经理，阶段回复
  */
  vn_complain_id w_complain_manager.id%type;
  vn_existis     number;
begin
  -- 1. 查询业务单子ID
  select t.complain_id
    into vn_complain_id
    from xcy_complain_option t
   where t.id = pn_opinionid;
  insert into xcy_jdhf_log
    (userid, complain_id, opinionid, comm)
  values
    (pn_userid, vn_complain_id, pn_opinionid, pv_comm);

  --2. 查询用户是不是一级用户角色
  SELECT count(1)
    into vn_existis
    FROM SYS_USER_ROLE urro, SYS_USER ur, sys_role r
   WHERE urro.userId = ur.userId
     AND urro.roleid = r.roleid
     and r.alias = 'bpm_yjjl'
     and ur.userid = pn_userid
     and rownum = 1;
  --3. 如果2成立，添加到临时表里面
  if vn_existis = 1 then

    SELECT COUNT(1)
      INTO vn_existis
      FROM xcy_jdhf
     WHERE complain_id = vn_complain_id;
    --4. 判断一级经理是不是已经添加过了阶段回复了
    IF vn_existis = 0 THEN
      update w_complain_manager set is_db = '1' where id = vn_complain_id;
    END IF;
    -- 领导督办记录
    SELECT COUNT(1)
      INTO vn_existis
      FROM xcy_jdhf
     WHERE complain_id = vn_complain_id
       and userid = pn_userid;
    if vn_existis = 0 then
      insert into xcy_jdhf
        (userid, complain_id, type_)
      values
        (pn_userid, vn_complain_id, 2);
    end if;
  end if;
end;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','DELE_XCY_NUM_LOG','NMYD') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','XCY_IMB_BACKUP','NMYD') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','P_MV_REFLUSH','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_MV_REFLUSH"
AS
   var_startdate date:=sysdate;
   tabName varchar(100);
   exceptionCode number;
select dbms_metadata.get_ddl('PROCEDURE','XCY_KHTS_BACKUP','NMYD') FROM DUAL;
   exceptionInfo varchar(4000);
Begin
  --内容已经变更成表，job143停止刷新

  --对物化视图进行刷新1,2,3
  /*DBMS_MVIEW.REFRESH
  (
    --mv_xcy_sys_interactive_log,
    'mv_xcy_complain_option_zfk,
     mv_xcy_complain_option_fwpzbsh'
  );
  --记录1,2,3物化视图更新后的数量
  --insert into sys_report_proc_excute_result values
  --('p_mv_reflush','mv_xcy_sys_interactive_log',(select count(1) from mv_xcy_sys_int
eractive_log),var_startdate,sysdate);
  insert into sys_report_proc_excute_result values
  ('p_mv_reflush','mv_xcy_complain_option_zfk',(select count(1) from mv_xcy_complain_option_zfk),var_startdate,
sysdate);
  insert into sys_report_proc_excute_result values
  ('p_mv_reflush','mv_xcy_complain_option_fwpzbsh',(select count(1) from mv_xcy_complain_option_fwp
zbsh),var_startdate,sysdate);
  commit;*/
  /*tabName := 'mv_xcy_complain_option_xzcl';
  var_startdate:=sysdate;
  --对物化视图进行刷新4,5,6
  DBMS_MVIEW.REFRESH
  (
    'mv_xcy_complain_shengji_log_rl,
     mv_xcy_complain_option_hd,
     mv_xcy_complain_option_xzcl'
  );
  --记录4,5,6物化视图更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_mv_reflush','mv_xcy_complain_shengji_log_rl',(select count(1) from mv_xcy_complain_shengji_log_
rl),var_startdate,sysdate);
  insert into sys_report_proc_excute_result values
  ('p_mv_reflush','mv_xcy_complain_option_hd',(select count(1) from mv_xcy_compla
in_option_hd),var_startdate,sysdate);
  insert into sys_report_proc_excute_result values
  ('p_mv_reflush','mv_xcy_complain_option_xzcl',(select count(1) from mv_xcy_complain_option_xzcl),var_startdat
e,sysdate);
  commit;*/

  tabName := 'mv_xcy_complain_shengji_log_jh';
  var_startdate:=sysdate;
  --对物化视图进行刷新7,27,10,16
   /*DBMS_MVIEW.REFRESH
   (
    --mv_xcy_complain_option_lastqt,
     --'mv_xcy_complain_shengji_log_jh'
     --mv_xcy_complain_option_hd_time
   );*/
   --mv_xcy_complain_op_zfkcount,
   --记录7,27,10,16物化视图更新后的数量
   --insert into sys_report_proc_excute_result values
  --('p_mv_reflush','mv_xcy_complain_option_lastqt',(select count(1) from mv_xcy_complai
n_option_lastqt),var_startdate,sysdate);
  --insert into sys_report_proc_excute_result values
  --('p_mv_reflush','mv_xcy_complain_shengji_log_jh',(select count(1) from mv_xcy_complain_shengji_log_jh)
,var_startdate,sysdate);
   --insert into sys_report_proc_excute_result values
  --('p_mv_reflush','mv_xcy_complain_op_zfkcount',(select count(1) from mv_xcy_co
mplain_op_zfkcount),var_startdate,sysdate);
  --insert into sys_report_proc_excute_result values
  --('p_mv_reflush','mv_xcy_complain_option_hd_time',(select count(1) from mv_xcy_complain_option_hd_ti
me),var_startdate,sysdate);
  commit;

  /*var_startdate:=sysdate;
  --对物化视图进行刷新11,12,13,14
   DBMS_MVIEW.REFRESH
   (
    'mv_xcy_com_op_qttozfkperson,
     mv_xcy_com_op_hdcount,
     mv_xcy_comp_sji_log_qtcount,
     mv_xcy_comp_sji_log_recount'
   );
  --记录11,12,13,14物化视图更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_mv_reflush','mv_xcy_com_op_qttozfkperson',(select count(1) from mv_xcy_com_op_qttozfkperson),var_s
tartdate,sysdate);
  insert into sys_report_proc_excute_result values
  ('p_mv_reflush','mv_xcy_com_op_hdcount',(select count(1) from mv_xcy_com_op_hdcount),var
_startdate,sysdate);
  insert into sys_report_proc_excute_result values
  ('p_mv_reflush','mv_xcy_comp_sji_log_qtcount',(select count(1) from mv_xcy_comp_sji_lo
g_qtcount),var_startdate,sysdate);
  insert into sys_report_proc_excute_result values
  ('p_mv_reflush','mv_xcy_comp_sji_log_recount',(select count(1) from mv_xcy_comp_sji_log_recount),var_startdate,s
ysdate);
   COMMIT;*/

   tabName := 'mv_view_com_option_sj_lastqt,mv_view_complain_firstqt_group';
   var_startdate:=sysdate;
  --对物化视图进行刷新17,18,19
   --****刷新要放在用他的视图前面进行
   /*DBMS_MVIEW.REFRESH
   (
    'mv_view_com_option_sj_lastqt'
   ); */
   --mv_view_complain_firstqt_group
   --mv_view_complain_re_qt_count,
   --记录17,18,19物化视图更新后的数量
  --insert into sys_report_proc_excute_result values
  --('p_mv_reflush','mv_view_com_option_sj_lastqt',(select count(1) from mv_view_
com_option_sj_lastqt),var_startdate,sysdate);
  --insert into sys_report_proc_excute_result values
  --('p_mv_reflush','mv_view_complain_re_qt_count',(select count(1) from mv_view_complain_re_qt_count
),var_startdate,sysdate);
  --insert into sys_report_proc_excute_result values
  --('p_mv_reflush','mv_view_complain_firstqt_group',(select count(1) from mv_vie
w_complain_firstqt_group),var_startdate,sysdate);
  COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    exceptionCode := sqlcode;
    exceptionInfo := SUBSTR(sqlerrm, 1, 2000);
    insert into tab_reflush_exception(proceduresname,tabname,exceptioncode,exceptioninfo)
    values('p_mv_reflush',tabName,exceptionCode,exceptionInfo);
    commit;
END p_mv_reflush;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','XCY_OANEW_BACKUP','NMYD') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','XCY_VERSION_DOWNLOAD_BACKUP','APPVERSION') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','P_MV_VIEW_COMPLAIN_OPTION','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_MV_VIEW_COMPLAIN_OPTION"
AS
   var_startdate date:=sysdate;
   tabName varchar(100);
   exceptionCode number;
   exceptionInfo varchar(4000);
Begin
  --此存储过程对应的job163以关闭，停止刷新

  /*--对意见物化视图进行刷新
  DBMS_MVIEW.REFRESH('mv_view_complain_option');
  --记录意见物化视图更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_mv_view_complain_option','mv_view_complain_option',(select count(1) from mv_
view_complain_option),var_startdate,sysdate);
  commit;*/

  /* --记录升级工单回复内容、查证情况、具体原因、整改措施的信息
  DBMS_MVIEW.REFRESH('mv_complain_option_sj_max');
  --记录升级工单回复内容、查证情况、具体原因、整改措施的信息更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_mv_view_complain_option','mv_complain_option_sj_max',(select count(1) from m
v_complain_option_sj_max),var_startdate,sysdate);
  commit;*/

  /*--记录所有有流程信息，但最终又通过复核环节归档归档的单子
  DBMS_MVIEW.REFRESH('mv_xcy_action_and_fuheend');
  --记录上面物化视图更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_mv_view_complain_option','mv_xcy_action_and_fuheend',(select count(1) from mv_xcy_action_and_f
uheend),var_startdate,sysdate);
  commit;*/

  /*--对独有要素物化视图进行刷新
  DBMS_MVIEW.REFRESH('mv_xcy_complain_dyys');
  --记录独有要素物化视图更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_mv_view_complain_option','mv_xcy_complain_dyys',(select count(1) from mv_xcy_complain_dyy
s),var_startdate,sysdate);
  commit;*/

  /*--对物化视图进行刷新21
  DBMS_MVIEW.REFRESH('mv_xcy_complain_option_zfk_qwg');
  --记录21物化视图更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_mv_view_complain_option','mv_xcy_complain_option_zfk_qwg',(select count(1) from mv_xcy_c
omplain_option_zfk_qwg),var_startdate,sysdate);
  commit;*/

  /*--对物化视图进行刷新22
  DBMS_MVIEW.REFRESH('mv_complain_is_repeat');
  --记录22物化视图更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_mv_view_complain_option','mv_complain_is_repeat',(select count(1) from mv_co
mplain_is_repeat),var_startdate,sysdate);
  COMMIT;*/

  --对物化视图进行刷新25
  tabName := 'mv_view_lastqt_xzlong';
  DBMS_MVIEW.REFRESH('mv_view_lastqt_xzlong');
  --记录25物化视图更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_mv_view_complain_option','mv_view_lastqt_xzlong',(select count(1) from mv_view_lastqt
_xzlong),var_startdate,sysdate);
  COMMIT;

   --对物化视图进行刷新26
  tabName := 'mv_view_lastqt_qtlong';
  DBMS_MVIEW.REFRESH('mv_view_lastqt_qtlong');
  --记录26物化视图更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_mv_view_complain_option','mv_view_lastqt_qtlong',1,var_startdate,sysdate);
  COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    exceptionCode := sqlcode;
    exceptionInfo := SUBSTR(sqlerrm, 1, 2000);
    insert into tab_reflush_exception(proceduresname,tabname,exceptioncode,exceptioninfo)

    values('p_mv_view_complain_option',tabName,exceptionCode,exceptionInfo);
    commit;
END p_mv_view_complain_option;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','SP_DELETE_DANZI_BL_F8','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','XCY_PRD_STARTPAGE_HISTORY','NMYD') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','P_TABLE_COMPLAIN_F12','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_TABLE_COMPLAIN_F12" AS
  var_startdate date := sysdate;
  tabName       varchar(100);
  exceptionCode number;
  exceptionInfo varchar(4000);
Begin
  --删除当天有操作的单子
  tabName := 'table_complain_by_tsds,table_complain_by_yhgsd';
  delete from table_complain_by_tsds t
   where t.f_serialno in
         (select v.f_serialno
            from v_complain_update_serialno v/*
          union all
          select t.f_serialno
            from w_complain_delete t
           where t.updatedate >= trunc(sysdate - 1)*/);
  commit;
  delete from table_complain_by_yhgsd t
   where t.f_serialno in
         (select v.f_serialno
            from v_complain_update_serialno v/*
          union all
          select t.f_serialno
            from w_complain_delete t
           where t.updatedate >= trunc(sysdate - 1)*/);
  commit;
  --存入最新数据
  INSERT INTO table_complain_by_tsds
    SELECT --t.*, sysdate mvdate
    id, createtime, servicerequesttypeid, issolveid, serchtype,
     f_yhtsds, complaintcityid, f_yhgsd, belongcityid, userbrandid, channelid, level1, level2, level3, level4, level5
, level6, level7, 呼市, 包头, 乌海, 乌盟, 通辽, 赤峰, 鄂尔多斯, 巴盟, 锡盟, 呼盟
, 兴安盟, 阿盟, 区呼叫中心, 区公司, 区市场, 区客服, 区集客, 区数据, 区业支, 区网
络, 区网管,
     其它, 外省, f_slsj, t.create_date, is_consult, t.f_serialno, sysdate mvdate
     , linkbelongsarea

,t.checkin_date --2021-05-24
      FROM view_complain_by_tsds t,v_complain_update_serialno v
     where t.f_serialno = v.f_serialno
          /* (select v.f_serialno
              from v_complain_update_serialno v*//*
            minus
            select del.f_serialno
              from w_complain_delete del
             where del.updatedate >= trunc(sysdate - 1)*/;
  commit;


  INSERT INTO table_complain_by_yhgsd
    SELECT  -- t.*, sysdate mvdate
    id, createtime, servicerequesttypeid, issolveid, serchtype, f_yhtsds, complaintcityid, f_yhgsd, belongcityid, use
rbrandid, channelid, level1, level2, level3, level4, level5, level6, level7, 呼
市, 包头, 乌海, 乌盟, 通辽, 赤峰, 鄂尔多斯, 巴盟, 锡盟, 呼盟, 兴安盟, 阿盟, 其它
    , f_slsj, t.create_date, is_consult, t.f_serialno, sysdate mvdate, linkbelongsarea

,t.checkin_date --2021-05-24
      FROM view_complain_by_yhgsd t,v_complain_update_serialno v
     where t.f_serialno = v.f_serialno
     /*where t.f_serialno in
           (select v.f_serialno
              from v_complain_update_serialno v*//*
            minus
            select del.f_serialno
              from w_complain_delete del
             where del.updatedate >= trunc(sysdate - 1)*/; --记录每个物化视图更
新后的数量
  commit;

  delete from TABLE_COMPLAIN_BY_TSDS_01 t
   where t.f_serialno in
         (select v.f_serialno
            from v_complain_update_serialno v/*
          union all
          select t.f_serialno
            from w_complain_delete t
           where t.updatedate >= trunc(sysdate - 1)*/);
  commit;
  --存入最新数据-- 2020年2月17日6:59:55 lyl update
  INSERT INTO TABLE_COMPLAIN_BY_TSDS_01
    SELECT t.*, sysdate mvdate
      FROM view_complain_by_tsds_01 t,v_complain_update_serialno v
     where t.f_serialno = v.f_serialno
           /*(select v.f_serialno
              from v_complain_update_serialno v*//*
            minus
            select del.f_serialno
              from w_complain_delete del
             where del.updatedate >= trunc(sysdate - 1)*/;
  commit;


  delete from table_complain_by_yhgsd_01 t
   where t.f_serialno in
         (select v.f_serialno
            from v_complain_update_serialno v/*
          union all
          select t.f_serialno
            from w_complain_delete t
           where t.updatedate >= trunc(sysdate - 1)*/);
  commit;


  INSERT INTO table_complain_by_yhgsd_01
    SELECT t.*, sysdate mvdate
      FROM view_complain_by_yhgsd_01 t,v_complain_update_serialno v
     where t.f_serialno = v.f_serialno; --记录每个物化视图更新后的数量
  commit;


  insert into sys_report_proc_excute_result
  values
    ('p_table_complain_F12',
     'table_complain_by_tsds',
     1,
     var_startdate,
     sysdate);

  insert into sys_report_proc_excute_result
  values
    ('p_table_complain_F12',
     'table_complain_by_yhgsd',
     1,
     var_startdate,
     sysdate);

   -- -- 2020年2月17日6:59:55 lyl update

  insert into sys_report_proc_excute_result
  values
    ('p_table_complain_F12',
     'table_complain_by_tsds_01',
     1,
     var_startdate,
     sysdate);
  COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    exceptionCode := sqlcode;
    exceptionInfo := SUBSTR(sqlerrm, 1, 2000);
    insert into tab_reflush_exception
      (proceduresname, tabname, exceptioncode, exceptioninfo)
    values
      ('p_table_complain_F12', tabName, exceptionCode, exceptionInfo);
    commit;
END p_table_complain_F12;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','P_TABLE_COMPLAIN_F8_JTKD','CSCDS') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','P_TABLE_COMPLAIN_F12_SLEEP','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_TABLE_COMPLAIN_F12_SLEEP"
AS
   var_startdate date:=sysdate;
   tabName varchar(100);
   exceptionCode number;
   exceptionInfo varchar(4000);
Begin
  --删除当天有操作的单子
  tabName := 'table_complain_sleep_by_tsds,table_complain_sleep_by_yhgsd';
  delete from table_complain_sleep_by_tsds t where t.id in
  (select v.complainid from v_complain_update_serialno v) or t.id in
  (select t.complainid from w_complain_delete t where t.updatedate >= trunc(sysdate - 1));
  delete from table_complain_sleep_by_yhgsd t where t.id in
  (select v.complainid from v_complain_update_serialno v) or t.id in
  (select t.complainid from w_complain_delete t where t.updatedate >= trunc(sysdate -
1));
  --存入最新数据
  INSERT INTO table_complain_sleep_by_tsds
  SELECT t.*,sysdate mvdate FROM view_complain_sleep_by_tsds t,v_complain_update_serialno v
   where t.id = v.complainid;
 -- (select v.complainid from v_complain_update_serialno v where v.f_serialno not in (select del.f_
serialno from w_complain_delete del where del.updatedate >= trunc(sysdate - 1)))
;
  INSERT INTO table_complain_sleep_by_yhgsd
  SELECT t.*,sysdate mvdate FROM view_complain_sleep_by_yhgsd t
  ,v_complain_update_serialno v
   where t.id = v.complainid;
   --where t.id in
  --(select v.complainid from v_complain_update_serialno v where v.f_serialno not in (s
elect del.f_serialno from w_complain_delete del where del.updatedate >= trunc(sy
sdate - 1)));
  --记录每个物化视图更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_table_complain_F12_sleep','table_complain_sleep_by_tsds',(select count(1) from table_complain_sleep_by_tsds),v
ar_startdate,sysdate);
  insert into sys_report_proc_excute_result values
  ('p_table_complain_F12_sleep','table_complain_sleep_by_yhgsd',(select count(1) from
table_complain_sleep_by_yhgsd),var_startdate,sysdate);
  COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    exceptionCode := sqlcode;
select dbms_metadata.get_ddl('PROCEDURE','XCY_PRD_MODEL_COUNTGATHER','NMYD') FROM DUAL;
    exceptionInfo := SUBSTR(sqlerrm, 1, 2000);
    insert into tab_reflush_exception(proceduresname,tabname,exceptioncode,exceptioninfo)
    values('p_table_complain_F12_sleep',tabName,exceptionCode,exceptionInfo);
    commit;
END p_table_complain_F12_sleep;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','SP_GDSJ_200313','CSCDS') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','P_TABLE_COMPLAIN_F12_UP','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_TABLE_COMPLAIN_F12_UP" AS
  var_startdate date := sysdate;
select dbms_metadata.get_ddl('PROCEDURE','P_DUBAN_UPDATE_DB_COUNT_BZQ','CSCDS') FROM DUAL;
  tabName       varchar(100);
  exceptionCode number;
  exceptionInfo varchar(4000);
Begin
  --删除以前老数据
  tabName := 'table_complain_up_by_tsds,table_complain_up_by_yhgsd';
  delete from table_complain_up_by_tsds t
   where t.id in (select v.complainid from v_complain_update_serialno v)
     /* or t.id in (select t.complainid
                    from w_complain_delete t
                   where t.updatedate >= trunc(sysdate - 1))*/;
  delete from table_complain_up_by_yhgsd t
   where t.id in (select v.complainid from v_complain_update_serialno v)/*
      or t.id in (select t.complainid
                    from w_complain_delete t
                   where t.updatedate >= trunc(sysdate - 1))*/;
  --存入最新数据
  INSERT INTO table_complain_up_by_tsds
    SELECT t.id,
           t.createtime,
           t.servicerequesttypeid,
           t.issolveid,
           t.serchtype,
           t.f_yhtsds,
           t.complaintcityid,
           t.f_yhgsd,
           t.belongcityid,
           t.userlevelid,
           t.userbrandid,
           t.channelid,
           t.level1,
           t.level2,
           t.level3,
           t.level4,
           t.level5,
           t.level6,
           t.level7,
           t.呼市,
           t.包头,
           t.乌海,
           t.乌盟,
           t.通辽,
           t.赤峰,
           t.鄂尔多斯,
           t.巴盟,
           t.锡盟,
           t.呼盟,
           t.兴安盟,
           t.阿盟,
           t.区呼叫中心,
           t.区公司,
           t.区市场,
           t.区客服,
           t.区集客,
           t.区数据,
           t.区业支,
           t.区网络,
           t.区网管,
           t.其它,
           t.外省,
           t.f_slsj,
           t.create_date,
           t.f_serialno,
           sysdate mvdate,
           t.checkin_date
      FROM view_complain_up_by_tsds t
     where t.id in
           (select v.complainid
              from v_complain_update_serialno v/*
             where v.f_serialno not in
                   (select del.f_serialno
                      from w_complain_delete del
                     where del.updatedate >= trunc(sysdate - 1))*/);
  INSERT INTO table_complain_up_by_yhgsd
    SELECT t.id,t.createtime,t.servicerequesttypeid,t.issolveid,t.serchtype,t.f_yhtsds,t.complaintcityid,t.f
_yhgsd,t.belongcityid,t.userlevelid,t.userbrandid,t.channelid,t.level1,t.level2,
t.level3,t.level4,t.level5,t.level6,t.level7,t.呼市,t.包头,t.乌海,t.乌盟,t.通辽,
t.赤峰,t.鄂尔多斯,t.巴盟,t.锡盟,t.呼盟,t.兴安盟,t.阿盟,t.其它,t.f_slsj,t.create_date,t.f_serialno, sysdate mv
date,t.checkin_date
      FROM view_complain_up_by_yhgsd t
     where t.id in
           (select v.complainid
              from v_complain_update_serialno v/*
             where v.f_serialno not in
                   (select del.f_serialno
                      from w_complain_delete del
                     where del.updatedate >= trunc(sysdate - 1))*/);
  --记录每个物化视图更新后的数量
  insert into sys_report_proc_excute_result
  values
    ('p_table_complain_F12_up',
     'table_complain_up_by_tsds',
     1,
     var_startdate,
     sysdate);
  insert into sys_report_proc_excute_result
  values
    ('p_table_complain_F12_up',
     'table_complain_up_by_yhgsd',
     1,
     var_startdate,
     sysdate);
  COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    exceptionCode := sqlcode;
    exceptionInfo := SUBSTR(sqlerrm, 1, 2000);
    insert into tab_reflush_exception
      (proceduresname, tabname, exceptioncode, exceptioninfo)
    values
      ('p_table_complain_F12_up', tabName, exceptionCode, exceptionInfo);
    commit;
END p_table_complain_F12_up;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','P_DUBAN_UPDATE_DB_COUNT_CS','CSCDS') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','P_TABLE_COMPLAIN_F22','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_TABLE_COMPLAIN_F22"
AS
   var_startdate date:=sysdate;
   tabName varchar(100);
   exceptionCode number;
   exceptionInfo varchar(4000);
Begin
  --删除当天有操作的单子
  tabName := 'tab_view_complain_for_company';
  delete from tab_view_complain_for_company t where t.id in
  (select v.complainid from v_complain_update_serialno v);
    COMMIT;
  --存入最新数据
  INSERT INTO tab_view_complain_for_company
  SELECT t.*,sysdate mvdate FROM view_complain_for_company t where t.id in
  (select v.complainid from v_complain_update_serialno v where v.f_serialno not in (select
 del.f_serialno from w_complain_delete del where del.updatedate >= trunc(sysdate
 - 1)));
  --记录每个物化视图更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_table_complain_F22','tab_view_complain_for_company',1,var_startdate,sysdate
);
    COMMIT;
EXCEPTION
select dbms_metadata.get_ddl('PROCEDURE','P_DUBAN_UPDATE_DB_COUNT_SJ','CSCDS') FROM DUAL;
  WHEN OTHERS THEN
    ROLLBACK;
    exceptionCode := sqlcode;
    exceptionInfo := SUBSTR(sqlerrm, 1, 2000);
    insert into tab_reflush_exception(proceduresname,tabname,exceptioncode,exceptioninfo)
    values('p_table_complain_F22',tabName,exceptionCode,exceptionInfo);
    commit;
END p_table_complain_F22;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','P_INSERT_DBYJ_SEND_SN_BZQ','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_INSERT_DBYJ_SEND_SN_CS','CSCDS') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','P_TABLE_COMPLAIN_F8','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_TABLE_COMPLAIN_F8"
AS
   var_startdate date:=sysdate;
   tabName varchar(100);
   exceptionCode number;
   exceptionInfo varchar(4000);
Begin
  begin
    for i in (select f_serial_no, count(1), max(rowid) rd
                from w_sfmy t
               where t.f_serial_no > to_char(sysdate,'yyyymm')
               group by f_serial_no
              having count(1) > 1) loop
    delete from w_sfmy where f_serial_no = i.f_serial_no and rowid <> i.rd;
    end loop;
  end;
  begin
    for i in (select sn,max(rowid) rd from XCY_HF_YX_KF group by sn having count(1) >1) loop
      delete from XCY_HF_YX_KF where rowid <> i.rd and i.sn = sn;
    end loop;
  end;
  begin
    -- 协助处理时长 2019年9月2日3:26:35
select dbms_metadata.get_ddl('PROCEDURE','P_INSERT_DBYJ_SEND_SN_FGS','CSCDS') FROM DUAL;
   execute immediate 'truncate table f8_xz_sj';
   update dict_current_sysdate set now = sysdate;
   insert into f8_xz_sj
     select GETTIMEDESC(t.TASK2_SUM_TIME_SS) 协助处理时长,
            case
              when t.max_ < t.TASK2_SUM_TIME_SS then
               '是'
              else
               '否'
            end 协助处理是否逾期,
            u.f_serialno
       from w_complain_manager         w,
            v_task2_time_max           t,
            v_complain_update_serialno u
      where w.f_serialno = u.f_serialno
        and w.f_actinstid = t.F_ACTINSTID;

    execute immediate 'truncate table f8_qt_sj';

   insert into f8_qt_sj
     select GETTIMEDESC(t.TASK2_SUM_TIME_SS) 协助处理时长,
            null,
            u.f_serialno
       from w_complain_manager         w,
            v_task1_time           t,
            v_complain_update_serialno u
      where w.f_serialno = u.f_serialno
        and w.f_actinstid = t.F_ACTINSTID;


    -- 牵头,协助合计时间处理时间 2019年12月2日2:39:54
   execute immediate 'truncate table f8_qt_xz_sj';

   insert into f8_qt_xz_sj
     select GETTIMEDESC(t.TASK2_SUM_TIME_SS) 协助处理时长,
            null,
            u.f_serialno
       from w_complain_manager         w,
            v_task_time          t,
            v_complain_update_serialno u
      where w.f_serialno = u.f_serialno
        and w.f_actinstid = t.F_ACTINSTID;
 end;


    -- 牵头,协助合计时间处理时间 2019年12月2日2:39:54
   execute immediate 'truncate table t_f8_last_reply_user';
 insert into  t_f8_last_reply_user
select u.staffid || '(' || u.fullname || ')' last_user, serial_no,u.userid
  from sys_user u,
       (select decode(x_w_c.reply_op_person,
                      '202-EMOS',
                      eoms_reply.emos_reply_op_person,
                      x_w_c.reply_op_person) op_person,
               x_w_c.serial_no
          from xcy_w_complain x_w_c
          join v_complain_update_serialno t
            on x_w_c.serial_no = t.f_serialno
           and to_date(substr(t.f_serialno, 0, 8), 'yyyymmdd') = serial_no_date
          left join F8_TSCLL eoms_reply
            on x_w_c.serial_no = eoms_reply.f_serialno) op_person
 where op_person.op_person = u.userid;

  --删除当天有操作的单子
  tabName := 't_complaints_details';
  sp_lyl_sp_ywmc();
  delete from t_complaints_details t where t.流水号 in
  (select v.f_serialno from v_complain_update_serialno v) or t.流水号 in
  (select t.f_serialno from w_complain_delete t where t.updatedate >= trunc(sysdate - 1));
  --execute immediate 'truncate table t_complaints_details';
  --存入最新数据
  INSERT INTO t_complaints_details
   select id, createtime, userbrandid, servicerequesttypeid, belongcityid, complaintcityid, status, channelid, 流水号,
 业务类型第一层, 业务类型第二层, 业务类型第三层, 业务类型第四层, 业务类型第五层,
 业务类型第六层, 业务类型第七层, 客户投诉内容, 反馈结果, 回复内容, 查证情况, 具
体原因, 整改措施, 处理部门, 用户投诉地市, 用户归属地市, 用户归属营业部名称, 用户
归属营业厅名称, 用户级别, 受理渠道, 用户姓名, 受理号码, 受理工号, 投诉时间, 派单
人, 派单时间, 反馈人, 反馈时间, 牵头至反馈流转人, 协助至牵头流转人, 流转时间, 回
单时间, 反馈部门, 处理时长, issolveid, nvl(sfyq_,是否逾期), 回访标记, 用户满意度, 回单是否正确, 回单不正确原因, 责任部门, 责任原因,
是否直接反馈, 回复方式, 被投诉员工工号, sp企业代码, sp企业名称, 定性为内置, 未退费原因, 调帐金额, 疑似内置, 标题, 是否重复, 重复投诉原因,
 解决程度, 责任归属, 特殊工单标记, 牵头至反馈次数, 协助至牵头次数, 是否快速响应
工单, 故障型号, 故障现象, 故障时间段1, 故障时间段2, 热门应用, acceptdeptid, crea
te_date, 用户星级, is_consult, is_error, companyid, companyidtwo, qtid, ismoreflow
  ,sysdate mvdate, t.派单是否满意,t.派单不满意原因,t.派单不满意原因备注,t.SP业务
名称,t.上一环节处理部门,t.营业厅名称,客户标签,t.备注,t.投诉业务办理渠道,t.办理时间,t.客户投诉业务办理时确认方式,t.业务办理原因
  ,t.升级倾向,t.引发原因第一层,t.引发原因第二层,t.引发原因第三层,t.引发原因第四
层
  ,t.协助处理时长,t.协助处理是否逾期,t.问题标签,t.业务标签,t.staffid 最终回复人
员
  ,t.覆盖类型,t.经度,t.纬度,t.小区名称或CID,t.ECI -- 2019年10月15日23:48:9
  ,t.受理营业厅名称 -- 2019年10月15日23:48:9
  ,t.所属区域 -- 2019年11月2日19:8:23
  ,t.牵头处理时长,t.牵头及协助合计处理时长,t.协助处理部门,t.牵头处理部门
 --
  ,t.不满意原因
  ,t.客户是否接受
  ,t.是否继续处理 --0：否1：是
  ,t.客户状态
  ,t.未解决原因
  ,t.不继续处理原因
  ,t.全量回复方式
  ,t.是否逾期2
  ,t.是否催单 -- 2020-02-24
  ,t.催单次数
  ,u.last_user,u.user_id,t.ts_zx
  --
  -- lyl 2020年8月30日20:51:19
  ,t.checkin_date,GETTIMEDESC((t.checkin_date-t.createtime)*24*60*60),t.tag,t.privatedynac
har089
  ,t.complaintLocation,t.longitudeAndLatitude-- 202011-05
  ,t.file210523,round((t.checkin_date-t.createtime)*24,2),t.checkin_date
  FROM v_complaints_details t ,v_jtkd_sfyj j,t_f8_last_reply_user u
   where  t.流水号 = j.sn(+)  and t.流水号=u.serial_no(+) and
   t.流水号 in
  --SELECT t.*,sysdate mvdate FROM v_complaints_details t where t.流水号 in
 (select v.f_serialno from v_complain_update_serialno v where v.f_serialno not in (select de
l.f_serialno from w_complain_delete del where del.updatedate >= trunc(sysdate -
1)));
  commit;
  --记录每个物化视图更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_table_complain_F8','t_complaints_details',1,var_startdate,sysdate);
  COMMIT;

  begin
    --- 2020-04-28-- 06:33
    p_bhg();
  end;

 ----2020年2月17日6:54:47 lyl update
  begin
    delete from t_complaints_details_01 t where t.流水号 in
    (select v.f_serialno from v_complain_update_serialno v) or t.流水号 in
    (select t.f_serialno from w_complain_delete t where t.updatedate >= trunc(sysdate - 1));
    --execute immediate 'truncate table t_complaints_details';
    --存入最新数据
    INSERT INTO t_complaints_details_01
     select id, createtime, userbrandid, servicerequesttypeid, belongcityid, complaintcityid, status, chann
elid, 流水号, 业务类型第一层, 业务类型第二层, 业务类型第三层, 业务类型第四层, 业
务类型第五层, 业务类型第六层, 业务类型第七层, 客户投诉内容, 反馈结果, 回复内容,
查证情况, 具体原因, 整改措施, 处理部门, 用户投诉地市, 用户归属地市, 用户归属营业
部名称, 用户归属营业厅名称, 用户级别, 受理渠道, 用户姓名, 受理号码, 受理工号, 投
诉时间, 派单人, 派单时间, 反馈人, 反馈时间, 牵头至反馈流转人, 协助至牵头流转人,
流转时间, 回单时间, 反馈部门, 处理时长, issolveid, nvl(sfyq_,是否逾期), 回访标记, 用户满意度, 回单是否正确, 回单不正确原因, 责任部门
, 责任原因, 是否直接反馈, 回复方式, 被投诉员工工号, sp企业代码, sp企业名称, 定性
为内置, 未退费原因, 调帐金额, 疑似内置, 标题, 是否重复, 重复投诉原因, 解决程度,
责任归属, 特殊工单标记, 牵头至反馈次数, 协助至牵头次数, 是否快速响应工单, 故障型
号, 故障现象, 故障时间段1, 故障时间段2, 热门应用, acceptdeptid, create_date, 用户星级, is_consult, is_error, companyid, c
ompanyidtwo, qtid, ismoreflow
    ,sysdate mvdate, t.派单是否满意,t.派单不满意原因,t.派单不满意原因备注,t.SP业务名称,t.上一环节处理部门,t.营业厅名称,客户标签,t.备注,
t.投诉业务办理渠道,t.办理时间,t.客户投诉业务办理时确认方式,t.业务办理原因
    ,t.升级倾向,t.引发原因第一层,t.引发原因第二层,t.引发原因第三层,t.引发原因第
四层
    ,t.协助处理时长,t.协助处理是否逾期,t.问题标签,t.业务标签,t.staffid 最终回复
人员
    ,t.覆盖类型,t.经度,t.纬度,t.小区名称或CID,t.ECI -- 2019年10月15日23:48:9
    ,t.受理营业厅名称 -- 2019年10月15日23:48:9
    ,t.所属区域 -- 2019年11月2日19:8:23
    ,t.牵头处理时长,t.牵头及协助合计处理时长,t.协助处理部门,t.牵头处理部门
   --
    ,t.不满意原因
    ,t.客户是否接受
    ,t.是否继续处理 --0：否1：是
    ,t.客户状态
    ,t.未解决原因
    ,t.不继续处理原因
    ,t.全量回复方式
    ,t.是否逾期2
    ,t.是否催单 -- 2020-02-24
    ,t.催单次数
    -- -- 2020-04-28 bu he ge
    ,工单不合格原因,
    受理部门,
    归属营业部,
    紧急程度,
    工单类型,
    复合环节处理人,
    复合环节处理部门,
    复合环节处理时间,
    任务时限,
    整体时限,
    是否中高端用户,
    受理品牌,
    手机型号,
    客户要求回复方式,
    用户资费,
    请求编号,
    用户品牌 -- 2020-04-28 bu he ge

  ,t.complaintLocation,t.longitudeAndLatitude-- 202011-05

  ,t.checkin_date,null,t.file210523 -- 2021-05-24
    FROM v_complaints_details_01 t ,v_jtkd_sfyj j where
    t.流水号 = j.sn(+) and
     t.流水号 in
    --SELECT t.*,sysdate mvdate FROM v_complaints_details t where t.流水号 in
   (select v.f_serialno from v_complain_update_serialno v where v.f_serialno not in (select del.f_s
erialno from w_complain_delete del where del.updatedate >= trunc(sysdate - 1)));

    commit;
    --记录每个物化视图更新后的数量
    insert into sys_report_proc_excute_result values
    ('p_table_complain_F8','t_complaints_details_01',1,var_startdate,sysdate);
    COMMIT;
  end;

  ---2020-03-04 14:41

  begin
    for i in (select t.f_serialno, w.id,linkbelongsarea
                from f8_report t, w_complain_manager w
               where w.f_serialno = t.f_serialno
                 and w.acceptcorp = '000013003-区公司网管'
                 and t.create_date>trunc(sysdate)-2
                 and w.f_actinstid is not null
                 and t.linkbelongsarea is not null
                 and t.curworkgroup = '归档') loop
      sp_rcwzl_date(i.f_serialno, i.id,i.linkbelongsarea);
    end loop;
    commit;
  end;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    exceptionCode := sqlcode;
    exceptionInfo := SUBSTR(sqlerrm, 1, 2000);
    insert into tab_reflush_exception(proceduresname,tabname,exceptioncode,exceptioninfo)
    values('p_table_complain_F8',tabName,exceptionCode,exceptionInfo);
    commit;
END p_table_complain_F8;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','P_INSERT_DBYJ_SEND_SN_FGS_CF','CSCDS') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','P_TABLE_COMPLAIN_F8_SLEEP','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_TABLE_COMPLAIN_F8_SLEEP"
AS
   var_startdate date:=sysdate;
   tabName varchar(100);
   exceptionCode number;
   exceptionInfo varchar(4000);
Begin
  --删除当天有操作的单子
  tabName := 't_complaints_sleep_details';
  delete from  t_complaints_sleep_details t where t.流水号 in
  (select v.f_serialno from v_complain_update_serialno v) or t.流水号 in
  (select t.f_serialno from w_complain_delete t where t.updatedate >= trunc(sysdate - 1));
  --存入最新数据
  INSERT INTO t_complaints_sleep_details
  select id, createtime, complaintcityid, belongcityid, userlevelid, servicerequesttypeid, status, actdefid, channeli
d, handlerdate, handledate_limit, 流水号, 业务类型第一层, 业务类型第二层, 业务类
型第三层, 业务类型第四层, 业务类型第五层, 业务类型第六层, 业务类型第七层, 用户投
诉地市, 用户归属地, 营业部代码, 客户归属营业部名称, 营业厅代码, 用户归属营业厅名
称, 用户品牌, 受理地市, 受理渠道, 用户姓名, 受理号码, 受理工号, 投诉时间, 开始休
眠时间, 结束休眠时间, 派单人, 派单时间, 反馈人, 反馈时间, 回单时间, 反馈部门, 反馈结果, 处理部门, 处理时长, 是否最终处理, nvl(j.sfy
q_,是否逾期), 牵头至反馈处理次数, 回访标记, 用户满意度, 回单是否正确, 回单不正确
原因, 责任部门, 责任原因, 是否直接反馈, 是否企业责任_升级, 被投诉营业厅, 被投诉
员工工号, 被投诉员工姓名, 短信投诉内容, sp企业代码, sp企业名称, 收费金额, 定性为
内置, 未退费原因, 调帐金额, 疑似内置, 标题, 是否重复, 重复投诉原因, 回复方式, 解
决程度, 责任归属, 是否特殊工单, create_date, 用户星级, weekup, is_consult, is_error
  , 客户投诉内容, sysdate mvdate, 派单是否满意, 派单不满意原因, 派单不满意原因备
注, sp业务名称,t.营业厅名称,客户标签,t.备注,t.投诉业务办理渠道,t.办理时间,t.客户
投诉业务办理时确认方式,t.业务办理原因

  ,t.升级倾向,t.引发原因第一层,t.引发原因第二层,t.引发原因第三层,t.引发原因第四
层
,t.是否催单
,t.催单次数
 ,t.complaintLocation,t.longitudeAndLatitude-- 202011-05
    FROM v_complaints_sleep_details t ,v_jtkd_sfyj j,v_complain_update_serialno v where
  t.流水号 = j.sn(+) and  t.流水号 = v.f_serialno ;
 -- (select v.f_serialno from v_complain_update_serialno v where v.f_serialno not in (select del.f_serialno from w_comp
lain_delete del where del.updatedate >= trunc(sysdate - 1)));
  --记录每个物化视图更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_table_complain_F8_sleep','t_complaints_sleep_details',(select count(1) from t_complaints_sleep_details
),var_startdate,sysdate);
  COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    exceptionCode := sqlcode;
    exceptionInfo := SUBSTR(sqlerrm, 1, 2000);
    insert into tab_reflush_exception(proceduresname,tabname,exceptioncode,exception
info)
    values('p_table_complain_F8_sleep',tabName,exceptionCode,exceptionInfo);
    commit;
END p_table_complain_F8_sleep;




SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','P_TABLE_COMPLAIN_F8_UP','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_TABLE_COMPLAIN_F8_UP"
AS
   var_startdate date:=sysdate;
   tabName varchar(100);
   exceptionCode number;
   exceptionInfo varchar(4000);
Begin
  --删除当天有操作的单子
  tabName := 't_complaints_details_up';
  delete from t_complaints_details_up t where t.流水号 in
  (select v.f_serialno from v_complain_update_serialno v);
 /* (select v.f_serialno from v_complain_update_serialno v) or t.流水号 in
  (select t.f_serialno from w_complain_delete t where t.updatedate >= trunc(sysdate - 1))
; */
  --存入最新数据
  INSERT INTO t_complaints_details_up
select id, createtime, complaintcityid, userbrandid, servicerequesttypeid, belongcityid, status, channelid
, 流水号, 业务类型第一层, 业务类型第二层, 业务类型第三层, 业务类型第四层, 业务类
型第五层, 业务类型第六层, 业务类型第七层, 反馈结果, 牵头部门, 用户投诉地市, 用户
归属地市, 用户归属营业部名称, 用户归属营业厅名称, 用户品牌, 用户级别, 受理渠道,
用户姓名, 受理号码, 受理工号, 投诉时间, 派单人, 派单时间, 反馈人, 反馈时间, 回单
时间, 牵头处理时长, 工单处理时长, 协助处理时长, issolveid, nvl(j.sfyq_,是否逾期), 是否曾经普通投诉, 是否未解决, 用户满意度, 不满意原
因, 责任归属, 责任部门, 责任原因, 是否双返, 计费方式, 退费金额, 牵头处理次数, 是否多次流转, create_date, 用户星级, 反馈部门, is_error
, lastqtid, f_fksj, 客户投诉内容
,sysdate mvdate, 派单是否满意, 派单不满意原因, 派单不满意原因备注, sp业务名称,营业厅名称,t.解决程度,客户标签,t.备注,t.投诉业务办理渠道,t.办理时间,
t.客户投诉业务办理时确认方式,t.业务办理原因
 ,t.升级倾向,t.引发原因第一层,t.引发原因第二层,t.引发原因第三层,t.引发原因第四层


,t.协助处理是否逾期,t.问题标签,t.业务标签,u.last_user staffid,t.是否重复,t.普通投诉升级
,t.是否催单
,t.催单次数
-- lyl 2020年8月30日20:51:19
  ,t.checkin_date,t.tag,t.privatedynachar089,GETTIMEDESC((t.checkin_date-t.createtime)*24*60*60)
   ,t.complaintLocation,t.longitudeAndLatitude-- 202011-05
   ,t.file210523,null
  FROM v_complaints_details_up t ,v_jtkd_sfyj j ,t_f8_last_reply_user u,v_complai
n_update_serialno v
  where
  t.流水号 = j.sn(+)  and t.流水号 = u.serial_no(+)
  and t.流水号 =  v.f_serialno ;
 -- SELECT t.*,sysdate mvdate FROM v_complaints_details_up t where t.流水号 in
   -- (select v.f_serialno from v_complain_update_serialno v where v.f_serialno not in (select del.f
_serialno from w_complain_delete del where del.updatedate >= trunc(sysdate - 1))
);
  --记录每个物化视图更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_table_complain_F8_up','t_complaints_details_up',1,var_startdate,sysdate);
  COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    exceptionCode := sqlcode;
    exceptionInfo := SUBSTR(sqlerrm, 1, 2000);
    insert into tab_reflush_exception(proceduresname,tabname,exceptioncode,exceptioninfo)
    values('p_table_complain_F8_up',tabName,exceptionCode,exceptionInfo);
    commit;
END p_table_complain_F8_up;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','P_INSERT_DBYJ_SEND_SN_SJ','CSCDS') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','P_TABLE_VIEW_COMPLAIN_PD_RL','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_TABLE_VIEW_COMPLAIN_PD_RL"
AS
   var_startdate date:=sysdate;
Begin
  --删除当日有变化的单子
  delete from table_view_complain_pd_rl t where t.complainid in
  (select v.complainid from v_complain_update_serialno v);
  --存入最新数据
  INSERT INTO table_view_complain_pd_rl
  SELECT t.*,'p' savetype,sysdate mvdate FROM view_complain_pd_rl t where
  --t.firstrldate >= trunc(sysdate - 1) and t.firstrldate <= trunc(sysdate) and t.isfast = '是';
  t.complainid in (select v.complainid from v_complain_update_serialno v) and t.isfast =
'是';
  --记录每个物化视图更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_table_view_complain_pd_rl','table_view_complain_pd_rl',(select count(1) from ta
ble_view_complain_pd_rl where mvdate >= trunc(sysdate)),var_startdate,sysdate);
  COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
END p_table_view_complain_pd_rl;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','P_BHG','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','B2B_ARCHIVE_INSTANCE_MSGS','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','B2B_ARCHIVE_INST_MSGS_PS5','PRD_SOAINFRA') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','P_TAB_REFLUSH','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_TAB_REFLUSH"
AS
   var_startdate date:=sysdate;
   tabName varchar(100);
   exceptionCode number;
   exceptionInfo varchar(4000);
Begin
  --1.更新tab_xcy_complain_option_hd表
  --1.1删除当日有变化的单子
  tabName := 'tab_xcy_complain_option_hd';
  delete from tab_xcy_complain_option_hd t where t.complain_id in
  (select v.complainid from v_complain_update_serialno v);
  --1.2更新当日有变化的单子
  insert into tab_xcy_complain_option_hd
  select v.* from view_p_complain_option_hd v;
  --1.3记录更新tab_xcy_complain_option_hd表更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_tab_reflush','tab_xcy_complain_option_hd',1,var_startdate,sysdate);
  COMMIT;

  --2.更新tab_xcy_complain_option_zfk表
  --2.1删除当日有变化的单子
  tabName := 'tab_xcy_complain_option_zfk';
  var_startdate := sysdate;
  delete from tab_xcy_complain_option_zfk t where t.complain_id in
  (select v.complainid from v_complain_update_serialno v);
  --2.2更新当日有变化的单子
  insert into tab_xcy_complain_option_zfk
  select v.* from view_p_complain_option_zfk v;
  --2.3记录更新tab_xcy_complain_option_hd表更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_tab_reflush','tab_xcy_complain_option_zfk',1,var_startdate,sysdate);
  COMMIT;

  --3.更新tab_xcy_zfk_qwg表
  --3.1删除当日有变化的单子
  tabName := 'tab_xcy_zfk_qwg';
  var_startdate := sysdate;
  delete from tab_xcy_zfk_qwg t where t.complainid in
  (select v.complainid from v_complain_update_serialno v);
  --3.2更新当日有变化的单子
  insert into tab_xcy_zfk_qwg
  select a.complainid,a.handlerdate,id sjlogid,sysdate updatedate,'emos' op_person from
      (
       select
         last_value(id) over(partition by log.complainid order by handlerdate ROWS BETWEEN UNBOUNDED PRECEDING AN
D UNBOUNDED FOLLOWING) last_id,
         id,log.complainid,to_char(log.handlerdate,'yyyy-mm-dd hh24:mi:ss') handlerdate
         from xcy_complain_shengji_log log
         where log.complainid in (select v.complainid from v_complain_update_serialno v)
         and log.flowto = 'qt-eoms2qt'
      ) a where last_id = id;
  --3.3记录更新tab_xcy_zfk_qwg表更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_tab_reflush','tab_xcy_zfk_qwg',1,var_startdate,sysdate);
  COMMIT;

  --4.更新tab_xcy_com_option_fwpzbsh表
  --4.1删除当日有变化的单子
  tabName := 'tab_xcy_com_option_fwpzbsh';
  var_startdate := sysdate;
  delete from tab_xcy_com_option_fwpzbsh t where t.complain_id in
  (select v.complainid from v_complain_update_serialno v);
  --4.2更新当日有变化的单子
  insert into tab_xcy_com_option_fwpzbsh
  select a.complain_id,
       a.deal_time   deal_time,
       op_person,
       OP_DEPARTMENT,
       id            optionid,
       sysdate       updatedate
  from (select last_value(id) over(partition by complain_id order by deal_time ROWS BETWEEN
UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) last_id,
               id,
               complain_id,
               deal_time,
               op_person,
               OP_DEPARTMENT
          from xcy_complain_option op,v_complain_update_serialno v
         where op.complain_id = v.complainid
           and op.flowto in ('zfk', 'fwpzbsh')) a
 where last_id = id;
  --4.3记录更新tab_xcy_com_option_fwpzbsh表更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_tab_reflush','tab_xcy_com_option_fwpzbsh',1,var_startdate,sysdate);
  COMMIT;

  --5.更新tab_xcy_complain_op_lastzfk表
  --5.1删除当日有变化的单子
  tabName := 'tab_xcy_complain_op_lastzfk';
  var_startdate := sysdate;
  delete from tab_xcy_complain_op_lastzfk t where t.complain_id in
  (select v.complainid from v_complain_update_serialno v);
  --5.2更新当日有变化的单子
  insert into tab_xcy_complain_op_lastzfk
  select a.complain_id,a.deal_time deal_time,op_person,OP_DEPARTMENT,id optionid,sysdate mvdate from

      (
       select
         last_value(id) over(partition by complain_id order by deal_time ROWS BETWEEN UNBOUNDED P
RECEDING AND UNBOUNDED FOLLOWING) last_id,
         id,complain_id,deal_time,op_person,OP_DEPARTMENT
         from xcy_complain_option op
         where op.complain_id in (select v.complainid from v_complain_update_serialno v) and op.flowto
 = 'zfk'
      ) a where last_id = id;
  --5.3记录更新tab_xcy_complain_op_lastzfk表更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_tab_reflush','tab_xcy_complain_op_lastzfk',1,var_startdate,sysdate);
  COMMIT;

  --6.更新tab_complain_is_repeat表
  --6.1删除当日有变化的单子
  tabName := 'tab_complain_is_repeat';
  var_startdate := sysdate;
  delete from tab_complain_is_repeat t where t.complain_id in
  (select v.complainid from v_complain_update_serialno v);
  --6.2更新当日有变化的单子
  insert into tab_complain_is_repeat (is_repeat,MIX_AMOUNT,is_consult,complain_id,
consultationorcomplaint)
  /*select max(is_repeat) is_repeat,
         max(t.MIX_AMOUNT) MIX_AMOUNT,
         max(t.is_consult) is_consult,
         t.complain_id,
         max(t.consultationorcomplaint) consultationorcomplaint
    from xcy_complain_option t
    where t.complain_id in (select v.complainid from v_complain_update_serialno v)
   group by t.complain_id;*/
   select *
    from (with temp as (select /*+ materialize */
                         max(is_repeat) is_repeat,
                         max(t.MIX_AMOUNT) MIX_AMOUNT,
                         max(t.is_consult) is_consult,
                         t.complain_id,
                         max(t.consultationorcomplaint) consultationorcomplaint
                          from xcy_complain_option t,
                               (select v.complainid
                                  from v_complain_update_serialno v ) m
                         where t.complain_id = m.complainid
                         group by complain_id)
           select * from temp);
  --6.3记录更新tab_complain_is_repeat表更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_tab_reflush','tab_complain_is_repeat',1,var_startdate,sysdate);
  COMMIT;

  --7.更新tab_complain_re_qt_count表
  --7.1删除当日有变化的单子
  tabName := 'tab_complain_re_qt_count';
  var_startdate := sysdate;
  delete from tab_complain_re_qt_count t where t.complainid in
  (select v.complainid from v_complain_update_serialno v);
  --7.2更新当日有变化的单子
  insert into tab_complain_re_qt_count (COMPLAINID,ACCEPT_CORP,ALLCOUNT)
  select t.* from view_complain_re_qt_count t;
  --7.3记录更新tab_complain_re_qt_count表更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_tab_reflush','tab_complain_re_qt_count',1,var_startdate,sysdate);
  COMMIT;

  --8.更新tab_xcy_comp_sji_log_recount表
  --8.1删除当日有变化的单子
  tabName := 'tab_xcy_comp_sji_log_recount';
  var_startdate := sysdate;
  delete from tab_xcy_comp_sji_log_recount t where t.complainid in
  (select v.complainid from v_complain_update_serialno v);
  --8.2更新当日有变化的单子
select dbms_metadata.get_ddl('PROCEDURE','B2B_ARCHIVE_PROCEDURE','PRD_SOAINFRA') FROM DUAL;
  insert into tab_XCY_COMP_SJI_LOG_RECOUNT (complainid,count)
  select log.complainid,count(1) count from xcy_complain_shengji_log log
             where log.complainid in (select v.complainid from v_complain_update_serialno v)
             and (log.handletype = '再处理' or log.handletype = '重派单') group by log.complainid;
  --8.3记录更新tab_xcy_comp_sji_log_recount表更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_tab_reflush','tab_xcy_comp_sji_log_recount',1,var_startdate,sysdate);
  COMMIT;

  --9.更新tab_xcy_complain_shengji_log_rl表
  --9.1删除当日有变化的单子
  tabName := 'tab_xcy_complain_log_rl';
  var_startdate := sysdate;
  delete from tab_xcy_complain_log_rl t where t.complainid in
  (select v.complainid from v_complain_update_serialno v);
  --9.2更新当日有变化的单子
  insert into tab_xcy_complain_log_rl (complainid,handlerdate,shengjilogid)
  select a.complainid,a.handlerdate,id shengjilogid from
      (--只获取，认领时间大于TAB_XCY_SYS_INTERACTIVE_LOG表派单时间的信息进行处理
       select
         first_value(log.id) over(partition by complainid order by handlerdate ROWS BETWEEN UNBOUNDED PR
ECEDING AND UNBOUNDED FOLLOWING) first_id,
         log.id,complainid,handlerdate
         from xcy_complain_shengji_log log,w_complain_manager c,TAB_XCY_SYS_INTERACTIVE_LOG interlog
         where c.f_serialno in (select v.f_serialno from v_complain_update_serialno v)
         and c.f_serialno = interlog.serial_no and c.id = log.complainid
         and (log.handletype = '认领工单' and log.handlenote = '牵头部门处理' or log.flowto = 'qt-eoms2qt'
or log.flowto = 'confirmWorkSheet')
         and log.handlerdate >= to_date(interlog.op_time,'yyyy-mm-dd hh24:mi:ss')
      ) a where first_id = id;
  --9.3记录更新tab_xcy_complain_shengji_log_rl表更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_tab_reflush','tab_xcy_complain_log_rl',1,var_startdate,sysdate);
  COMMIT;

  --10.更新tab_xcy_comp_sji_log_qtcount表
  --10.1删除当日有变化的单子
  tabName := 'tab_xcy_comp_sji_log_qtcount';
  var_startdate := sysdate;
  delete from tab_xcy_comp_sji_log_qtcount t where t.complainid in
  (select v.complainid from v_complain_update_serialno v);
  --10.2更新当日有变化的单子
  insert into tab_xcy_comp_sji_log_qtcount (complainid,count)
  select log.complainid,count(1) count from xcy_complain_shengji_log log
    where log.complainid in (select v.complainid from v_complain_update_serialno v)
    and log.handlenote = '牵头部门处理' and log.handletype = '流转工单' group by log.complainid;
  --10.3记录更新tab_xcy_comp_sji_log_qtcount表更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_tab_reflush','tab_xcy_comp_sji_log_qtcount',1,var_startdate,sysdate);
  COMMIT;

  --11.更新tab_complain_company_info表
  --11.1删除当日有变化的单子
  tabName := 'tab_complain_company_info';
  var_startdate := sysdate;
  delete from tab_complain_company_info t where t.id in
  (select v.complainid from v_complain_update_serialno v);
  --11.2更新当日有变化的单子
  insert into tab_complain_company_info
  select t.*,sysdate updatedate from view_complain_company_info t;
  --11.3记录更新tab_complain_company_info表更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_tab_reflush','tab_complain_company_info',1,var_startdate,sysdate);
  COMMIT;

  --12.更新tab_xcy_complain_dyys表
  --12.1删除当日有变化的单子
  tabName := 'tab_xcy_complain_dyys';
  var_startdate := sysdate;
  delete from tab_xcy_complain_dyys t where t.complain_id in
  (select v.complainid from v_complain_update_serialno v);
  --12.2更新当日有变化的单子
  insert into tab_xcy_complain_dyys
  select
         base.complain_id,
         max(decode(base.ch_name,'被投诉营业厅',base.value_,null)) 被投诉营业厅,
         max(decode(base.ch_name,'被投诉员工工号',base.value_,null)) 被投诉员工
工号,
         max(decode(base.ch_name,'被投诉员工姓名',base.value_,null)) 被投诉员工
姓名,
         max(decode(base.ch_name,'sp企业代码',base.value_,null)) SP企业代码,
         max(decode(base.ch_name,'sp企业名称',base.value_,null)) SP企业名称,
         max(decode(base.ch_name,'故障型号',base.value_,null)) 故障型号,
         max(decode(base.ch_name,'故障现象',base.value_,null)) 故障现象,
         max(decode(base.ch_name,'故障时间段1',base.value_,null)) 故障时间段1,
         max(decode(base.ch_name,'故障时间段2',base.value_,null)) 故障时间段2,
         max(decode(base.ch_name,'热门应用',base.value_,null)) 热门应用,
  sysdate updatedate
  from (select t.complain_id, t.ch_name, t.value_
          from xcy_dyys_data t, w_complain_manager w
         where w.id = t.complain_id
           and w.f_serialno in (select v.f_serialno from v_complain_update_serialno v)
           and to_date(substr(w.f_serialno, 0, 8), 'yyyymmdd') = t.serial_date
       ) base group by base.complain_id;
  --12.3记录更新tab_xcy_complain_dyys表更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_tab_reflush','tab_xcy_complain_dyys',1,var_startdate,sysdate);
  COMMIT;

  --13.更新tab_view_complain_option表
  --13.1删除当日有变化的单子
  tabName := 'tab_view_complain_option';
  var_startdate := sysdate;
  delete from tab_view_complain_option t where t.complain_id in
  (select v.complainid from v_complain_update_serialno v);
  --13.2更新当日有变化的单子
  insert into tab_view_complain_option
  select t.*,sysdate updatedate from view_complain_option t;
  --13.3记录更新tab_view_complain_option表更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_tab_reflush','tab_view_complain_option',1,var_startdate,sysdate);
  COMMIT;

  --14.更新tab_complain_option_sj_max表
  --14.1删除当日有变化的单子
  tabName := 'tab_complain_option_sj_max';
  var_startdate := sysdate;
  delete from tab_complain_option_sj_max t where t.complain_id in
  (select v.complainid from v_complain_update_serialno v);
  --14.2更新当日有变化的单子
  insert into tab_complain_option_sj_max
  select a.INDICT_RSLT,a.VERIFICATION,a.DUTY_REASON,a.DEAL_DESC,a.complain_id,sysdate updatedate
      from (
          select last_value(id) over(partition by complain_id order by create_date ROWS BETWEEN UNBOUNDED PREC
EDING AND UNBOUNDED FOLLOWING) last_value,
                 como.id,como.INDICT_RSLT,como.VERIFICATION,como.DUTY_REASON,como.DEAL_DESC,como.complain_id from
                 (
                     select complain.create_date create_date_complain,o.* from
                      (select c.id cid,c.create_date
                                 from w_complain_manager c
                                 left join bpm_pro_run_his h
                                 on h.businesskey = c.id
                                 where c.f_serialno in (select t.f_serialno from v_complain_update_serialno t)
                                 and h.actdefid = 'sjts:2:10000006190004') complain

                       left join xcy_complain_option o on o.complain_id = complain.cid
                 ) como
               ) a where last_value = id;
  --14.3记录更新tab_complain_option_sj_max表更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_tab_reflush','tab_complain_option_sj_max',1,var_startdate,sysdate);
  COMMIT;

  --15.更新table_view_complain_pd_rl表，是否快速响应工单
  --15.1删除当日有变化的单子
  tabName := 'table_view_complain_pd_rl';
  delete from table_view_complain_pd_rl t where t.complainid in
  (select v.complainid from v_complain_update_serialno v);
  --15.2存入最新数据
  INSERT INTO table_view_complain_pd_rl
  SELECT t.*,'p' savetype,sysdate mvdate FROM view_complain_pd_rl t where
  --t.firstrldate >= trunc(sysdate - 1) and t.firstrldate <= trunc(sysdate) and t.isfast = '是';
  t.complainid in (select v.complainid from v_complain_update_serialno v) and t.isfast =
'是';
  --15.3记录每个物化视图更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_tab_reflush','table_view_complain_pd_rl',1,var_startdate,sysdate);
  COMMIT;

  --16.更新tab_replyworksheet_count表
  --16.1删除当日有变化的单子
  tabName := 'tab_replyworksheet_count';
  var_startdate := sysdate;
  delete from tab_replyworksheet_count t where t.serial_no in
  (select v.f_serialno from v_complain_update_serialno v);
  --16.2更新当日有变化的单子
  insert into tab_replyworksheet_count
  select v.* from view_replyworksheet_count v;
  --16.3记录更新tab_replyworksheet_count表更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_tab_reflush','tab_replyworksheet_count',1,var_startdate,sysdate);
  COMMIT;

  --17.更新tb_view_complain_firstqt_group表
  --17.1删除当日有变化的单子
  tabName := 'tb_view_complain_firstqt_group';
  var_startdate := sysdate;
  delete from tb_view_complain_firstqt_group t where t.complainid in
  (select v.complainid from v_complain_update_serialno v);
  --17.2更新当日有变化的单子
  insert into tb_view_complain_firstqt_group
  select v.*,sysdate from view_complain_firstqt_group v;
  --17.3记录更新tb_view_complain_firstqt_group表更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_tab_reflush','tb_view_complain_firstqt_group',1,var_startdate,sysdate);
  COMMIT;

  --18.更新tab_view_com_option_sj_lastqt表
  --18.1删除当日有变化的单子
  tabName := 'tab_view_com_option_sj_lastqt';
  var_startdate := sysdate;
  delete from tab_view_com_option_sj_lastqt t where t.complain_id in
  (select v.complainid from v_complain_update_serialno v);
  --18.2更新当日有变化的单子
  insert into tab_view_com_option_sj_lastqt
  select t.*,sysdate mvdate from view_complain_option_sj_lastqt t;
  --18.3记录更新tab_view_com_option_sj_lastqt表更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_tab_reflush','tab_view_com_option_sj_lastqt',1,var_startdate,sysdate);
  COMMIT;

  --19.更新tab_view_lastqt_xzlong表
  --19.1删除当日有变化的单子
  tabName := 'tab_view_lastqt_xzlong';
  var_startdate := sysdate;
  delete from tab_view_lastqt_xzlong t where t.complain_id in
  (select v.complainid from v_complain_update_serialno v);
  --19.2更新当日有变化的单子
  insert into tab_view_lastqt_xzlong
  select t.*,sysdate mvdate from view_complain_lastqt_xzlong t;
  --19.3记录更新tab_view_lastqt_xzlong表更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_tab_reflush','tab_view_lastqt_xzlong',1,var_startdate,sysdate);
  COMMIT;

  --20.更新tab_view_lastqt_qtlong表
  --20.1删除当日有变化的单子
  tabName := 'tab_view_lastqt_qtlong';
  var_startdate := sysdate;
  delete from tab_view_lastqt_qtlong t where t.complainid in
  (select v.complainid from v_complain_update_serialno v);
  --20.2更新当日有变化的单子
  insert into tab_view_lastqt_qtlong
  select t.*,sysdate mvdate from view_complain_lastqt_qtlong t;
  --20.3记录更新tab_view_lastqt_qtlong表更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_tab_reflush','tab_view_lastqt_qtlong',1,var_startdate,sysdate);
  COMMIT;

  --21.更新tb_XCY_COMPLAIN_SHENGJI_LOG_JH表
  --21.1删除当日有变化的单子
  tabName := 'tb_XCY_COMPLAIN_SHENGJI_LOG_JH';
  var_startdate := sysdate;
  delete from tb_XCY_COMPLAIN_SHENGJI_LOG_JH t where t.complainid in
  (select v.complainid from v_complain_update_serialno v);
  --21.2更新当日有变化的单子
  insert into tb_XCY_COMPLAIN_SHENGJI_LOG_JH
  select t.* from v_XCY_COMPLAIN_SHENGJI_LOG_JH t;
  --21.3记录更新tb_XCY_COMPLAIN_SHENGJI_LOG_JH表更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_tab_reflush','tb_XCY_COMPLAIN_SHENGJI_LOG_JH',1,var_startdate,sysdate);
  COMMIT;

EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    exceptionCode := sqlcode;
    exceptionInfo := SUBSTR(sqlerrm, 1, 2000);
    insert into tab_reflush_exception(proceduresname,tabname,exceptioncode,exceptioninfo)
select dbms_metadata.get_ddl('PROCEDURE','B2B_DBMS_JOB','PRD_SOAINFRA') FROM DUAL;
    values('p_tab_reflush',tabName,exceptionCode,exceptionInfo);
    commit;
END p_tab_reflush;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','B2B_DBMS_REMOVEJOB','PRD_SOAINFRA') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','P_TAB_REFLUSH_RESULT','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_TAB_REFLUSH_RESULT"
AS
  viewCount int := 0;
  tabCount int := 0;
  tabName varchar(100);
  exceptionCode number;
  exceptionInfo varchar(4000);
Begin
  --1.记录tab_xcy_complain_option_hd表刷新数量
  --1.2赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'tab_xcy_complain_option_hd';
  select count(1) into viewCount from view_p_complain_option_hd t;
  select count(1) into tabCount from tab_xcy_complain_option_hd t where t.updatedate >= tru
nc(sysdate);
  --1.2存入刷新结果记录表
  insert into tab_reflush_result values('tab_xcy_complain_option_hd',viewCount,tabCount,sy
sdate,1);
  COMMIT;

  --2.记录tab_xcy_complain_option_zfk表刷新数量
  --2.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'tab_xcy_complain_option_zfk';
  select count(1) into viewCount from view_p_complain_option_zfk t;
  select count(1) into tabCount from tab_xcy_complain_option_zfk t where t.updatedate >= trunc(sysdat
e);
  --2.2存入刷新结果记录表
  insert into tab_reflush_result values('tab_xcy_complain_option_zfk',viewCount,tabCount,sysdate,2)
;
  COMMIT;

  --3.记录tab_xcy_zfk_qwg表刷新数量
  --3.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'tab_xcy_zfk_qwg';
  select count(1) into viewCount from (
       select
         last_value(id) over(partition by log.complainid order by handlerdate ROWS BETWEEN UNBOUNDED PRECED
ING AND UNBOUNDED FOLLOWING) last_id,
         id,log.complainid,to_char(log.handlerdate,'yyyy-mm-dd hh24:mi:ss') handle
rdate
         from xcy_complain_shengji_log log
         where log.complainid in (select v.complainid from v_complain_update_serialno v)
         and log.flowto = 'qt-eoms2qt'
      ) a where last_id = id;
  select count(1) into tabCount from tab_xcy_zfk_qwg t where t.updatedate >= trunc(sysdate);
  --3.2存入刷新结果记录表
  insert into tab_reflush_result values('tab_xcy_zfk_qwg',viewCount,tabCount,sysdat
e,3);
  COMMIT;

  --4.记录tab_xcy_com_option_fwpzbsh表刷新数量
  --4.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'tab_xcy_com_option_fwpzbsh';
  select count(1) into viewCount from(
       select
         last_value(id) over(partition by complain_id order by deal_time ROWS BETW
EEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) last_id,
         id,complain_id,deal_time,op_person,OP_DEPARTMENT
         from xcy_complain_option op
         where op.complain_id in (select v.complainid from v_complain_update_serialno v
) and op.flowto = 'fwpzbsh'
      ) a where last_id = id;
  select count(1) into tabCount from tab_xcy_com_option_fwpzbsh t where t.updatedate >= trunc(sysdate)
;
  --4.2存入刷新结果记录表
  insert into tab_reflush_result values('tab_xcy_com_option_fwpzbsh',viewCount,tabCount,sysdate,4);
  COMMIT;

  --5.记录tab_xcy_complain_op_lastzfk表刷新数量
  --5.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'tab_xcy_complain_op_lastzfk';
  select count(1) into viewCount from (
       select
         last_value(id) over(partition by complain_id order by deal_time ROWS BETWEEN
UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) last_id,
         id,complain_id,deal_time,op_person,OP_DEPARTMENT
         from xcy_complain_option op
         where op.complain_id in (select v.complainid from v_complain_update_serialno v) an
d op.flowto = 'zfk'
      ) a where last_id = id;
  select count(1) into tabCount from tab_xcy_complain_op_lastzfk t where t.updatedate >= trunc(sysdate);
  --5.2存入刷新结果记录表
  insert into tab_reflush_result values('tab_xcy_complain_op_lastzfk',viewCount,tabCount,sysdate,5);
  COMMIT;

  --6.记录tab_complain_is_repeat表刷新数量
  --6.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'tab_complain_is_repeat';
  select count(1) into viewCount
    from (with temp as (select
                         max(is_repeat) is_repeat,
                         max(t.MIX_AMOUNT) MIX_AMOUNT,
                         max(t.is_consult) is_consult,
                         t.complain_id,
                         max(t.consultationorcomplaint) consultationorcomplaint
                          from xcy_complain_option t,
                               (select v.complainid
                                  from v_complain_update_serialno v ) m
                         where t.complain_id = m.complainid
                         group by complain_id)
           select * from temp);
   select count(1) into tabCount from tab_complain_is_repeat t where t.updatedate >= trunc(sys
date);
  --6.2存入刷新结果记录表
  insert into tab_reflush_result values('tab_complain_is_repeat',viewCount,tabCount,sysdate,6);
  COMMIT;

  --7.记录tab_complain_re_qt_count表刷新数量
  --7.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'tab_complain_re_qt_count';
  select count(1) into viewCount from view_complain_re_qt_count t;
  select count(1) into tabCount from tab_complain_re_qt_count t where t.updatedate >= trunc(sysdate);
  --7.2存入刷新结果记录表
  insert into tab_reflush_result values('tab_complain_re_qt_count',viewCount,tabCount,sysdate,7);
  COMMIT;

  --8.记录tab_xcy_comp_sji_log_recount表刷新数量
  --8.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'tab_xcy_comp_sji_log_recount';
  select count(1) into viewCount from (
    select log.complainid,count(1) count from xcy_complain_shengji_log log
               where log.complainid in (select v.complainid from v_complain_update_
serialno v)
               and (log.handletype = '再处理' or log.handletype = '重派单') group by log.complainid
  ) sub;
  select count(1) into tabCount from tab_xcy_comp_sji_log_recount t where t.updatedat
e >= trunc(sysdate);
  --8.2存入刷新结果记录表
  insert into tab_reflush_result values('tab_xcy_comp_sji_log_recount',viewCount,t
abCount,sysdate,8);
  COMMIT;

  --9.记录tab_xcy_complain_shengji_log_rl表刷新数量
  --9.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'tab_xcy_complain_shengji_log_rl';
  select count(1) into viewCount from (--只获取，认领时间大于TAB_XCY_SYS_INTERAC
TIVE_LOG表派单时间的信息进行处理
     select
       first_value(log.id) over(partition by complainid order by handlerdate ROWS BETWEE
N UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) first_id,
       log.id,complainid,handlerdate
       from xcy_complain_shengji_log log,w_complain_manager c,TAB_XCY_SYS_INTERACTIVE_LOG interlog
       where c.f_serialno in (select v.f_serialno from v_complain_update_serialno v)
       and c.f_serialno = interlog.serial_no and c.id = log.complainid
       and (log.handletype = '认领工单' and log.handlenote = '牵头部门处理' or log.flowto = 'qt-eoms2
qt' or log.flowto = 'confirmWorkSheet')
       and log.handlerdate >= to_date(interlog.op_time,'yyyy-mm-dd hh24:mi:ss')
    ) a where first_id = id;
  select count(1) into tabCount from tab_xcy_complain_log_rl t where t.updatedate >= trunc(
sysdate);
  --9.2存入刷新结果记录表
   insert into tab_reflush_result values('tab_xcy_complain_shengji_log_rl',viewCount,tabCount
,sysdate,9);
  COMMIT;

  --10.记录tab_xcy_comp_sji_log_qtcount表刷新数量
  --10.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'tab_xcy_comp_sji_log_qtcount';
  select count(1) into viewCount from (
    select log.complainid,count(1) count from xcy_complain_shengji_log log
      where log.complainid in (select v.complainid from v_complain_update_serialno v)
      and log.handlenote = '牵头部门处理' and log.handletype = '流转工单' group by log.comp
lainid
  ) sub;
  select count(1) into tabCount from tab_xcy_comp_sji_log_qtcount t where t.updatedate >= trunc(sysdate)
;
  --10.2存入刷新结果记录表
   insert into tab_reflush_result values('tab_xcy_comp_sji_log_qtcount',viewCount,tabCount,sysdate,1
0);
  COMMIT;

  --11.记录tab_complain_company_info表刷新数量
  --11.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'tab_complain_company_info';
  select count(1) into viewCount from view_complain_company_info t;
  select count(1) into tabCount from tab_complain_company_info t where t.updatedate >= trunc(sysdate);
  --11.2存入刷新结果记录表
  insert into tab_reflush_result values('tab_complain_company_info',viewCount,tabCount,sysdate,11);
  COMMIT;

  --12.记录tab_xcy_complain_dyys表刷新数量
select dbms_metadata.get_ddl('PROCEDURE','B2B_DISABLE_CONSTRAINTS','PRD_SOAINFRA') FROM DUAL;
  --12.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'tab_xcy_complain_dyys';
  select count(1) into viewCount from (
    select base.complain_id from (
     select t.complain_id, t.ch_name, t.value_
        from xcy_dyys_data t, w_complain_manager w
       where w.id = t.complain_id
         and w.f_serialno in (select v.f_serialno from v_complain_update_serialno v)
         and to_date(substr(w.f_serialno, 0, 8), 'yyyymmdd') = t.serial_date
     ) base group by base.complain_id
  )sub;
  select count(1) into tabCount from tab_xcy_complain_dyys t where t.updatedate >= trunc(sysdate);
  --12.2存入刷新结果记录表
  insert into tab_reflush_result values('tab_xcy_complain_dyys',viewCount,tabCount,sysdate,12);
  COMMIT;

  --13.记录tab_view_complain_option表刷新数量
  --13.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'tab_view_complain_option';
  select count(1) into viewCount from view_complain_option t;
  select count(1) into tabCount from tab_view_complain_option t where t.updatedate >= trun
c(sysdate);
  --13.2存入刷新结果记录表
  insert into tab_reflush_result values('tab_view_complain_option',viewCount,tabCount,sysd
ate,13);
  COMMIT;

  --14.记录tab_complain_option_sj_max表刷新数量
  --14.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'tab_complain_option_sj_max';
  select count(1) into viewCount from (
    select last_value(id) over(partition by complain_id order by create_date ROWS BETWEEN
UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) last_value,
           como.id,como.INDICT_RSLT,como.VERIFICATION,como.DUTY_REASON,como.DEAL_DESC,como.complain_id
from
           (
               select complain.create_date create_date_complain,o.* from
                (select c.id cid,c.create_date
                           from w_complain_manager c
                           left join bpm_pro_run_his h
                           on h.businesskey = c.id
                           where c.f_serialno in (select t.f_serialno from v_complain_update_serialno t
)
                           and h.actdefid = 'sjts:2:10000006190004') complain
                 left join xcy_complain_option o on o.complain_id = complain.cid

           ) como
  ) a where last_value = id;
  select count(1) into tabCount from tab_complain_option_sj_max t where t.updatedate >= trunc(sysdate);
  --14.2存入刷新结果记录表
  insert into tab_reflush_result values('tab_complain_option_sj_max',viewCount,tabCount,sysdate,14);
  COMMIT;

  --15.记录table_view_complain_pd_rl表刷新数量，是否快速响应工单
  --15.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'table_view_complain_pd_rl';
  select count(1) into viewCount FROM view_complain_pd_rl t where
         t.complainid in (select v.complainid from v_complain_update_serialno v);
  select count(1) into tabCount from table_view_complain_pd_rl t where t.mvdate >= trunc(sysdate);
  --15.2存入刷新结果记录表
  insert into tab_reflush_result values('table_view_complain_pd_rl',viewCount,tabCount,sysdate,15);
  COMMIT;

  --16.记录t_complaints_details表刷新数量
  --16.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 't_complaints_details';
  SELECT count(1) into viewCount FROM v_complaints_details t where t.流水号 in
         (select v.f_serialno from v_complain_update_serialno v where v.f_serialno not in (
select del.f_serialno from w_complain_delete del where del.updatedate >= trunc(s
ysdate - 1)));
  select count(1) into tabCount from t_complaints_details t where t.mvdate >= trunc(sysdate);
  --16.2存入刷新结果记录表
  insert into tab_reflush_result values('t_complaints_details',viewCount,tabCount,sysdate,16);
  COMMIT;

  --17.记录t_complaints_details_up表刷新数量
  --17.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 't_complaints_details_up';
  SELECT count(1) into viewCount FROM v_complaints_details_up t where t.流水号 in
         (select v.f_serialno from v_complain_update_serialno v where v.f_serialno n
ot in (select del.f_serialno from w_complain_delete del where del.updatedate >=
trunc(sysdate - 1)));
  select count(1) into tabCount from t_complaints_details_up t where t.mvdate >= trunc(sysdate);
  --17.2存入刷新结果记录表
  insert into tab_reflush_result values('t_complaints_details_up',viewCount,tabCount,sysdate,17);
  COMMIT;

  --18.记录t_complaints_sleep_details表刷新数量
  --18.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 't_complaints_sleep_details';
  SELECT count(1) into viewCount FROM v_complaints_sleep_details t where t.流水号 in
  (select v.f_serialno from v_complain_update_serialno v where v.f_serialno not in (select del.f_seria
lno from w_complain_delete del where del.updatedate >= trunc(sysdate - 1)));
  select count(1) into tabCount from t_complaints_sleep_details t where t.mvdate >=
 trunc(sysdate);
  --18.2存入刷新结果记录表
  insert into tab_reflush_result values('t_complaints_sleep_details',viewCount,tabCou
nt,sysdate,18);
  COMMIT;

  --19.记录table_complain_by_tsds表刷新数量
  --19.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'table_complain_by_tsds';
  SELECT count(1) into viewCount FROM view_complain_by_tsds t where t.id in
         (select v.complainid from v_complain_update_serialno v where v.f_serialno not in (sele
ct del.f_serialno from w_complain_delete del where del.updatedate >= trunc(sysda
te - 1)));
  select count(1) into tabCount from table_complain_by_tsds t where t.mvdate >= trunc(sysdate);
  --19.2存入刷新结果记录表
  insert into tab_reflush_result values('table_complain_by_tsds',viewCount,tabCount,sysdate,19);
  COMMIT;

  --20.记录table_complain_by_yhgsd表刷新数量
  --20.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'table_complain_by_yhgsd';
  SELECT count(1) into viewCount FROM view_complain_by_yhgsd t where t.id in
         (select v.complainid from v_complain_update_serialno v where v.f_serialno not
 in (select del.f_serialno from w_complain_delete del where del.updatedate >= tr
unc(sysdate - 1)));
  select count(1) into tabCount from table_complain_by_yhgsd t where t.mvdate >= trunc(sysdate);
  --20.2存入刷新结果记录表
  insert into tab_reflush_result values('table_complain_by_yhgsd',viewCount,tabCount,sysdate,20);
  COMMIT;

  --21.记录table_complain_up_by_tsds表刷新数量
  --21.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'table_complain_up_by_tsds';
  SELECT count(1) into viewCount FROM view_complain_up_by_tsds t where t.id in
         (select v.complainid from v_complain_update_serialno v where v.f_serialno not in (select del.f_seria
lno from w_complain_delete del where del.updatedate >= trunc(sysdate - 1)));
  select count(1) into tabCount from table_complain_up_by_tsds t where t.mvdate >=
trunc(sysdate);
  --21.2存入刷新结果记录表
  insert into tab_reflush_result values('table_complain_up_by_tsds',viewCount,tabCount
,sysdate,21);
  COMMIT;

  --22.记录table_complain_up_by_yhgsd表刷新数量
  --22.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'table_complain_up_by_yhgsd';
  SELECT count(1) into viewCount FROM view_complain_up_by_yhgsd t where t.id in
         (select v.complainid from v_complain_update_serialno v where v.f_serialno no
t in (select del.f_serialno from w_complain_delete del where del.updatedate >= t
runc(sysdate - 1)));
  select count(1) into tabCount from table_complain_up_by_yhgsd t where t.mvdate >= trunc(sysdate);

  --22.2存入刷新结果记录表
  insert into tab_reflush_result values('table_complain_up_by_yhgsd',viewCount,tabCount,sysdate,22);
  COMMIT;

  --23.记录table_complain_sleep_by_tsds表刷新数量
  --23.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'table_complain_sleep_by_tsds';
  SELECT count(1) into viewCount FROM view_complain_sleep_by_tsds t where t.id in
         (select v.complainid from v_complain_update_serialno v where v.f_serialno not in (se
lect del.f_serialno from w_complain_delete del where del.updatedate >= trunc(sys
date - 1)));
  select count(1) into tabCount from table_complain_sleep_by_tsds t where t.mvdate >= trunc(sysdate);
  --23.2存入刷新结果记录表
  insert into tab_reflush_result values('table_complain_sleep_by_tsds',viewCount,tabCount,sysdate,23);
  COMMIT;

  --24.记录table_complain_sleep_by_yhgsd表刷新数量
  --24.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'table_complain_sleep_by_yhgsd';
  SELECT count(1) into viewCount FROM view_complain_sleep_by_yhgsd t where t.id in
         (select v.complainid from v_complain_update_serialno v where v.f_serialno not in (sel
ect del.f_serialno from w_complain_delete del where del.updatedate >= trunc(sysd
ate - 1)));
  select count(1) into tabCount from table_complain_sleep_by_yhgsd t where t.mvdate >= trunc(sysdate);
  --24.2存入刷新结果记录表
  insert into tab_reflush_result values('table_complain_sleep_by_yhgsd',viewCount,tabCount,sysdate,24);
  COMMIT;

  --25.记录tab_replyworksheet_count表刷新数量
  --25.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'tab_replyworksheet_count';
  SELECT count(1) into viewCount FROM view_replyworksheet_count t where t.serial_no in
         (select v.f_serialno from v_complain_update_serialno v );
  select count(1) into tabCount from tab_replyworksheet_count t where t.updatedate >= trunc(sysdate);
  --25.2存入刷新结果记录表
  insert into tab_reflush_result values('tab_replyworksheet_count',viewCount,tabCount,sysdate,25);
  COMMIT;

  --26.记录tb_view_complain_firstqt_group表刷新数量
  --26.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'tb_view_complain_firstqt_group';
  SELECT count(1) into viewCount FROM view_complain_firstqt_group t;
  select count(1) into tabCount from tb_view_complain_firstqt_group t where t.mvdate >= trunc(sysdate);
  --26.2存入刷新结果记录表
  insert into tab_reflush_result values('tb_view_complain_firstqt_group',viewCount,tabCount,sysdate,26);
  COMMIT;

  --27.记录tab_view_com_option_sj_lastqt表刷新数量
  --27.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'tab_view_com_option_sj_lastqt';
  SELECT count(1) into viewCount FROM view_complain_option_sj_lastqt t;
  select count(1) into tabCount from tab_view_com_option_sj_lastqt t where t.mvdate >= trunc(sysdate);
  --27.2存入刷新结果记录表
  insert into tab_reflush_result values('tab_view_com_option_sj_lastqt',viewCount,tabCount,sysdate,30);
  COMMIT;

  --28.记录tab_view_lastqt_xzlong表刷新数量
  --28.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'tab_view_lastqt_xzlong';
  SELECT count(1) into viewCount FROM view_complain_lastqt_xzlong t;
  select count(1) into tabCount from tab_view_lastqt_xzlong t where t.mvdate >= tr
unc(sysdate);
  --28.2存入刷新结果记录表
  insert into tab_reflush_result values('tab_view_lastqt_xzlong',viewCount,tabCount,sysd
ate,27);
  COMMIT;

  --29.记录tab_view_lastqt_qtlong表刷新数量
  --29.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'tab_view_lastqt_qtlong';
  SELECT count(1) into viewCount FROM view_complain_lastqt_qtlong t;
  select count(1) into tabCount from tab_view_lastqt_qtlong t where t.mvdate >= trunc(sysdate);
  --29.2存入刷新结果记录表
  insert into tab_reflush_result values('tab_view_lastqt_qtlong',viewCount,tabCount,sysdate,28);
  COMMIT;

  --30.记录tb_XCY_COMPLAIN_SHENGJI_LOG_JH表刷新数量
  --30.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'tb_XCY_COMPLAIN_SHENGJI_LOG_JH';
  SELECT count(1) into viewCount FROM v_XCY_COMPLAIN_SHENGJI_LOG_JH t;
  select count(1) into tabCount from tb_XCY_COMPLAIN_SHENGJI_LOG_JH t where t.updatedate >= trunc(sysdate);
  --30.2存入刷新结果记录表
  insert into tab_reflush_result values('tb_XCY_COMPLAIN_SHENGJI_LOG_JH',viewCount,tabCount,sysdate,29);
  COMMIT;

EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    insert into tab_reflush_result values(tabName,0,0,sysdate,99);
    exceptionCode := sqlcode;
    exceptionInfo := SUBSTR(sqlerrm, 1, 2000);
    insert into tab_reflush_exception(proceduresname,tabname,exceptioncode,exceptioninfo)

    values('p_tab_reflush_result',tabName,exceptionCode,exceptionInfo);
    commit;
END p_tab_reflush_result;




SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','B2B_ENABLE_CONSTRAINTS','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','B2B_EXPORT_JOB','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','B2B_INSTANCEMSG','PRD_SOAINFRA') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','P_TAB_REFLUSH_RESULT_COMPLAIN','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_TAB_REFLUSH_RESULT_COMPLAIN"
AS
  tabName varchar(100);
  exceptionCode number;
  exceptionInfo varchar(4000);
Begin
  --1.记录tab_xcy_complain_option_hd表刷新后有问题的单子
  tabName := 'tab_xcy_complain_option_hd';
  insert into tab_reflush_result_complain
    select tabName,sub.f_serialno,sub.id,
           sub.业务最后操作时间,sub.tab最后更新时间,sysdate from (
          select c.f_serialno,c.id,
                 tab.updatedate tab最后更新时间,
                 trunc(tab.updatedate - 1) 实际的更新时间,
                 trunc(v.updatetime) 应该的更新时间,
                 v.updatetime 业务最后操作时间
                 from tab_xcy_complain_option_hd tab,v_complain_update_serialno v,w_complain_manager c
                 where v.complainid = tab.complain_id and v.complainid = c.id
    ) sub where sub.实际的更新时间 != sub.应该的更新时间;

  /*--2.记录tab_xcy_complain_option_zfk表刷新数量
  --2.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'tab_xcy_complain_option_zfk';
  select count(1) into viewCount from view_p_complain_option_zfk t;
  select count(1) into tabCount from tab_xcy_complain_option_zfk t where t.updatedate >= trun
c(sysdate);
  --2.2存入刷新结果记录表
  insert into tab_reflush_result values('tab_xcy_complain_option_zfk',viewCount,tabCount,sy
sdate,2);
  COMMIT;

  --3.记录tab_xcy_zfk_qwg表刷新数量
  --3.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'tab_xcy_zfk_qwg';
  select count(1) into viewCount from (
       select
         last_value(id) over(partition by log.complainid order by handlerdate ROWS BETWEEN UNBOUNDE
D PRECEDING AND UNBOUNDED FOLLOWING) last_id,
         id,log.complainid,to_char(log.handlerdate,'yyyy-mm-dd hh24:mi:ss') handlerdate
         from xcy_complain_shengji_log log
         where log.complainid in (select v.complainid from v_complain_update_serialno v)
         and log.flowto = 'qt-eoms2qt'
      ) a where last_id = id;
  select count(1) into tabCount from tab_xcy_zfk_qwg t where t.updatedate >= trunc(sysdate);
  --3.2存入刷新结果记录表
  insert into tab_reflush_result values('tab_xcy_zfk_qwg',viewCount,tabCount,sysdate,3);
  COMMIT;

  --4.记录tab_xcy_com_option_fwpzbsh表刷新数量
  --4.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'tab_xcy_com_option_fwpzbsh';
  select count(1) into viewCount from(
       select
         last_value(id) over(partition by complain_id order by deal_time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBO
UNDED FOLLOWING) last_id,
         id,complain_id,deal_time,op_person,OP_DEPARTMENT
         from xcy_complain_option op
         where op.complain_id in (select v.complainid from v_complain_update_serialno v) and op.flowto = 'fwpzbsh'
      ) a where last_id = id;
  select count(1) into tabCount from tab_xcy_com_option_fwpzbsh t where t.updatedate >= trunc(
sysdate);
  --4.2存入刷新结果记录表
  insert into tab_reflush_result values('tab_xcy_com_option_fwpzbsh',viewCount,tabCount,sysda
te,4);
  COMMIT;

  --5.记录tab_xcy_complain_op_lastzfk表刷新数量
  --5.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'tab_xcy_complain_op_lastzfk';
  select count(1) into viewCount from (
       select
         last_value(id) over(partition by complain_id order by deal_time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDE
D FOLLOWING) last_id,
         id,complain_id,deal_time,op_person,OP_DEPARTMENT
         from xcy_complain_option op
         where op.complain_id in (select v.complainid from v_complain_update_serial
no v) and op.flowto = 'zfk'
      ) a where last_id = id;
  select count(1) into tabCount from tab_xcy_complain_op_lastzfk t where t.updatedate >= trunc(sysdate
);
  --5.2存入刷新结果记录表
  insert into tab_reflush_result values('tab_xcy_complain_op_lastzfk',viewCount,tabCount,sysdate,5);

  COMMIT;

  --6.记录tab_complain_is_repeat表刷新数量
  --6.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'tab_complain_is_repeat';
  select count(1) into viewCount
    from (with temp as (select
                         max(is_repeat) is_repeat,
                         max(t.MIX_AMOUNT) MIX_AMOUNT,
                         max(t.is_consult) is_consult,
                         t.complain_id,
                         max(t.consultationorcomplaint) consultationorcomplaint
                          from xcy_complain_option t,
                               (select v.complainid
                                  from v_complain_update_serialno v ) m
                         where t.complain_id = m.complainid
                         group by complain_id)
           select * from temp);
   select count(1) into tabCount from tab_complain_is_repeat t where t.updatedate >= t
runc(sysdate);
  --6.2存入刷新结果记录表
  insert into tab_reflush_result values('tab_complain_is_repeat',viewCount,tabCount,sysd
ate,6);
  COMMIT;

  --7.记录tab_complain_re_qt_count表刷新数量
  --7.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'tab_complain_re_qt_count';
  select count(1) into viewCount from view_complain_re_qt_count t;
  select count(1) into tabCount from tab_complain_re_qt_count t where t.updatedate >= trunc(sysdate);
  --7.2存入刷新结果记录表
  insert into tab_reflush_result values('tab_complain_re_qt_count',viewCount,tabCount,sysdate,7);
  COMMIT;

  --8.记录tab_xcy_comp_sji_log_recount表刷新数量
  --8.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'tab_xcy_comp_sji_log_recount';
  select count(1) into viewCount from (
    select log.complainid,count(1) count from xcy_complain_shengji_log log
               where log.complainid in (select v.complainid from v_complain_update_serialno v)
               and (log.handletype = '再处理' or log.handletype = '重派单') group by log.complainid
  ) sub;
  select count(1) into tabCount from tab_xcy_comp_sji_log_recount t where t.updatedate >= trunc(sysdate);
  --8.2存入刷新结果记录表
  insert into tab_reflush_result values('tab_xcy_comp_sji_log_recount',viewCount,tabCount,sysdate,8);
  COMMIT;

  --9.记录tab_xcy_complain_shengji_log_rl表刷新数量
  --9.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'tab_xcy_complain_shengji_log_rl';
  select count(1) into viewCount from (--只获取，认领时间大于TAB_XCY_SYS_INTERACTIVE_LOG表派单时间的信息进行处理
     select
       first_value(log.id) over(partition by complainid order by handlerdate ROW
S BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) first_id,
       log.id,complainid,handlerdate
       from xcy_complain_shengji_log log,w_complain_manager c,TAB_XCY_SYS_INTERACTIVE_LOG interlog

       where c.f_serialno in (select v.f_serialno from v_complain_update_serialno v)
       and c.f_serialno = interlog.serial_no and c.id = log.complainid
       and (log.handletype = '认领工单' and log.handlenote = '牵头部门处理' or log.flowto = '
qt-eoms2qt' or log.flowto = 'confirmWorkSheet')
       and log.handlerdate >= to_date(interlog.op_time,'yyyy-mm-dd hh24:mi:ss')
    ) a where first_id = id;
  select count(1) into tabCount from tab_xcy_complain_log_rl t where t.updatedate >
= trunc(sysdate);
  --9.2存入刷新结果记录表
   insert into tab_reflush_result values('tab_xcy_complain_shengji_log_rl',viewCount,
tabCount,sysdate,9);
  COMMIT;

  --10.记录tab_xcy_comp_sji_log_qtcount表刷新数量
  --10.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'tab_xcy_comp_sji_log_qtcount';
  select count(1) into viewCount from (
    select log.complainid,count(1) count from xcy_complain_shengji_log log
      where log.complainid in (select v.complainid from v_complain_update_serialno v)
      and log.handlenote = '牵头部门处理' and log.handletype = '流转工单' group
by log.complainid
  ) sub;
  select count(1) into tabCount from tab_xcy_comp_sji_log_qtcount t where t.updatedate >= trunc(
sysdate);
  --10.2存入刷新结果记录表
   insert into tab_reflush_result values('tab_xcy_comp_sji_log_qtcount',viewCount,tabCount,s
ysdate,10);
  COMMIT;

  --11.记录tab_complain_company_info表刷新数量
  --11.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'tab_complain_company_info';
  select count(1) into viewCount from view_complain_company_info t;
  select count(1) into tabCount from tab_complain_company_info t where t.updatedate >= trunc(sysdate)
;
  --11.2存入刷新结果记录表
  insert into tab_reflush_result values('tab_complain_company_info',viewCount,tabCount,sysdate,11);
  COMMIT;

  --12.记录tab_xcy_complain_dyys表刷新数量
  --12.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'tab_xcy_complain_dyys';
  select count(1) into viewCount from (
    select base.complain_id from (
     select t.complain_id, t.ch_name, t.value_
        from xcy_dyys_data t, w_complain_manager w
       where w.id = t.complain_id
         and w.f_serialno in (select v.f_serialno from v_complain_update_serialno v)
         and to_date(substr(w.f_serialno, 0, 8), 'yyyymmdd') = t.serial_date
     ) base group by base.complain_id
  )sub;
  select count(1) into tabCount from tab_xcy_complain_dyys t where t.updatedate >= trunc(sysda
te);
  --12.2存入刷新结果记录表
  insert into tab_reflush_result values('tab_xcy_complain_dyys',viewCount,tabCount,sysdate,12);
  COMMIT;

  --13.记录tab_view_complain_option表刷新数量
  --13.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'tab_view_complain_option';
  select count(1) into viewCount from view_complain_option t;
  select count(1) into tabCount from tab_view_complain_option t where t.updatedate
 >= trunc(sysdate);
  --13.2存入刷新结果记录表
  insert into tab_reflush_result values('tab_view_complain_option',viewCount,tabCo
unt,sysdate,13);
  COMMIT;

  --14.记录tab_complain_option_sj_max表刷新数量
  --14.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'tab_complain_option_sj_max';
  select count(1) into viewCount from (
    select last_value(id) over(partition by complain_id order by create_date ROWS
BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) last_value,
           como.id,como.INDICT_RSLT,como.VERIFICATION,como.DUTY_REASON,como.DEAL_DESC,como.comp
lain_id from
           (
               select complain.create_date create_date_complain,o.* from
                (select c.id cid,c.create_date
                           from w_complain_manager c
                           left join bpm_pro_run_his h
                           on h.businesskey = c.id
                           where c.f_serialno in (select t.f_serialno from v_complain_update_se
rialno t)
                           and h.actdefid = 'sjts:2:10000006190004') complain
                 left join xcy_complain_option o on o.complain_id = complain.cid
           ) como
  ) a where last_value = id;
  select count(1) into tabCount from tab_complain_option_sj_max t where t.updatedate >= trunc(sysdate);
  --14.2存入刷新结果记录表
  insert into tab_reflush_result values('tab_complain_option_sj_max',viewCount,tabCount,sysdate,14);
  COMMIT;

  --15.记录table_view_complain_pd_rl表刷新数量，是否快速响应工单
  --15.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'table_view_complain_pd_rl';
  select count(1) into viewCount FROM view_complain_pd_rl t where
         t.complainid in (select v.complainid from v_complain_update_serialno v);
  select count(1) into tabCount from table_view_complain_pd_rl t where t.mvdate >= trunc(sysdate);
  --15.2存入刷新结果记录表
  insert into tab_reflush_result values('table_view_complain_pd_rl',viewCount,tabCount,sysdate,15);
select dbms_metadata.get_ddl('PROCEDURE','B2B_PURGE_INSTANCE_MSGS','PRD_SOAINFRA') FROM DUAL;
  COMMIT;

  --16.记录t_complaints_details表刷新数量
  --16.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 't_complaints_details';
  SELECT count(1) into viewCount FROM v_complaints_details t where t.流水号 in
         (select v.f_serialno from v_complain_update_serialno v where v.f_serialno
not in (select del.f_serialno from w_complain_delete del where del.updatedate >=
 trunc(sysdate - 1)));
  select count(1) into tabCount from t_complaints_details t where t.mvdate >= trunc(sysdate);
  --16.2存入刷新结果记录表
  insert into tab_reflush_result values('t_complaints_details',viewCount,tabCount,sysdate,16);
  COMMIT;

  --17.记录t_complaints_details_up表刷新数量
  --17.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 't_complaints_details_up';
  SELECT count(1) into viewCount FROM v_complaints_details_up t where t.流水号 in
         (select v.f_serialno from v_complain_update_serialno v where v.f_serialno not in (select del.f_serialno fro
m w_complain_delete del where del.updatedate >= trunc(sysdate - 1)));
  select count(1) into tabCount from t_complaints_details_up t where t.mvdate >= trunc(sys
date);
  --17.2存入刷新结果记录表
  insert into tab_reflush_result values('t_complaints_details_up',viewCount,tabCount,sysdate,17
);
  COMMIT;

  --18.记录t_complaints_sleep_details表刷新数量
  --18.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 't_complaints_sleep_details';
  SELECT count(1) into viewCount FROM v_complaints_sleep_details t where t.流水号 in
  (select v.f_serialno from v_complain_update_serialno v where v.f_serialno not in (select del
.f_serialno from w_complain_delete del where del.updatedate >= trunc(sysdate - 1
)));
  select count(1) into tabCount from t_complaints_sleep_details t where t.mvdate >= trunc(sysdate);
  --18.2存入刷新结果记录表
  insert into tab_reflush_result values('t_complaints_sleep_details',viewCount,tabCount,sysdate,18);
  COMMIT;

  --19.记录table_complain_by_tsds表刷新数量
  --19.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'table_complain_by_tsds';
  SELECT count(1) into viewCount FROM view_complain_by_tsds t where t.id in
         (select v.complainid from v_complain_update_serialno v where v.f_serialno not
in (select del.f_serialno from w_complain_delete del where del.updatedate >= tru
nc(sysdate - 1)));
  select count(1) into tabCount from table_complain_by_tsds t where t.mvdate >= trunc(sysdate);
  --19.2存入刷新结果记录表
  insert into tab_reflush_result values('table_complain_by_tsds',viewCount,tabCount,sysdate,19);
  COMMIT;

  --20.记录table_complain_by_yhgsd表刷新数量
  --20.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'table_complain_by_yhgsd';
  SELECT count(1) into viewCount FROM view_complain_by_yhgsd t where t.id in
         (select v.complainid from v_complain_update_serialno v where v.f_serialno not in (select del.f_serialno from
w_complain_delete del where del.updatedate >= trunc(sysdate - 1)));
  select count(1) into tabCount from table_complain_by_yhgsd t where t.mvdate >= trunc(sysda
te);
  --20.2存入刷新结果记录表
  insert into tab_reflush_result values('table_complain_by_yhgsd',viewCount,tabCount,sysdate,20);

  COMMIT;

  --21.记录table_complain_up_by_tsds表刷新数量
  --21.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'table_complain_up_by_tsds';
  SELECT count(1) into viewCount FROM view_complain_up_by_tsds t where t.id in
         (select v.complainid from v_complain_update_serialno v where v.f_serialno not in (select del
.f_serialno from w_complain_delete del where del.updatedate >= trunc(sysdate - 1
)));
  select count(1) into tabCount from table_complain_up_by_tsds t where t.mvdate >= trunc(sysdate);
  --21.2存入刷新结果记录表
  insert into tab_reflush_result values('table_complain_up_by_tsds',viewCount,tabCount,sysdate,21);
  COMMIT;

  --22.记录table_complain_up_by_yhgsd表刷新数量
  --22.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'table_complain_up_by_yhgsd';
  SELECT count(1) into viewCount FROM view_complain_up_by_yhgsd t where t.id in
         (select v.complainid from v_complain_update_serialno v where v.f_serialno not in (select del.f_serialno from
 w_complain_delete del where del.updatedate >= trunc(sysdate - 1)));
  select count(1) into tabCount from table_complain_up_by_yhgsd t where t.mvdate >= trunc(s
ysdate);
  --22.2存入刷新结果记录表
  insert into tab_reflush_result values('table_complain_up_by_yhgsd',viewCount,tabCount,sysda
te,22);
  COMMIT;

  --23.记录table_complain_sleep_by_tsds表刷新数量
  --23.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'table_complain_sleep_by_tsds';
  SELECT count(1) into viewCount FROM view_complain_sleep_by_tsds t where t.id in
         (select v.complainid from v_complain_update_serialno v where v.f_serialno no
t in (select del.f_serialno from w_complain_delete del where del.updatedate >= t
runc(sysdate - 1)));
  select count(1) into tabCount from table_complain_sleep_by_tsds t where t.mvdate >= trunc(sysdate
);
  --23.2存入刷新结果记录表
  insert into tab_reflush_result values('table_complain_sleep_by_tsds',viewCount,tabCount,sysdate,2
3);
  COMMIT;

  --24.记录table_complain_sleep_by_yhgsd表刷新数量
  --24.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'table_complain_sleep_by_yhgsd';
  SELECT count(1) into viewCount FROM view_complain_sleep_by_yhgsd t where t.id in
         (select v.complainid from v_complain_update_serialno v where v.f_serialno not
 in (select del.f_serialno from w_complain_delete del where del.updatedate >= tr
unc(sysdate - 1)));
  select count(1) into tabCount from table_complain_sleep_by_yhgsd t where t.mvdate >= trunc(sysdate
);
  --24.2存入刷新结果记录表
  insert into tab_reflush_result values('table_complain_sleep_by_yhgsd',viewCount,tabCount,sysdate,
24);
  COMMIT;

  --25.记录tab_view_complain_for_company表刷新数量
  --25.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'tab_view_complain_for_company';
  SELECT count(1) into viewCount FROM view_complain_for_company t where t.id in
         (select v.complainid from v_complain_update_serialno v where v.f_serialno not i
n (select del.f_serialno from w_complain_delete del where del.updatedate >= trun
c(sysdate - 1)));
  select count(1) into tabCount from tab_view_complain_for_company t where t.mvdate >= trunc(sysdate);

  --25.2存入刷新结果记录表
  insert into tab_reflush_result values('tab_view_complain_for_company',viewCount,tabCount,sysdate,25
);
  COMMIT;

  --26.记录table_view_complain_pd_rl表刷新数量
  --26.1赋值
  viewCount := 0;
  tabCount := 0;
  tabName := 'tab_view_complain_for_depart';
  SELECT count(1) into viewCount FROM view_complain_for_depart t where t.complainid in
         (select v.complainid from v_complain_update_serialno v where v.f_serialno not i
n (select del.f_serialno from w_complain_delete del where del.updatedate >= trun
c(sysdate - 1)));
  select count(1) into tabCount from tab_view_complain_for_depart t where t.mvdate >= trunc(sysdate);
  --26.2存入刷新结果记录表
  insert into tab_reflush_result values('tab_view_complain_for_depart',viewCount,tabCount,sysdate,26);

  COMMIT;*/

EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    exceptionCode := sqlcode;
    exceptionInfo := SUBSTR(sqlerrm, 1, 2000);
    insert into tab_reflush_exception(proceduresname,tabname,exceptioncode,exceptioninfo)
    values('p_tab_reflush_result_complain',tabName,exceptionCode,exceptionInfo);
    commit;
END p_tab_reflush_result_complain;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','P_TAB_XCY_SYS_INTERACTIVE_LOG','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_TAB_XCY_SYS_INTERACTIVE_LOG"
AS
   var_startdate date:=sysdate;
Begin

  --此存储过程暂时不用，已将业务放到代码中进行

  --更新工单的派单信息
  --1.根据每天有变化的工单流水号进行更新
  --2.删除TAB_XCY_SYS_INTERACTIVE_LOG表中今天有变化的工单
  delete from TAB_XCY_SYS_INTERACTIVE_LOG where serial_no in (select t.f_serialno from v_comp
lain_update_serialno t);
  --3.更新TAB_XCY_INTERACTIVE_LOG_BACK表中的所有数据
  delete from tab_xcy_interactive_log_back where serial_no in (select t.f_serialno from v_c
omplain_update_serialno t);
  insert into tab_xcy_interactive_log_back
  select distinct t.serial_no
          from xcy_sys_interactive_log t,v_complain_update_serialno vSerialNo
                   where t.serial_no = vSerialNo.f_serialno
                   and t.call_method = 'withdrawWorkSheet' and t.ser_caller = 'CS
select dbms_metadata.get_ddl('PROCEDURE','B2B_PURGE_INSTANCE_MSGS_AUDIT','PRD_SOAINFRA') FROM DUAL;
CDS' and t.ser_supplier = 'CSP';
  --4.更新没有进行过回单操作的工单信息（在当天变动过的工单里面过滤）
  insert into TAB_XCY_SYS_INTERACTIVE_LOG
  select a.serial_no,to_char(a.op_time,'yyyy-MM-dd HH24:mi:ss') op_time,a.op_person,ACC
EPT_CORP,id interlogid,sysdate mvdate,'1' from
      (
       select
         first_value(id) over(partition by serial_no order by t.CREATE_DATE ROWS BETWEEN UN
BOUNDED PRECEDING AND UNBOUNDED FOLLOWING) first_id,
         id,serial_no,t.create_date op_time,op_person,
         case
             when t.call_method = 'endWorkSheet' then t.op_curorg
         else ACCEPT_CORP
         end as ACCEPT_CORP
         from xcy_sys_interactive_log t,v_complain_update_serialno vSerialNo
         where t.serial_no = vSerialNo.f_serialno
         and t.serial_no not in (select back.SERIAL_NO from TAB_XCY_INTERACTIVE_LOG_BACK back)
         and t.ser_caller = 'CSP' and t.ser_supplier = 'CSCDS'
         and t.call_method in ('renewWorkSheet','reprocessWorkSheet','newWorkSheet','endWorkSheet')
      ) a where first_id = id;
  --5.更新进行过回单操作的工单信息（在当天变动过的工单里面过滤）
  insert into TAB_XCY_SYS_INTERACTIVE_LOG
  select b.serial_no,
        to_char(log.op_time,'yyyy-MM-dd HH24:mi:ss') op_time,
        log.op_person,
        case
             when log.call_method = 'endWorkSheet' then log.op_curorg
         else ACCEPT_CORP
         end as ACCEPT_CORP,
        id interlogid,
      sysdate mvdate,'2' from xcy_sys_interactive_log log right join
      (
        --查询出驳回工单流水号对应处理信息的id
        select a.serial_no,a.nextId from
        (
               select last_value(tab.interlogid) over(partition by tab.serial_no order by tab.create_date ROWS BETWEEN
 UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) last_id,
                   tab.* from (--取按照时间排序，最新的一条
              select sub.serial_no,
                   sub.id interlogid,sub.type type1,
                   Lead(sub.type) over(partition by sub.serial_no order by sub.create_dat
e) type2,sub.op_time op_time,
                   Lead(sub.id) over(partition by sub.serial_no order by sub.create_date)
nextId,
                   sub.create_date,sub.call_method
              from
              (
               select t.serial_no,
                     case when t.call_method = 'withdrawWorkSheet' then 2
                     else 1 end as type,
                     t.op_time,t.id,t.create_date,t.call_method
              from xcy_sys_interactive_log t,v_complain_update_serialno vSerialNo
                       where t.serial_no = vSerialNo.f_serialno
                       and t.serial_no in (select back.SERIAL_NO from TAB_XCY_INTERACTIVE_LOG_BACK back)
                       and t.call_method in ('checkinWorkSheet','withdrawWorkShee
t','renewWorkSheet','reprocessWorkSheet','newWorkSheet','endWorkSheet')
              ) sub
            ) tab where tab.type1 = 2 and (tab.type2 is null or tab.type2 = 1) and tab.nextId is not null
        ) a where a.last_id = a.interlogid
      ) b on log.id = b.nextId;
  --记录每个物化视图更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_TAB_XCY_SYS_INTERACTIVE_LOG','TAB_XCY_SYS_INTERACTIVE_LOG',1,var_startdate,sysdate);
  COMMIT;
/*EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;*/
END p_TAB_XCY_SYS_INTERACTIVE_LOG;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','P_V_COMPLAIN_UP_STATISTICS','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_V_COMPLAIN_UP_STATISTICS"
AS
   var_startdate date:=sysdate;
   tabName varchar(100);
   exceptionCode number;
   exceptionInfo varchar(4000);
Begin
  --删除当天有操作的单子
  tabName := 'tab_view_complain_for_depart';
  delete from tab_view_complain_for_depart t where t.complainid in
  (select v.complainid from v_complain_update_serialno v);
  --存入最新数据
  INSERT INTO tab_view_complain_for_depart
  SELECT t.*,sysdate mvdate FROM view_complain_for_depart t where t.complainid in
  (select v.complainid from v_complain_update_serialno v where v.f_serialno not in (
select del.f_serialno from w_complain_delete del where del.updatedate >= trunc(s
ysdate - 1)));
  --记录每个物化视图更新后的数量
  insert into sys_report_proc_excute_result values
  ('p_v_complain_up_statistics','tab_view_complain_for_depart',(select count(1) from tab_view_complain_for_depart),
var_startdate,sysdate);
    COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    exceptionCode := sqlcode;
    exceptionInfo := SUBSTR(sqlerrm, 1, 2000);
    insert into tab_reflush_exception(proceduresname,tabname,exceptioncode,exception
info)
    values('p_v_complain_up_statistics',tabName,exceptionCode,exceptionInfo);
    commit;
END p_v_complain_up_statistics;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','B2B_PURGE_INST_MSGS_AUDIT_PS5','PRD_SOAINFRA') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','SP_BUG_EMOS','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."SP_BUG_EMOS" as
vd_date date;
begin
  select * into vd_date from bug_emos_date;
  insert into csp_cscds_eoms(serail_no,flow_key,from_source)
  select a.serial_no,'tsgl','3' from (
  select distinct regexp_substr(t.subject, '\d{20}') serial_no
            from SYS_MESSAGE_LOG t
           where sendtime >= vd_date
             and RECEIVER = '岳龙'
             and substr(t.subject,
                        instr(t.subject, '服务调用方：', -1, 1) + 6,
                        (instr(t.subject, '服务提供方：', 1, 1) - 27)) = 'EMOS'
                        ) a,csp_cscds_eoms b where a.serial_no is not null
                        and a.serial_no = b.serail_no(+) and b.serail_no is null;

  update Csp_Cscds_Eoms t
     set t.from_source = '3'
   where t.serail_no in
         (select regexp_substr(t.subject, '\d{20}') serial_no
            from SYS_MESSAGE_LOG t
           where sendtime >= vd_date
             and RECEIVER = '岳龙'
             and substr(t.subject,
                        instr(t.subject, '服务调用方：', -1, 1) + 6,
                        (instr(t.subject, '服务提供方：', 1, 1) - 27)) = 'EMOS');
  update bug_emos_date set date_ = sysdate;
  insert into bug_emos_date_log values (sysdate);
end;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','B2B_PURGE_INST_MSGS_PS5','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','B2B_REFRESH_MV','PRD_SOAINFRA') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','SP_DELETE_DANZI','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."SP_DELETE_DANZI" (pv_serialno varchar2) as
/**
*按流水号删除单子
**/
begin
  for i in (select t.f_actinstid, b.runid, t.rowid rd,t.id,t.f_serialno
              from w_complain_manager t, bpm_pro_run b
             where
             t.f_serialno =pv_serialno
               and t.f_actinstid = b.actinstid(+)) loop
    insert into bak_ACT_RU_VARIABLE
      select * from ACT_RU_VARIABLE where PROC_INST_ID_ = i.f_actinstid;
    delete from ACT_RU_VARIABLE where PROC_INST_ID_ = i.f_actinstid;
    insert into bak_act_ru_identitylink
      select *
        from act_ru_identitylink
       where task_id_ in (select id_
                            from act_ru_task
                           where PROC_INST_ID_ = i.f_actinstid)
          or PROC_INST_ID_ = i.f_actinstid;
    delete from act_ru_identitylink
     where task_id_ in
           (select id_ from act_ru_task where PROC_INST_ID_ = i.f_actinstid)
        or PROC_INST_ID_ = i.f_actinstid;

    insert into bak_ACT_RU_TASK
      select * FROM ACT_RU_TASK where PROC_INST_ID_ = i.f_actinstid;
    DELETE FROM ACT_RU_TASK where PROC_INST_ID_ = i.f_actinstid;

    insert into bak_ACT_RU_EXECUTION
      select * FROM ACT_RU_EXECUTION where PROC_INST_ID_ = i.f_actinstid;
    delete from ACT_RU_EXECUTION where PROC_INST_ID_ = i.f_actinstid;

    insert into bak_BPM_PRO_RUN
      select * FROM BPM_PRO_RUN where runId = i.runid;
    DELETE FROM BPM_PRO_RUN WHERE runId = i.runid;

    insert into bak_ACT_HI_PROCINST
      select *
        FROM ACT_HI_PROCINST
       WHERE PROC_INST_ID_ IN (SELECT run.ACTINSTID
                                 FROM BPM_PRO_RUN_HIS run
                                WHERE run.RUNID = i.runid);
    DELETE FROM BPM_PRO_RUN_HIS WHERE runId = i.runid;
    DELETE FROM ACT_HI_PROCINST
     WHERE PROC_INST_ID_ IN (SELECT run.ACTINSTID
                               FROM BPM_PRO_RUN_HIS run
                              WHERE run.RUNID = i.runid);
    DELETE FROM BPM_PRO_RUN_HIS WHERE runId = i.runid;

    insert into bak_xcy_complain_option
    select * from xcy_complain_option t where t.complain_id = i.id;

    delete from  xcy_complain_option t where t.complain_id = i.id;

    insert into bak2_w_complain_manager
      select * FROM w_complain_manager where rowid = i.rd;
    --给w_complain_delete表增加删除记录，方便更新报表数据
    insert into w_complain_delete values
    (i.f_serialno, i.id, sysdate);
    update W_COMPLAIN_UPDATETIME t set t.updatetime = sysdate-1 where t.f_serialno=i.f_serialno;
    delete from w_complain_manager where rowid = i.rd;
    delete from csp_cscds_eoms t where t.serail_no=i.f_serialno;
    delete from t_complaints_details t where t.流水号 = i.f_serialno;

    delete from t_complaints_details_up t where t.流水号 = i.f_serialno;
    delete from t_complaints_sleep_details t where t.流水号 = i.f_serialno;
   /* delete from TABLE_COMPLAIN_BY_tsds t where t.f_serialno = i.f_serialno;
    delete from TABLE_COMPLAIN_BY_YHGSD t where t.f_serialno= i.f_serialno;*/
    delete from f8_report t where t.f_serialno = i.f_serialno;
  end loop;
  commit;
end;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','B2B_RESTORE_PROCEDURE','PRD_SOAINFRA') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','SP_ESB_LOG_SERIALE_NO','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."SP_ESB_LOG_SERIALE_NO" (PD_star date,
                                                  pd_end  date) as
  /*
  * 生成ESB_log 序列号
  */
  cursor esb_log_cur is
    select request_body, id, t.create_date
      from esb_log t
     where t.create_date between pd_star and pd_end
       and t.type_ = 'HUWEI_ESB_CSCDS';
  vc_body        clob;
  vn_id          number;
  vd_create_date date;
  vv_serial_no   varchar2(30);
begin
  open esb_log_cur;
  loop
    fetch esb_log_cur
      into vc_body, vn_id, vd_create_date;
    exit when esb_log_cur%notfound;

    begin
      select atts.att1
        into vv_serial_no
select dbms_metadata.get_ddl('PROCEDURE','CLOSE_FILE','PRD_SOAINFRA') FROM DUAL;
        from dual,
             xmltable(xmlnamespaces('http://schemas.xmlsoap.org/soap/envelope/' as
                                    "soapenv",
                                    'http://10.16.193.129:8888/cscds/service/CSC
DSProcessSheet?wsdl' as
                                    "ns1",
                                    'http://www.w3.org/2001/XMLSchema-instance' as
                                    "xsi"),
                      '/soapenv:Envelope/soapenv:Body/ns1:newWorkSheet'
                      passing xmltype(vc_body) columns att1 varchar2(23) path
                      'ns1:arg0') atts;

      insert into esb_log_ser_no
        (esb_log_id, esb_log_create_date, serial_no)
      values
        (vn_id, vd_create_date, vv_serial_no);
    exception
      when OTHERS  then
        null;
    end;
  end loop;
  close esb_log_cur;
end;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','DEBUG_PURGE','PRD_SOAINFRA') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','SP_INFO_SYS_TBS_JK','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."SP_INFO_SYS_TBS_JK" as
begin
  insert into info_sys_tbs
    SELECT UPPER(F.TABLESPACE_NAME) "表空间名",
　　D.TOT_GROOTTE_MB "表空间大小(M)",
　　D.TOT_GROOTTE_MB - F.TOTAL_BYTES "已使用空间(M)",
　　TO_CHAR(ROUND((D.TOT_GROOTTE_MB - F.TOTAL_BYTES) / D.TOT_GROOTTE_MB * 100,2),'990.99') || '%'
"使用比",
　　F.TOTAL_BYTES "已扩展空闲空间(M)",
    (SELECT free_space_mb+free_allocate_mb FROM dba_tablespace_free a where a.tablespace_name= f.tablespace_name) "总剩
余空间",
　　F.MAX_BYTES "最大块(M)"   ,sysdate create_date
FROM (SELECT TABLESPACE_NAME,
　　ROUND(SUM(BYTES) / (1024 * 1024), 2) TOTAL_BYTES,
　　ROUND(MAX(BYTES) / (1024 * 1024), 2) MAX_BYTES
FROM SYS.DBA_FREE_SPACE
GROUP BY TABLESPACE_NAME) F,
　　(SELECT DD.TABLESPACE_NAME,
　　ROUND(SUM(DD.BYTES) / (1024 * 1024), 2) TOT_GROOTTE_MB
FROM SYS.DBA_DATA_FILES DD
GROUP BY DD.TABLESPACE_NAME) D
WHERE D.TABLESPACE_NAME = F.TABLESPACE_NAME  and f.TABLESPACE_NAME='TBS_BMP_DATA'
ORDER BY 3 desc;
end;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','EDN_ADD_SHARED_CLUSTER','PRD_SOAINFRA') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','SP_LYL_SP_YWMC','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."SP_LYL_SP_YWMC" (pd_date date default sysdate) as
begin
  /*

  select * from xcy_dyys_data t where t.complain_id=40000063055481 ;
select * from w_complain_manager w where w.f_serialno = '20171029101255681332';
  ,sfmy.f_sfmy 派单是否满意
      ,sfmy.f_sfmy_yj 派单不满意原因
      ,sfmy.f_sfmy_bz 派单不满意原因备注
      ,sfmy.f_sp_ywmc SP业务名称
*/
  for i in (select t.rowid rd, y.value_
              from w_sfmy t, XCY_DYYS_DATA y
             where y.complain_id = t.f_complainId
               and y.ch_name = 'sp业务名称'
               and t.create_date > trunc(pd_date) - 1
               and t.create_date < pd_date) loop
    update w_sfmy t set t.f_sp_ywmc = i.value_ where t.rowid = i.rd;
  end loop;
end;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','EDN_CONTEXT_GET','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','EDN_DECOMPRESS_EVENT','PRD_SOAINFRA') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','SP_UPDATE_REPORT','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."SP_UPDATE_REPORT" (pv_serialno varchar2,pv_complainId number) as
/**
*按流水号删除并更新报表中的单子
**/
begin
  --F8-普通
  delete from t_complaints_details t where t.流水号 = pv_serialno;
  commit;

  --F8-升级
  delete from t_complaints_details_up t where t.流水号 = pv_serialno;
  commit;
  --存入最新数据
 /* INSERT INTO t_complaints_details_up
  SELECT t.*,sysdate mvdate FROM v_complaints_details_up t where t.流水号 = pv_seria
lno;
  commit;*/

  --F8-休眠
  delete from t_complaints_sleep_details t where t.流水号 = pv_serialno;
  commit;
  --存入最新数据
  INSERT INTO t_complaints_sleep_details
  SELECT t.*,sysdate mvdate FROM v_complaints_sleep_details t where t.流水号 = p
v_serialno;
  commit;

  --F12-普通
  delete from table_complain_by_tsds t where t.id = pv_complainId;
  delete from table_complain_by_yhgsd t where t.id = pv_complainId;
  commit;
  --存入最新数据
  INSERT INTO table_complain_by_tsds
  SELECT t.*,sysdate mvdate FROM view_complain_by_tsds t where t.id = pv_complainId;
  INSERT INTO table_complain_by_yhgsd
  SELECT t.*,sysdate mvdate FROM view_complain_by_yhgsd t where t.id = pv_complainId;

  --F12-升级
  delete from table_complain_up_by_tsds t where t.id = pv_complainId;
  delete from table_complain_up_by_yhgsd t where t.id = pv_complainId;
  --存入最新数据
  INSERT INTO table_complain_up_by_tsds
  SELECT t.*,sysdate mvdate FROM view_complain_up_by_tsds t where t.id = pv_complai
nId;
  INSERT INTO table_complain_up_by_yhgsd
  SELECT t.*,sysdate mvdate FROM view_complain_up_by_yhgsd t where t.id = pv_complainId;

  --F12-休眠
  delete from table_complain_sleep_by_tsds t where t.id = pv_complainId;
  delete from table_complain_sleep_by_yhgsd t where t.id = pv_complainId;
  --存入最新数据
  INSERT INTO table_complain_sleep_by_tsds
  SELECT t.*,sysdate mvdate FROM view_complain_sleep_by_tsds t where t.id = pv_complainId;
  INSERT INTO table_complain_sleep_by_yhgsd
  SELECT t.*,sysdate mvdate FROM view_complain_sleep_by_yhgsd t where t.id = pv_complainId;

  commit;
end sp_update_report;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','EDN_DEQUEUE_BUS_EVENT','PRD_SOAINFRA') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','LYL_STAT','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."LYL_STAT" is

  CURSOR STALE_TABLE IS
    SELECT OWNER,
           SEGMENT_NAME,
           CASE
             WHEN SIZE_GB < 0.5 THEN
              30
             WHEN SIZE_GB >= 0.5 AND SIZE_GB < 1 THEN
              20
             WHEN SIZE_GB >= 1 AND SIZE_GB < 5 THEN
              10
             WHEN SIZE_GB >= 5 AND SIZE_GB < 10 THEN
              5
             WHEN SIZE_GB >= 10 THEN
              1
           END AS PERCENT,
           8 AS DEGREE
      FROM (SELECT OWNER,
                   SEGMENT_NAME,
                   SUM(BYTES / 1024 / 1024 / 1024) SIZE_GB
              FROM DBA_SEGMENTS
             WHERE OWNER = 'CSCDS'
               AND SEGMENT_NAME IN
                   (SELECT /*+ UNNEST */
                    DISTINCT TABLE_NAME
                      FROM DBA_TAB_STATISTICS
                     WHERE (LAST_ANALYZED IS NULL OR STALE_STATS = 'YES')
                       AND OWNER = 'CSCDS')
               and SEGMENT_NAME not like '%LYL%'
               and SEGMENT_NAME not like '%LOG'
               and SEGMENT_NAME not like '%BAK%'

             GROUP BY OWNER, SEGMENT_NAME);
BEGIN
  DBMS_STATS.FLUSH_DATABASE_MONITORING_INFO;
  FOR STALE IN STALE_TABLE LOOP
    DBMS_STATS.GATHER_TABLE_STATS(OWNNAME          => STALE.OWNER,
                                  TABNAME          => STALE.SEGMENT_NAME,
                                  ESTIMATE_PERCENT => STALE.PERCENT,
                                  METHOD_OPT       => 'for all columns size repeat',
                                  DEGREE           => 8,
                                  GRANULARITY      => 'ALL',
                                  CASCADE          => TRUE);
  END LOOP;

  begin
    for i in (select t.groupname, b.牵头部门, b.rowid rd
                from xcy_info_groupinfo t, t_complaints_details_up b
               where t.workgroupid = b.lastqtid
                 and t.groupname <> b.牵头部门) loop
      update t_complaints_details_up a
         set a.牵头部门 = i.groupname
       where a.rowid = i.rd;
    end loop;
  end;
END;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','EDN_DEQUEUE_OAOO_DELIVERY','PRD_SOAINFRA') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','SP_PRE_EXP','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."SP_PRE_EXP" (P_groupId varchar2) as
/* 2018年5月26日22:30:23 更新基础表的编码值*/
  cursor exp_cursor is
    select pre.rowid    rd,
           tsfl.sortid  tsfl_id,
           tsds.gradeid tsds_id,
           gsds.gradeid gsds_id
      from XCY_COMPLAINT_PRE_EXP        pre,
           dict.t_sr_servicerequesttype tsfl,
           dict.XCY_DICT_COMPLAINTCITY  tsds,
           dict.XCY_DICT_COMPLAINTCITY  gsds

     where pre.groupid = P_groupId
       and pre.servicerequesttype = tsfl.fullname(+)
       and pre.complaintcity = tsds.name(+)
       and pre.khrsgsd = gsds.name(+);
  v_tsfl_id varchar2(200);
  v_tsds_id varchar2(20);
  v_gsds_id varchar2(20);
  v_rowid   ROWID;

begin
  open exp_cursor; --打开游标
  loop
    fetch exp_cursor
      into v_rowid, v_tsfl_id, v_tsds_id, v_gsds_id; --提取游标数据赋值给变量
    exit when exp_cursor%notfound;
    update XCY_COMPLAINT_PRE_EXP p
       set p.complaintcityid      = v_tsds_id,
           p.khrsgsdid            = v_gsds_id,
           p.servicerequesttypeid = v_tsfl_id
     where rowid = v_rowid;
  end loop;
  close exp_cursor; --关闭游标
end;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','EDN_DISABLE_SUBSCRIPTION','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','EDN_ENABLE_LOGGING','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','EDN_ENABLE_SUBSCRIPTION','PRD_SOAINFRA') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','DELE_XCY_NUM_LOG','NMYD')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "NMYD"."DELE_XCY_NUM_LOG" as
  ---删除待办数日志，释放空间脚本
  begin
    EXECUTE IMMEDIATE 'truncate table  xcy_num_log';--清空数据和表空间
  end dele_xcy_num_log;




SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','EDN_ENQUEUE_BUSINESS_EVENT','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','EDN_ENQUEUE_OAOO_DELIVERY','PRD_SOAINFRA') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','XCY_IMB_BACKUP','NMYD')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "NMYD"."XCY_IMB_BACKUP" as
  ---新公文备份脚本
  begin
    insert into XCY_LOG_IBMLOG_20171114 select LOG_ID,
         LOG_TYPE,
         USERNAME,
         APP_TYPE,
         APP_CODE,
         ACTION_NAME,
         '' as POST_NAME,  --用空 替换 大文本，释放表空间
         CREATE_DATE,
         '' as RETURN_VALUE,   --用空 替换 大文本，释放表空间
         REQUEST_DATE,
         RETURN_DATE,
         PROCESS_DATE,
         CLIENT_TYPE,
         CLIENT_VERSION,
         REQUESE_URL,
         YL1,
         YL2,
         YL3
    from XCY_LOG_IBMLOG;--数据备份
    EXECUTE IMMEDIATE 'truncate table  XCY_LOG_IBMLOG';--首先删除备份表中数据
  end xcy_imb_backup;




SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','EDN_ERROR_HANDLER','PRD_SOAINFRA') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','XCY_KHTS_BACKUP','NMYD')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "NMYD"."XCY_KHTS_BACKUP" as
  ---新公文备份脚本
  begin
    insert into XCY_LOG_KHTSLOG_20171106 select LOG_ID,
         LOG_TYPE,
         USERNAME,
         APP_TYPE,
         APP_CODE,
         ACTION_NAME,
         '' as POST_NAME,  --用空 替换 大文本，释放表空间
         CREATE_DATE,
         '' as RETURN_VALUE,   --用空 替换 大文本，释放表空间
         REQUEST_DATE,
         RETURN_DATE,
         PROCESS_DATE,
         CLIENT_TYPE,
         CLIENT_VERSION,
         REQUESE_URL,
         YL1,
         YL2,
         YL3
    from XCY_LOG_KHTSLOG;--数据备份
    EXECUTE IMMEDIATE 'truncate table  XCY_LOG_KHTSLOG';--首先删除备份表中数据
  end xcy_khts_backup;




SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','EDN_EVENT_AGENT','PRD_SOAINFRA') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','XCY_OANEW_BACKUP','NMYD')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "NMYD"."XCY_OANEW_BACKUP" as
  ---新公文备份脚本
  begin
    insert into xcy_log_oanewlog_20170503 select LOG_ID,
         LOG_TYPE,
         USERNAME,
         APP_TYPE,
         APP_CODE,
         ACTION_NAME,
         '' as POST_NAME,  --用空 替换 大文本，释放表空间
         CREATE_DATE,
         '' as RETURN_VALUE,   --用空 替换 大文本，释放表空间
         REQUEST_DATE,
         RETURN_DATE,
         PROCESS_DATE,
         CLIENT_TYPE,
         CLIENT_VERSION,
         REQUESE_URL,
         YL1,
         YL2,
         YL3
    from xcy_log_oanewlog;--数据备份
    EXECUTE IMMEDIATE 'truncate table  xcy_log_oanewlog';--首先删除备份表中数据
  end xcy_oanew_backup;




SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','EDN_FILTER_AND_DELIVER_EVENT','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','EDN_INIT_SHARED_EDN','PRD_SOAINFRA') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','XCY_VERSION_DOWNLOAD_BACKUP','APPVERSION')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "APPVERSION"."XCY_VERSION_DOWNLOAD_BACKUP" as
---APP版本下载备份脚本
begin
  insert into xcy_log_downloads_bak select d.id,
       d.code,
       d.version,
       d.applicationtype,
       d.createdate,
       to_char(d.createdate, 'YYYY') years,
       substr(to_char(d.createdate, 'yyyy-mm'), 0, 7) months,
       to_char(d.createdate, 'yyyy-mm-dd') days
  from xcy_log_downloads d;
  EXECUTE IMMEDIATE 'truncate table  xcy_log_downloads';
end xcy_version_download_backup;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','EDN_INTERNAL_DECOMPRESS_EVENT','PRD_SOAINFRA') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','SP_DELETE_DANZI_BL_F8','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."SP_DELETE_DANZI_BL_F8" (pv_serialno varchar2) as
/**
*按流水号删除单子
**/
begin
  for i in (select t.f_actinstid, b.runid, t.rowid rd,t.id,t.f_serialno
              from w_complain_manager t, bpm_pro_run b
             where
             t.f_serialno =pv_serialno
               and t.f_actinstid = b.actinstid(+)) loop
    insert into bak_ACT_RU_VARIABLE
      select * from ACT_RU_VARIABLE where PROC_INST_ID_ = i.f_actinstid;
    delete from ACT_RU_VARIABLE where PROC_INST_ID_ = i.f_actinstid;
    insert into bak_act_ru_identitylink
      select *
        from act_ru_identitylink
       where task_id_ in (select id_
                            from act_ru_task
                           where PROC_INST_ID_ = i.f_actinstid)
          or PROC_INST_ID_ = i.f_actinstid;
    delete from act_ru_identitylink
     where task_id_ in
           (select id_ from act_ru_task where PROC_INST_ID_ = i.f_actinstid)
        or PROC_INST_ID_ = i.f_actinstid;

select dbms_metadata.get_ddl('PROCEDURE','EDN_INTERNAL_PUBLISH_EVENT','PRD_SOAINFRA') FROM DUAL;
    insert into bak_ACT_RU_TASK
      select * FROM ACT_RU_TASK where PROC_INST_ID_ = i.f_actinstid;
    DELETE FROM ACT_RU_TASK where PROC_INST_ID_ = i.f_actinstid;

    insert into bak_ACT_RU_EXECUTION
      select * FROM ACT_RU_EXECUTION where PROC_INST_ID_ = i.f_actinstid;
    delete from ACT_RU_EXECUTION where PROC_INST_ID_ = i.f_actinstid;

    insert into bak_BPM_PRO_RUN
      select * FROM BPM_PRO_RUN where runId = i.runid;
    DELETE FROM BPM_PRO_RUN WHERE runId = i.runid;

    insert into bak_ACT_HI_PROCINST
      select *
        FROM ACT_HI_PROCINST
       WHERE PROC_INST_ID_ IN (SELECT run.ACTINSTID
                                 FROM BPM_PRO_RUN_HIS run
                                WHERE run.RUNID = i.runid);
    DELETE FROM BPM_PRO_RUN_HIS WHERE runId = i.runid;
    DELETE FROM ACT_HI_PROCINST
     WHERE PROC_INST_ID_ IN (SELECT run.ACTINSTID
                               FROM BPM_PRO_RUN_HIS run
                              WHERE run.RUNID = i.runid);
    DELETE FROM BPM_PRO_RUN_HIS WHERE runId = i.runid;

    insert into bak_xcy_complain_option
    select * from xcy_complain_option t where t.complain_id = i.id;

    delete from  xcy_complain_option t where t.complain_id = i.id;

    insert into bak2_w_complain_manager
      select * FROM w_complain_manager where rowid = i.rd;

  end loop;
  commit;
end;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','EDN_LOG_MESSAGE','PRD_SOAINFRA') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','XCY_PRD_STARTPAGE_HISTORY','NMYD')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "NMYD"."XCY_PRD_STARTPAGE_HISTORY" (updaNum OUT NUMBER) as
---APP启动页历史数据备份
begin
  SELECT count(1) INTO updaNum FROM  xcy_v_startpage_history;

  insert into xcy_startpage_history select * from xcy_v_startpage_history ;
  EXECUTE IMMEDIATE 'delete from xcy_startpage where id in (select id from xcy_v_startpage_history) ';
  commit;
end xcy_prd_startpage_history;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','EDN_LOOKUP_CLUSTER_ID','PRD_SOAINFRA') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','P_TABLE_COMPLAIN_F8_JTKD','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_TABLE_COMPLAIN_F8_JTKD"
AS
   var_startdate date:=sysdate;
   tabName varchar(100);
   exceptionCode number;
   exceptionInfo varchar(4000);
Begin
  --删除当天有操作的单子
  tabName := 't_complaints_details_jtkd';
  delete from t_complaints_details_jtkd t where t.流水号 in
  (select v.f_serialno from v_complain_update_serialno_30 v) or t.流水号 in
  (select t.f_serialno from w_complain_delete t where t.updatedate >= trunc(sysdate - 1));
  --execute immediate 'truncate table t_complaints_details';
  --存入最新数据
  INSERT INTO t_complaints_details_jtkd
  select t.id,
       t.createtime,
       t.userbrandid,
       t.servicerequesttypeid,
       t.belongcityid,
       t.complaintcityid,
       t.status,
       t.channelid,
       t.流水号,
       t.客户投诉内容,
       t.反馈结果,
       t.处理部门,
       t.用户投诉地市,
       t.用户归属地市,
       t.用户归属营业部名称,
       t.用户归属营业厅名称,
       t.用户姓名,
       t.受理号码,
       t.客户类型,
       t.覆盖类型,
       t.受理工号,
       t.投诉时间,
       t.派单人,
       t.派单时间,
       t.反馈人,
       t.反馈时间,
       t.牵头至反馈流转人,
       t.协助至牵头流转人,
       t.流转时间,
       t.回单时间,
       t.反馈部门,
       t.处理时长,
        t.工作时,
        是否逾期,
       t.是否重复 from V_COMPLAINTS_DETAILS_JTKD t where t.流水号 in
  --SELECT t.*,sysdate mvdate FROM v_complaints_details t where t.流水号 in
 (select v.f_serialno from v_complain_update_serialno_30 v where v.f_serialno not in (select del.f_s
erialno from w_complain_delete del where del.updatedate >= trunc(sysdate - 1)));

  commit;
  --记录每个物化视图更新后的数量
  insert into sys_report_proc_excute_result values
  ('V_COMPLAINTS_DETAILS_JTKD','V_COMPLAINTS_DETAILS_JTKD',1,var_startdate,sysdate);
  COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    exceptionCode := sqlcode;
    exceptionInfo := SUBSTR(sqlerrm, 1, 2000);
    insert into tab_reflush_exception(proceduresname,tabname,exceptioncode,exceptioninfo)
    values('p_table_complain_F8',tabName,exceptionCode,exceptionInfo);
    commit;
END p_table_complain_F8_jtkd;


select dbms_metadata.get_ddl('PROCEDURE','EDN_PUBLISH_COMPRESSED_EVENT','PRD_SOAINFRA') FROM DUAL;

SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','XCY_PRD_MODEL_COUNTGATHER','NMYD')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "NMYD"."XCY_PRD_MODEL_COUNTGATHER" as
---每月月底1号执行此脚本
begin
 -- if 1=2 then
 /*模块统计*/
  insert into nmyd.XCY_model_log_countNum select * from nmyd.XCY_model_log_countNum_
view k where k.monthss=TO_CHAR(LAST_DAY(ADD_MONTHS(SYSDATE, -2)) + 1,'YYYY-MM');


  commit;
  /*登录统计*/
  insert into nmyd.XCY_mon_loginfailOrsuccess select * from nmyd.XCY_loginfailOrsuccess_view k wh
ere k.monthss=TO_CHAR(LAST_DAY(ADD_MONTHS(SYSDATE, -2)) + 1,'YYYY-MM');
   commit;
 --  end if;
end xcy_prd_model_countGather;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','EDN_PUBLISH_EVENT','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','EDN_REGISTER_AGENT','PRD_SOAINFRA') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','SP_GDSJ_200313','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."SP_GDSJ_200313" (p_sn varchar2) AS
  V_d_CALLTIME  DATE;
  exceptionCode number;
  exceptionInfo varchar(4000);
begin
  select call_time
    INTO V_d_CALLTIME
    from (select t.call_time
            from cscds.xcy_sys_interactive_log t
           where t.serial_no = p_sn
             and t.ser_supplier = 'CSCDS'
             and t.ser_caller = 'CSP'
             and t.call_method in ('checkinWorkSheet', 'endWorkSheet')
           order by t.create_date)
   where rownum < 2;

  DELETE FROM lyl_bug_200313_02 WHERE SN = P_SN;
  INSERT INTO lyl_bug_200313_02
    (SN, CALL_TIME)
  VALUES
    (P_SN, V_d_CALLTIME);
exception
  WHEN OTHERS THEN
    exceptionCode := sqlcode;
    exceptionInfo := SUBSTR(sqlerrm, 1, 2000);
    insert into sp_rcwzl_date_exception
      (sn, message)
    values
      (p_sn, exceptionCode || ' sp_gdsj_200313 : ' || exceptionInfo);
end;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','EDN_REMOVE_SHARED_CLUSTER','PRD_SOAINFRA') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','P_DUBAN_UPDATE_DB_COUNT_BZQ','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_DUBAN_UPDATE_DB_COUNT_BZQ" (pv_tsfl in varchar) as
  vn_db_count number;
begin
  update XCY_DB_TSFL_BZQ t
     set t.db_count = t.db_count + 1
   where t.tsfl = pv_tsfl;
end;




SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','EDN_SUBSCRIBE','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','EDN_SUBSCRIBE_IMMEDIATE','PRD_SOAINFRA') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','P_DUBAN_UPDATE_DB_COUNT_CS','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_DUBAN_UPDATE_DB_COUNT_CS" (pv_tsfl in varchar) as
  vn_db_count number;
begin
  update XCY_DB_TSFL_CS t
     set t.db_count = t.db_count + 1
   where t.tsfl = pv_tsfl;
end;




SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','EDN_SUBSCRIPTION_EXISTS','PRD_SOAINFRA') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','P_DUBAN_UPDATE_DB_COUNT_SJ','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_DUBAN_UPDATE_DB_COUNT_SJ" (pv_tsfl in varchar) as
  vn_db_count number;
begin
  update XCY_DB_TSFL_SJ t
     set t.db_count = t.db_count + 1
   where t.tsfl = pv_tsfl;
end;




SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','EDN_UNINIT_SHARED_EDN','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','EDN_UNREGISTER_AGENT','PRD_SOAINFRA') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','P_INSERT_DBYJ_SEND_SN_BZQ','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_INSERT_DBYJ_SEND_SN_BZQ" (v_tsfl   VARCHAR2,
                                                        v_byr    VARCHAR2,
                                                        v_sendId NUMBER) as
  v_send_serialno_id NUMBER(20); --发送流水号表id
  v_temp_tsfl_count number; -- 查询是不是存在tsfl
begin
  -- 2019年12月5日19:59:50
  select count(1) into v_temp_tsfl_count
  from xcy_yujing_tsfl_dict_bzq
  where tsfl_id = v_tsfl;

  if v_temp_tsfl_count = 0 then
    --根据投诉分类，查询昨天16:30到今天16:30之间创建的工单流水号
    for i in (select c.f_serialno
                from w_complain_manager c
               where c.servicerequesttypeid = v_tsfl
                 and nvl(c.consultationorcomplaint,'0') = '0'
                 and c.create_date >= trunc(sysdate - 1) + ((17 * 2 + 1) / (24 *
2))
                 and c.create_date < trunc(sysdate) + ((17 * 2 + 1) / (24 * 2))) loop
      v_send_serialno_id := 0;
      --根据v_sendId和v_serialNo来查看w_dbyj_send_serialno_bzq表中是否有记录
      begin
        select t.id
          into v_send_serialno_id
          from w_dbyj_send_serialno_bzq t
         where t.f_sendid = v_sendId
           and t.f_serialno = i.f_serialno;
        --如果记录存在，就更新记录
        if (v_byr = 0) then
          update w_dbyj_send_serialno_bzq
             set f_blue = 'true'
           where id = v_send_serialno_id;
        elsif (v_byr = 1) then
          update w_dbyj_send_serialno_bzq
             set f_yellow = 'true'
           where id = v_send_serialno_id;
        elsif (v_byr = 2) then
          update w_dbyj_send_serialno_bzq
             set f_red = 'true'
           where id = v_send_serialno_id;
        end if;
      EXCEPTION
        WHEN others THEN
          DBMS_OUTPUT.PUT_LINE(i.f_serialno || ':' || SQLCODE || '---' || SQLERRM);
          --如果不存在，就新增一条
          insert into w_dbyj_send_serialno_bzq
            (ID, F_SENDID, F_SERIALNO, F_BLUE, F_YELLOW, F_RED)
          values
            (SEQ_DBYJ_SEND_SERIALNO.Nextval,
             v_sendId,
             i.f_serialno,
             decode(v_byr, 0, 'true', null),
             decode(v_byr, 1, 'true', null),
             decode(v_byr, 2, 'true', null));
      end;
    end loop;
  else
    -- 需要通过字典表来处理
    for i in (select c.f_serialno
                from w_complain_manager c,xcy_yujing_tsfl_dict_bzq d -- 2019年12月5日19:24:38
               where d.tsfl_id = v_tsfl
                 and d.tsfl_real_id = c.servicerequesttypeid
                 and nvl(c.consultationorcomplaint,'0') = '0'
                 and c.create_date >= trunc(sysdate - 1) + ((17 * 2 + 1) / (24 * 2))
                 and c.create_date < trunc(sysdate) + ((17 * 2 + 1) / (24 * 2))) loop
      v_send_serialno_id := 0;
      --根据v_sendId和v_serialNo来查看w_dbyj_send_serialno_bzq表中是否有记录
      begin
        select t.id
          into v_send_serialno_id
          from w_dbyj_send_serialno_bzq t
         where t.f_sendid = v_sendId
           and t.f_serialno = i.f_serialno;
        --如果记录存在，就更新记录
        if (v_byr = 0) then
          update w_dbyj_send_serialno_bzq
             set f_blue = 'true'
           where id = v_send_serialno_id;
        elsif (v_byr = 1) then
          update w_dbyj_send_serialno_bzq
             set f_yellow = 'true'
           where id = v_send_serialno_id;
        elsif (v_byr = 2) then
          update w_dbyj_send_serialno_bzq
             set f_red = 'true'
           where id = v_send_serialno_id;
        end if;
      EXCEPTION
        WHEN others THEN
          DBMS_OUTPUT.PUT_LINE(i.f_serialno || ':' || SQLCODE || '---' || SQLERRM)
;
          --如果不存在，就新增一条
          insert into w_dbyj_send_serialno_bzq
            (ID, F_SENDID, F_SERIALNO, F_BLUE, F_YELLOW, F_RED)
          values
            (SEQ_DBYJ_SEND_SERIALNO.Nextval,
             v_sendId,
             i.f_serialno,
             decode(v_byr, 0, 'true', null),
             decode(v_byr, 1, 'true', null),
             decode(v_byr, 2, 'true', null));
      end;
    end loop;
  end if;


  commit;
end;




SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','EDN_UNSUBSCRIBE','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','EDN_UNSUBSCRIBE_ALL','PRD_SOAINFRA') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','P_INSERT_DBYJ_SEND_SN_CS','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_INSERT_DBYJ_SEND_SN_CS" (v_tsfl   VARCHAR2,
                                                        v_byr    VARCHAR2,
                                                        v_sendId NUMBER) as
  v_send_serialno_id NUMBER(20); --发送流水号表id
  v_temp_tsfl_count number; -- 查询是不是存在tsfl
begin
  -- 2019年12月5日19:59:50
  select count(1) into v_temp_tsfl_count
  from xcy_yujing_tsfl_dict_cs
  where tsfl_id = v_tsfl;

  if v_temp_tsfl_count = 0 then
select dbms_metadata.get_ddl('PROCEDURE','GET_WIREMESSAGE_PID','PRD_SOAINFRA') FROM DUAL;
    --根据投诉分类，查询昨天16:30到今天16:30之间创建的工单流水号
    for i in (select c.f_serialno
                from w_complain_manager c,bpm_pro_run r
               where c.servicerequesttypeid = v_tsfl
                 and nvl(c.consultationorcomplaint,'0') = '0'
                 and c.create_date >= trunc(next_day(sysdate-8-8,6))
                 and c.create_date < trunc(next_day(sysdate-8,6))
                 and c.f_actinstid = r.actinstid and r.status  in ('1')  ) loop
      v_send_serialno_id := 0;
      --根据v_sendId和v_serialNo来查看w_dbyj_send_serialno_cs表中是否有记录
      begin
        select t.id
          into v_send_serialno_id
          from w_dbyj_send_serialno_cs t
         where t.f_sendid = v_sendId
           and t.f_serialno = i.f_serialno;
        --如果记录存在，就更新记录
        if (v_byr = 0) then
          update w_dbyj_send_serialno_cs
             set f_blue = 'true'
           where id = v_send_serialno_id;
        elsif (v_byr = 1) then
          update w_dbyj_send_serialno_cs
             set f_yellow = 'true'
           where id = v_send_serialno_id;
        elsif (v_byr = 2) then
          update w_dbyj_send_serialno_cs
             set f_red = 'true'
           where id = v_send_serialno_id;
        end if;
      EXCEPTION
        WHEN others THEN
          DBMS_OUTPUT.PUT_LINE(i.f_serialno || ':' || SQLCODE || '---' || SQLERRM);
          --如果不存在，就新增一条
          insert into w_dbyj_send_serialno_cs
            (ID, F_SENDID, F_SERIALNO, F_BLUE, F_YELLOW, F_RED)
          values
            (SEQ_DBYJ_SEND_SERIALNO.Nextval,
             v_sendId,
             i.f_serialno,
             decode(v_byr, 0, 'true', null),
             decode(v_byr, 1, 'true', null),
             decode(v_byr, 2, 'true', null));
      end;
    end loop;
  else
    -- 需要通过字典表来处理
    for i in (select c.f_serialno
                from w_complain_manager c,xcy_yujing_tsfl_dict d,bpm_pro_run r -- 2019年12月5日19:24:38
               where d.tsfl_id = v_tsfl
                 and d.tsfl_real_id = c.servicerequesttypeid
                 and nvl(c.consultationorcomplaint,'0') = '0'
                 and c.create_date >= trunc(next_day(sysdate-8-8,6))
                 and c.create_date < trunc(next_day(sysdate-8,6))
                 and c.f_actinstid = r.actinstid and r.status  in ('1') ) loop
      v_send_serialno_id := 0;
      --根据v_sendId和v_serialNo来查看w_dbyj_send_serialno_cs表中是否有记录
      begin
        select t.id
          into v_send_serialno_id
          from w_dbyj_send_serialno_cs t
         where t.f_sendid = v_sendId
           and t.f_serialno = i.f_serialno;
        --如果记录存在，就更新记录
        if (v_byr = 0) then
          update w_dbyj_send_serialno_cs
             set f_blue = 'true'
           where id = v_send_serialno_id;
        elsif (v_byr = 1) then
          update w_dbyj_send_serialno_cs
             set f_yellow = 'true'
           where id = v_send_serialno_id;
        elsif (v_byr = 2) then
          update w_dbyj_send_serialno_cs
             set f_red = 'true'
           where id = v_send_serialno_id;
        end if;
      EXCEPTION
        WHEN others THEN
          DBMS_OUTPUT.PUT_LINE(i.f_serialno || ':' || SQLCODE || '---' || SQLERRM);
          --如果不存在，就新增一条
          insert into w_dbyj_send_serialno_cs
            (ID, F_SENDID, F_SERIALNO, F_BLUE, F_YELLOW, F_RED)
          values
            (SEQ_DBYJ_SEND_SERIALNO.Nextval,
             v_sendId,
             i.f_serialno,
             decode(v_byr, 0, 'true', null),
             decode(v_byr, 1, 'true', null),
             decode(v_byr, 2, 'true', null));
      end;
    end loop;
  end if;


  commit;
end;




SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','GET_WIREMESSAGE_PIDPCID','PRD_SOAINFRA') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','P_INSERT_DBYJ_SEND_SN_FGS','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_INSERT_DBYJ_SEND_SN_FGS" (v_tsfl   VARCHAR2,
                                                           v_byr    VARCHAR2,
                                                           v_sendId NUMBER,
                                                           v_slhm   VARCHAR2,
                                                           v_tsds   VARCHAR2) as
  v_send_serialno_id NUMBER(20); --发送流水号表id
  v_temp_tsfl_count  number; -- 查询是不是存在tsfl
begin

-- 2019年12月5日19:59:50
  select count(1) into v_temp_tsfl_count
  from xcy_yujing_tsfl_dict
  where tsfl_id = v_tsfl;

  if v_temp_tsfl_count = 0 then
      --根据投诉分类，查询昨天17:30到今天17:30之间创建的工单流水号
    for i in (select c.f_serialno
                from w_complain_manager c
               where c.servicerequesttypeid = v_tsfl
                 --and c.f_slhm = v_slhm
                 and c.complaintcityid = v_tsds
                 and nvl(c.consultationorcomplaint,'0')='0'
                  and c.create_date >= trunc(sysdate - 1) + (17 * 2 + 1) / (24 * 2)
       and c.create_date < trunc(sysdate) + (17 * 2 + 1) / (24 * 2)) loop
      v_send_serialno_id := 0;
      --根据v_sendId和v_serialNo来查看w_dbyj_send_serialno表中是否有记录
      begin
        select t.id
          into v_send_serialno_id
          from W_DBYJ_SEND_SERIALNO_FGS t
         where t.f_sendid = v_sendId
           and t.f_serialno = i.f_serialno
           and t.tsds = v_tsds
           --and t.slhm = v_slhm
           ;
        --如果记录存在，就更新记录
        if (v_byr = 0) then
          update W_DBYJ_SEND_SERIALNO_FGS
             set f_blue = 'true'
           where id = v_send_serialno_id;
        elsif (v_byr = 1) then
          update W_DBYJ_SEND_SERIALNO_FGS
             set f_yellow = 'true'
           where id = v_send_serialno_id;
        elsif (v_byr = 2) then
          update W_DBYJ_SEND_SERIALNO_FGS
             set f_red = 'true'
           where id = v_send_serialno_id;
        end if;
      EXCEPTION
        WHEN others THEN
          DBMS_OUTPUT.PUT_LINE(i.f_serialno || ':' || SQLCODE || '---' ||
                               SQLERRM);
          --如果不存在，就新增一条
          insert into W_DBYJ_SEND_SERIALNO_FGS
            (ID, F_SENDID, F_SERIALNO, F_BLUE, F_YELLOW, F_RED, slhm,tsds)
          values
            (SEQ_DBYJ_SEND_SERIALNO.Nextval,
             v_sendId,
             i.f_serialno,
             decode(v_byr, 0, 'true', null),
             decode(v_byr, 1, 'true', null),
             decode(v_byr, 2, 'true', null),
             v_slhm,v_tsds);
      end;
    end loop;
  else
    --根据投诉分类，查询昨天17:30到今天17:30之间创建的工单流水号
    -- 2019年12月5日20:15:14
    for i in (select c.f_serialno
                from w_complain_manager c,xcy_yujing_tsfl_dict d -- 2019年12月5日19:24:38
               where d.tsfl_id = v_tsfl
                 and d.tsfl_real_id = c.servicerequesttypeid
                 --and c.f_slhm = v_slhm
                 and c.complaintcityid = v_tsds
                 and nvl(c.consultationorcomplaint,'0')='0'
                 and c.create_date >= trunc(sysdate, 'mm')
                 and c.create_date < sysdate) loop
      v_send_serialno_id := 0;
      --根据v_sendId和v_serialNo来查看w_dbyj_send_serialno表中是否有记录
      begin
        select t.id
          into v_send_serialno_id
          from W_DBYJ_SEND_SERIALNO_FGS t
         where t.f_sendid = v_sendId
           and t.f_serialno = i.f_serialno
           and t.tsds = v_tsds
           --and t.slhm = v_slhm
           ;
        --如果记录存在，就更新记录
        if (v_byr = 0) then
          update W_DBYJ_SEND_SERIALNO_FGS
             set f_blue = 'true'
           where id = v_send_serialno_id;
        elsif (v_byr = 1) then
          update W_DBYJ_SEND_SERIALNO_FGS
             set f_yellow = 'true'
           where id = v_send_serialno_id;
        elsif (v_byr = 2) then
          update W_DBYJ_SEND_SERIALNO_FGS
             set f_red = 'true'
           where id = v_send_serialno_id;
        end if;
      EXCEPTION
        WHEN others THEN
          DBMS_OUTPUT.PUT_LINE(i.f_serialno || ':' || SQLCODE || '---' ||
                               SQLERRM);
          --如果不存在，就新增一条
          insert into W_DBYJ_SEND_SERIALNO_FGS
            (ID, F_SENDID, F_SERIALNO, F_BLUE, F_YELLOW, F_RED, slhm,tsds)
          values
            (SEQ_DBYJ_SEND_SERIALNO.Nextval,
             v_sendId,
             i.f_serialno,
             decode(v_byr, 0, 'true', null),
             decode(v_byr, 1, 'true', null),
             decode(v_byr, 2, 'true', null),
             v_slhm,v_tsds);
      end;
    end loop;
  end if;

  commit;
end;




SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','IS_ACTIVE','PRD_SOAINFRA') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','P_INSERT_DBYJ_SEND_SN_FGS_CF','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_INSERT_DBYJ_SEND_SN_FGS_CF" (v_tsfl   VARCHAR2,
                                                           v_byr    VARCHAR2,
                                                           v_sendId NUMBER,
                                                           v_slhm   VARCHAR2,
                                                           v_tsds   VARCHAR2) as
  v_send_serialno_id NUMBER(20); --发送流水号表id
  v_temp_tsfl_count  number; -- 查询是不是存在tsfl
begin

-- 2019年12月5日19:59:50
  select count(1) into v_temp_tsfl_count
  from xcy_yujing_tsfl_dict
  where tsfl_id = v_tsfl;

  if v_temp_tsfl_count = 0 then
      --根据投诉分类，查询昨天17:30到今天17:30之间创建的工单流水号
    for i in (select c.f_serialno
                from w_complain_manager c
               where c.servicerequesttypeid = v_tsfl
                 and c.f_slhm = v_slhm
                 and c.complaintcityid = v_tsds
                 and nvl(c.consultationorcomplaint,'0')='0'
                 and c.create_date >= trunc(sysdate, 'mm')
                 and c.create_date < sysdate) loop
      v_send_serialno_id := 0;
      --根据v_sendId和v_serialNo来查看w_dbyj_send_serialno表中是否有记录
      begin
        select t.id
          into v_send_serialno_id
          from W_DBYJ_SEND_SERIALNO_FGS_CF t
         where t.f_sendid = v_sendId
           and t.f_serialno = i.f_serialno
           and t.tsds = v_tsds
           and t.slhm = v_slhm;
        --如果记录存在，就更新记录
        if (v_byr = 0) then
          update W_DBYJ_SEND_SERIALNO_FGS_CF
             set f_blue = 'true'
           where id = v_send_serialno_id;
        elsif (v_byr = 1) then
          update W_DBYJ_SEND_SERIALNO_FGS_CF
             set f_yellow = 'true'
           where id = v_send_serialno_id;
        elsif (v_byr = 2) then
          update W_DBYJ_SEND_SERIALNO_FGS_CF
             set f_red = 'true'
           where id = v_send_serialno_id;
        end if;
      EXCEPTION
        WHEN others THEN
          DBMS_OUTPUT.PUT_LINE(i.f_serialno || ':' || SQLCODE || '---' ||
                               SQLERRM);
          --如果不存在，就新增一条
          insert into W_DBYJ_SEND_SERIALNO_FGS_CF
            (ID, F_SENDID, F_SERIALNO, F_BLUE, F_YELLOW, F_RED, slhm,tsds)
          values
            (SEQ_DBYJ_SEND_SERIALNO.Nextval,
             v_sendId,
             i.f_serialno,
             decode(v_byr, 0, 'true', null),
             decode(v_byr, 1, 'true', null),
             decode(v_byr, 2, 'true', null),
             v_slhm,v_tsds);
      end;
    end loop;
  else
    --根据投诉分类，查询昨天17:30到今天17:30之间创建的工单流水号
    -- 2019年12月5日20:15:14
    for i in (select c.f_serialno
                from w_complain_manager c,xcy_yujing_tsfl_dict d -- 2019年12月5日19:24:38
               where d.tsfl_id = v_tsfl
                 and d.tsfl_real_id = c.servicerequesttypeid
                 and c.f_slhm = v_slhm
                 and c.complaintcityid = v_tsds
                 and nvl(c.consultationorcomplaint,'0')='0'
                 and c.create_date >= trunc(sysdate, 'mm')
                 and c.create_date < sysdate) loop
      v_send_serialno_id := 0;
      --根据v_sendId和v_serialNo来查看w_dbyj_send_serialno表中是否有记录
      begin
        select t.id
          into v_send_serialno_id
          from W_DBYJ_SEND_SERIALNO_FGS_CF t
         where t.f_sendid = v_sendId
           and t.f_serialno = i.f_serialno
           and t.tsds = v_tsds
           and t.slhm = v_slhm;
        --如果记录存在，就更新记录
        if (v_byr = 0) then
          update W_DBYJ_SEND_SERIALNO_FGS_CF
             set f_blue = 'true'
           where id = v_send_serialno_id;
        elsif (v_byr = 1) then
          update W_DBYJ_SEND_SERIALNO_FGS_CF
             set f_yellow = 'true'
           where id = v_send_serialno_id;
        elsif (v_byr = 2) then
          update W_DBYJ_SEND_SERIALNO_FGS_CF
             set f_red = 'true'
           where id = v_send_serialno_id;
        end if;
      EXCEPTION
        WHEN others THEN
          DBMS_OUTPUT.PUT_LINE(i.f_serialno || ':' || SQLCODE || '---' ||
                               SQLERRM);
          --如果不存在，就新增一条
          insert into W_DBYJ_SEND_SERIALNO_FGS_CF
            (ID, F_SENDID, F_SERIALNO, F_BLUE, F_YELLOW, F_RED, slhm,tsds)
          values
            (SEQ_DBYJ_SEND_SERIALNO.Nextval,
             v_sendId,
             i.f_serialno,
             decode(v_byr, 0, 'true', null),
             decode(v_byr, 1, 'true', null),
             decode(v_byr, 2, 'true', null),
             v_slhm,v_tsds);
      end;
    end loop;
  end if;

  commit;
end;




SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','LOG_ERROR','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','LOG_INFO','PRD_SOAINFRA') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','P_INSERT_DBYJ_SEND_SN_SJ','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_INSERT_DBYJ_SEND_SN_SJ" (v_tsfl   VARCHAR2,
                                                        v_byr    VARCHAR2,
                                                        v_sendId NUMBER) as
  v_send_serialno_id NUMBER(20); --发送流水号表id
  v_temp_tsfl_count number; -- 查询是不是存在tsfl
begin
  -- 2019年12月5日19:59:50
  /*select count(1) into v_temp_tsfl_count
  from xcy_yujing_tsfl_dict_sj
  where tsfl_id = v_tsfl;*/
 v_temp_tsfl_count:=0;
  if v_temp_tsfl_count = 0 then
    --根据投诉分类，查询昨天16:30到今天16:30之间创建的工单流水号
    for i in (select c.f_serialno
                from w_complain_manager c
               where c.servicerequesttypeid = v_tsfl
                 and nvl(c.consultationorcomplaint,'0') = '0'
                 and c.f_slqd = '信产部转办'
                 and c.create_date >=  trunc(sysdate-10,'mm')
                 and c.create_date <  trunc(sysdate,'mm')) loop
      v_send_serialno_id := 0;
      --根据v_sendId和v_serialNo来查看w_dbyj_send_serialno_sj表中是否有记录
      begin
        select t.id
          into v_send_serialno_id
          from w_dbyj_send_serialno_sj t
         where t.f_sendid = v_sendId
           and t.f_serialno = i.f_serialno;
        --如果记录存在，就更新记录
        if (v_byr = 0) then
          update w_dbyj_send_serialno_sj
             set f_blue = 'true'
           where id = v_send_serialno_id;
        elsif (v_byr = 1) then
          update w_dbyj_send_serialno_sj
             set f_yellow = 'true'
           where id = v_send_serialno_id;
        elsif (v_byr = 2) then
          update w_dbyj_send_serialno_sj
             set f_red = 'true'
           where id = v_send_serialno_id;
        end if;
      EXCEPTION
        WHEN others THEN
          DBMS_OUTPUT.PUT_LINE(i.f_serialno || ':' || SQLCODE || '---' || SQLERRM);
          --如果不存在，就新增一条
          insert into w_dbyj_send_serialno_sj
            (ID, F_SENDID, F_SERIALNO, F_BLUE, F_YELLOW, F_RED)
          values
            (SEQ_DBYJ_SEND_SERIALNO.Nextval,
             v_sendId,
             i.f_serialno,
             decode(v_byr, 0, 'true', null),
             decode(v_byr, 1, 'true', null),
             decode(v_byr, 2, 'true', null));
      end;
    end loop;
  else
    -- 需要通过字典表来处理
    for i in (select c.f_serialno
                from w_complain_manager c,xcy_yujing_tsfl_dict d -- 2019年12月5日19:24:38
               where d.tsfl_id = v_tsfl
                 and d.tsfl_real_id = c.servicerequesttypeid
                 and nvl(c.consultationorcomplaint,'0') = '0'
                 and c.create_date >=  trunc(sysdate-10,'mm')
                 and c.f_slqd = '信产部转办'
                 and c.create_date <  trunc(sysdate,'mm') ) loop
      v_send_serialno_id := 0;
      --根据v_sendId和v_serialNo来查看w_dbyj_send_serialno_sj表中是否有记录
      begin
        select t.id
          into v_send_serialno_id
          from w_dbyj_send_serialno_sj t
         where t.f_sendid = v_sendId
           and t.f_serialno = i.f_serialno;
        --如果记录存在，就更新记录
        if (v_byr = 0) then
          update w_dbyj_send_serialno_sj
             set f_blue = 'true'
           where id = v_send_serialno_id;
        elsif (v_byr = 1) then
          update w_dbyj_send_serialno_sj
             set f_yellow = 'true'
           where id = v_send_serialno_id;
        elsif (v_byr = 2) then
          update w_dbyj_send_serialno_sj
             set f_red = 'true'
           where id = v_send_serialno_id;
        end if;
      EXCEPTION
        WHEN others THEN
          DBMS_OUTPUT.PUT_LINE(i.f_serialno || ':' || SQLCODE || '---' || SQLERRM)
;
          --如果不存在，就新增一条
          insert into w_dbyj_send_serialno_sj
            (ID, F_SENDID, F_SERIALNO, F_BLUE, F_YELLOW, F_RED)
          values
            (SEQ_DBYJ_SEND_SERIALNO.Nextval,
             v_sendId,
             i.f_serialno,
             decode(v_byr, 0, 'true', null),
             decode(v_byr, 1, 'true', null),
             decode(v_byr, 2, 'true', null));
      end;
    end loop;
  end if;


  commit;
end;




SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','P_BHG','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_BHG" as
/*2020-04-28 bu he ge*/
begin
  execute immediate 'truncate table tab_hbg_temp';
  for i in (select * from v_complain_update_serialno) loop
    insert into tab_hbg_temp
      select *
        from (select o.state,
                     t.f_serialno,
                     o.complain_id,
                     o.op_person,
                     o.op_department,
                     o.deal_time,
                     o.consult_why
                from W_COMPLAIN_MANAGER t, xcy_complain_option o
               where t.f_serialno = i.f_serialno
                 and t.id = o.complain_id
                    --and o.consult_why is not null
                 and o.state = '复核'
               order by o.create_date desc)
       where rownum < 2;

       update tab_hbg_temp t set t.consult_why = (
select dbms_metadata.get_ddl('PROCEDURE','PC_CREATEASSIGNEEHISTORY','PRD_SOAINFRA') FROM DUAL;
           select consult_why
            from (select o.state,
                         t.f_serialno,
                         o.complain_id,
                         o.op_person,
                         o.op_department,
                         o.deal_time,
                         o.consult_why
                    from W_COMPLAIN_MANAGER t, xcy_complain_option o
                   where t.f_serialno = i.f_serialno
                     and t.id = o.complain_id
                        and o.consult_why is not null
                   order by o.create_date desc)
           where rownum < 2
       ) where t.f_serialno = i.f_serialno;
  end loop;
end;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','PC_INSERTASSIGNEE','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','PURGE_ALL','PRD_SOAINFRA') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','B2B_ARCHIVE_INSTANCE_MSGS','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."B2B_ARCHIVE_INSTANCE_MSGS" (
                               p_startDate in varchar2
                              ,p_endDate in varchar2
                              ,p_msgState in varchar2
                              ,p_tpName in varchar2
                              ,p_direction in varchar2
                              ,p_msgType in varchar2
                              ,p_tpaName in varchar2
                              ,p_idType in varchar2
                              ,p_idVal in varchar2
                              ,p_docType in varchar2
                              ,filename IN VARCHAR2
) AS
str VARCHAR2(10000);
firstCond varchar2(10);
num RAW(16);
safestate VARCHAR2(100);
BEGIN
firstCond := 'true';
/*    safestate := sys.dbms_assert.enquote_name(REPLACE(msgstate, '''',''''''), FALSE); */
select dbms_metadata.get_ddl('PROCEDURE','PURGE_B2B_INSTANCES_DOWN','PRD_SOAINFRA') FROM DUAL;
  str := 'SELECT bm.id, bm.payload_storage bmps, bm.ext_business_message ext, bm.wire
_message w, bm.app_message a, wm.payload_storage ps, wm.packed_message pm, am.pa
yload '||
       ' FROM b2b_business_message bm, b2b_wire_message wm, b2b_app_message am '||
       'WHERE  ' ;

       if ((p_startDate is not null) AND (p_endDate is not null)) then
          if firstCond='true' then
          begin

            str := str || '  bm.created between to_date( :1  , ''YYYY-MM-DD HH24:MI:SS''
) AND to_date( :2 , ''YYYY-MM-DD HH24:MI:SS'')' ;
            firstCond := 'false';
          end;
          else
            str := str || ' AND  bm.created between to_date( :1 , ''YYYY-MM-DD HH24:MI
:SS'') AND to_date( :2 , ''YYYY-MM-DD HH24:MI:SS'')'    ;
          end if ;
       else
            if firstCond='true' then
               begin
               str := str || '(1=1 or :1 is null) and (1=1 or :2 is null)';
              firstCond := 'false';
               end;
            else
               str := str || 'and (1=1 or :1 is null) and (1=1 or :2 is null)';
            end if ;

      end if;

    if p_msgState is not null then
/*        DBMS_OUTPUT.PUT_LINE('inside msgState'); */

          if firstCond='true' then
          begin
            str := str || '  bm.STATE = :3 ';
            firstCond := 'false';
          end;
          else
            str := str || ' AND  bm.STATE = :3 ';

          end if;

    else

         if firstCond='true' then
            begin
            str := str || '(1=1 or :3 is null)';
            firstCond := 'false';
            end;
         else
            str := str || 'and (1=1 or :3 is null)';
         end if  ;
    end if  ;

     if p_tpName is not null then
          if firstCond='true' then
          begin
            str := str || '( bm.sender_name = :4 )';
            firstCond := 'false';
          end;
          else
            str := str || ' AND  (  bm.sender_name = :4 )';
          end if;

    else

         if firstCond='true' then
            begin
            str := str || '(1=1 or :4 is null)';
            firstCond := 'false';
            end;
         else
            str := str || 'and (1=1 or :4 is null)';
         end if ;
     end if ;

    if p_direction is not null then
          if firstCond='true' then
          begin
            str := str || '  bm.DIRECTION = :5 ';
            firstCond := 'false';
          end;
          else
            str := str || ' AND  bm.DIRECTION = :5 ';
          end if;
    else

             if firstCond='true' then
                begin
                str := str || '(1=1 or :5 is null)';
                firstCond := 'false';
                end;
             else
                str := str || 'and (1=1 or :5 is null)';
             end if  ;

    end if  ;



    if p_msgType is not null then
          if firstCond='true' then
            begin
              str := str || '  bm.MESSAGE_TYPE  =:6  ';
              firstCond := 'false';
            end;
          else
             str := str || ' AND bm.MESSAGE_TYPE  =:6  ';
          end if;
    else
         if firstCond='true' then
            begin
            str := str || '(1=1 or :6 is null)';
            firstCond := 'false';
            end;
         else
            str := str || 'and (1=1 or :6 is null)';
         end if;
    end if;

    if p_tpaName is not null then
          if firstCond='true' then
            begin
            str := str  || '  bm.tpa_name  = :7  ';
              firstCond := 'false';
            end;
          else
                      str := str  || ' AND  bm.tpa_name  = :7  ';

          end if ;
    else
         if firstCond='true' then
            begin
            str := str || '(1=1 or :7 is null)';
            firstCond := 'false';
            end;
         else
            str := str || 'and (1=1 or :7 is null)';
         end if ;
    end if;

    if p_idType is not null then
          if firstCond='true' then
            begin
              str := str || ' ( bm.SENDER_ID_TYPE  =:8   )';
              firstCond := 'false';
            end;
          else
             str := str || ' AND ( bm.SENDER_ID_TYPE  =:8   )';
          end if;

    else

         if firstCond='true' then
            begin
            str := str || '(1=1 or :8 is null)';
            firstCond := 'false';
            end;
         else
            str := str || 'and (1=1 or :8 is null)';
         end if ;
    end if;
    if p_idVal is not null then
          if firstCond='true' then
            begin
              str := str || ' ( bm.SENDER_ID_VALUE  =:9  )';
              firstCond := 'false';
            end;
          else
             str := str || ' AND ( bm.SENDER_ID_VALUE  =:9   )';
          end if;

    else

         if firstCond='true' then
            begin
            str := str || '(1=1 or :9 is null)';
            firstCond := 'false';
            end;
         else
            str := str || 'and (1=1 or :9 is null)';
         end if ;
    end if;


    if p_docType is not null then
          if firstCond='true' then
            begin
              str := str || ' ( bm.DOCTYPE_NAME  =:10  )';
              firstCond := 'false';
            end;
          else
             str := str || ' AND ( bm.DOCTYPE_NAME  =:10   )';
          end if;

    else

         if firstCond='true' then
            begin
            str := str || '(1=1 or :10 is null)';
            firstCond := 'false';
            end;
         else
            str := str || 'and (1=1 or :10 is null)';
         end if ;
    end if;


    if firstCond='true' then
      begin
          str := str   || ' bm.wire_message = wm.id (+)'
          || ' AND bm.app_message = am.id (+)';
      end;
    else
      begin
          str := str   || ' AND bm.wire_message = wm.id (+)'
          || ' AND bm.app_message = am.id (+)';
      end;
    end if;

  num := sys_guid();
   DBMS_OUTPUT.PUT_LINE(num);
   DBMS_OUTPUT.PUT_LINE(str);
  BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE dummy';

  EXCEPTION
  WHEN others THEN
    DBMS_OUTPUT.PUT_LINE('Error dropping table, ignore this error');
  END;
/*
  create the table first with the condition 1 = 2, so that we can use variable binding during the  insert
*/



  EXECUTE IMMEDIATE 'CREATE TABLE dummy AS (SELECT bm.id, bm.payload_storage bmps, b
m.ext_business_message ext, bm.wire_message w, bm.app_message a, wm.payload_stor
age ps, wm.packed_message pm,
  am.payload FROM b2b_business_message bm, b2b_wire_message wm, b2b_app_message am
  WHERE 1=2 and  bm.wire_message = wm.id (+)  AND bm.wire_message = wm.id (+))' ;
  /* insert using variable binding. msgstate is assigned to :1, :2,:3, :4, :5, :6, :
7, :8, :9 */


  EXECUTE IMMEDIATE 'INSERT INTO dummy ' || str using p_startDate, p_endDate, p_msgState, p_tpName, p_dir
ection, p_msgType, p_tpaName, p_idType , p_idVal,p_docType;

  EXECUTE IMMEDIATE 'UPDATE b2b_business_message SET job_id = ''' || num || ''' where id IN (SELE
CT id from dummy)';
  EXECUTE IMMEDIATE 'UPDATE b2b_ext_business_message SET job_id = ''' || num || ''' where id IN (SEL
ECT ext from dummy)';
  EXECUTE IMMEDIATE 'UPDATE b2b_wire_message SET job_id = ''' || num ||  ''' where id IN (SELECT w
 from dummy)';
  EXECUTE IMMEDIATE 'UPDATE b2b_app_message SET job_id = ''' || num || ''' where id IN (SELECT a from dum
my)';

  EXECUTE IMMEDIATE 'UPDATE b2b_data_storage SET job_id = ''' || num || ''' where id IN (SELECT ps from dummy)'
;
  EXECUTE IMMEDIATE 'UPDATE b2b_data_storage SET job_id = ''' || num || ''' where id IN (SELECT pm from dummy)';
  EXECUTE IMMEDIATE 'UPDATE b2b_data_storage SET job_id = ''' || num || ''' where id
IN (SELECT payload from dummy)';
  EXECUTE IMMEDIATE 'UPDATE b2b_data_storage SET job_id = ''' || num || ''' where id IN
 (SELECT bmps from dummy)';

  DBMS_OUTPUT.PUT_LINE('Calling export job to file name '||filename);

  b2b_export_job(filename, num);

END B2B_ARCHIVE_INSTANCE_MSGS;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','PURGE_RUNTIME','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','PURGE_RUNTIME_BY_ID','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','PURGE_RUNTIME_WITH_TIMEOUT','PRD_SOAINFRA') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','WRITE_DROP_PARTITION_QUERY','PRD_SOAINFRA') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','B2B_ARCHIVE_INST_MSGS_PS5','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."B2B_ARCHIVE_INST_MSGS_PS5" (
                               p_startDate in varchar2
                              ,p_endDate in varchar2
                              ,p_msgState in varchar2
                              ,p_tpName in varchar2
                              ,p_direction in varchar2
                              ,p_msgType in varchar2
                              ,p_tpaName in varchar2
                              ,p_idType in varchar2
                              ,p_idVal in varchar2
                              ,p_action in varchar2
                              ,p_service in varchar2
                              ,p_docType in varchar2
                              ,filename IN VARCHAR2
) AS
str VARCHAR2(10000);
firstCond varchar2(10);
num RAW(16);
safestate VARCHAR2(100);
BEGIN
firstCond := 'true';
/*    safestate := sys.dbms_assert.enquote_name(REPLACE(msgstate, '''',''''''), FALSE); */
  str := 'SELECT bm.id, bm.payload_storage bmps, bm.ext_business_message ext, bm.wire_message w,
bm.app_message a, wm.payload_storage ps, wm.packed_message pm, am.payload '||
       ' FROM b2b_business_message bm, b2b_wire_message wm, b2b_app_message am '||

       'WHERE  ' ;

       if ((p_startDate is not null) AND (p_endDate is not null)) then
          if firstCond='true' then
          begin

            str := str || '  bm.created between to_date( :1  , ''YYYY-MM-DD HH24:MI:SS'') AND to_dat
e( :2 , ''YYYY-MM-DD HH24:MI:SS'')'     ;
            firstCond := 'false';
          end;
          else
            str := str || ' AND  bm.created between to_date( :1 , ''YYYY-MM-DD HH24:MI:SS'') AND t
o_date( :2 , ''YYYY-MM-DD HH24:MI:SS'')'        ;
          end if ;
       else
            if firstCond='true' then
               begin
               str := str || '(1=1 or :1 is null) and (1=1 or :2 is null)';
              firstCond := 'false';
               end;
            else
               str := str || 'and (1=1 or :1 is null) and (1=1 or :2 is null)';
            end if ;

      end if;

    if p_msgState is not null then
/*        DBMS_OUTPUT.PUT_LINE('inside msgState'); */

          if firstCond='true' then
          begin
            str := str || '  bm.STATE = :3 ';
            firstCond := 'false';
          end;
          else
            str := str || ' AND  bm.STATE = :3 ';

          end if;

    else

         if firstCond='true' then
            begin
            str := str || '(1=1 or :3 is null)';
            firstCond := 'false';
            end;
         else
            str := str || 'and (1=1 or :3 is null)';
         end if  ;
    end if  ;

     if p_tpName is not null then
          if firstCond='true' then
          begin
            str := str || '( bm.sender_name = :4 )';
            firstCond := 'false';
          end;
          else
            str := str || ' AND  (  bm.sender_name = :4 )';
          end if;

    else

         if firstCond='true' then
            begin
            str := str || '(1=1 or :4 is null)';
            firstCond := 'false';
            end;
         else
            str := str || 'and (1=1 or :4 is null)';
         end if ;
     end if ;

    if p_direction is not null then
          if firstCond='true' then
          begin
            str := str || '  bm.DIRECTION = :5 ';
            firstCond := 'false';
          end;
          else
            str := str || ' AND  bm.DIRECTION = :5 ';
          end if;
    else

             if firstCond='true' then
                begin
                str := str || '(1=1 or :5 is null)';
                firstCond := 'false';
                end;
             else
                str := str || 'and (1=1 or :5 is null)';
             end if  ;

    end if  ;



    if p_msgType is not null then
          if firstCond='true' then
            begin
              str := str || '  bm.MESSAGE_TYPE  =:6  ';
              firstCond := 'false';
            end;
          else
             str := str || ' AND bm.MESSAGE_TYPE  =:6  ';
          end if;
    else
         if firstCond='true' then
            begin
            str := str || '(1=1 or :6 is null)';
            firstCond := 'false';
            end;
         else
            str := str || 'and (1=1 or :6 is null)';
         end if;
    end if;

    if p_tpaName is not null then
          if firstCond='true' then
            begin
            str := str  || '  bm.tpa_name  = :7  ';
              firstCond := 'false';
            end;
          else
                      str := str  || ' AND  bm.tpa_name  = :7  ';

          end if ;
    else
         if firstCond='true' then
            begin
            str := str || '(1=1 or :7 is null)';
            firstCond := 'false';
            end;
         else
            str := str || 'and (1=1 or :7 is null)';
         end if ;
    end if;

    if p_idType is not null then
          if firstCond='true' then
            begin
              str := str || ' ( bm.SENDER_ID_TYPE  =:8   )';
              firstCond := 'false';
            end;
          else
             str := str || ' AND ( bm.SENDER_ID_TYPE  =:8   )';
          end if;

    else

         if firstCond='true' then
            begin
            str := str || '(1=1 or :8 is null)';
            firstCond := 'false';
            end;
         else
            str := str || 'and (1=1 or :8 is null)';
         end if ;
    end if;
    if p_idVal is not null then
          if firstCond='true' then
            begin
              str := str || ' ( bm.SENDER_ID_VALUE  =:9  )';
              firstCond := 'false';
            end;
          else
             str := str || ' AND ( bm.SENDER_ID_VALUE  =:9   )';
          end if;

    else

         if firstCond='true' then
            begin
            str := str || '(1=1 or :9 is null)';
select dbms_metadata.get_ddl('PROCEDURE','WRITE_LINE','PRD_SOAINFRA') FROM DUAL;
            firstCond := 'false';
            end;
         else
            str := str || 'and (1=1 or :9 is null)';
         end if ;
    end if;


    if p_docType is not null then
          if firstCond='true' then
            begin
              str := str || ' ( bm.DOCTYPE_NAME  =:10  )';
              firstCond := 'false';
            end;
          else
             str := str || ' AND ( bm.DOCTYPE_NAME  =:10   )';
          end if;

    else

         if firstCond='true' then
            begin
            str := str || '(1=1 or :10 is null)';
            firstCond := 'false';
            end;
         else
            str := str || 'and (1=1 or :10 is null)';
         end if ;
    end if;

    if p_action is not null then
          if firstCond='true' then
            begin
              str := str || ' ( bm.attribute2  =:11  )';
              firstCond := 'false';
            end;
          else
             str := str || ' AND ( bm.attribute2  =:11   )';
          end if;

    else

         if firstCond='true' then
            begin
            str := str || '(1=1 or :11 is null)';
            firstCond := 'false';
            end;
         else
            str := str || 'and (1=1 or :11 is null)';
         end if ;
    end if;

    if p_service is not null then
          if firstCond='true' then
            begin
              str := str || ' ( bm.attribute2  =:12  )';
              firstCond := 'false';
            end;
          else
             str := str || ' AND ( bm.attribute2  =:12   )';
          end if;

    else

         if firstCond='true' then
            begin
            str := str || '(1=1 or :12 is null)';
            firstCond := 'false';
            end;
         else
            str := str || 'and (1=1 or :12 is null)';
         end if ;
    end if;
        
    if firstCond='true' then
      begin
          str := str   || ' bm.wire_message = wm.id (+)'
          || ' AND bm.app_message = am.id (+)';
      end;
    else
      begin
          str := str   || ' AND bm.wire_message = wm.id (+)'
          || ' AND bm.app_message = am.id (+)';
      end;
    end if;

  num := sys_guid();
   DBMS_OUTPUT.PUT_LINE(num);
   DBMS_OUTPUT.PUT_LINE(str);
  BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE dummy';

  EXCEPTION
  WHEN others THEN
    DBMS_OUTPUT.PUT_LINE('Error dropping table, ignore this error');
  END;
/*
  create the table first with the condition 1 = 2, so that we can use variable binding during the  insert
*/



  EXECUTE IMMEDIATE 'CREATE TABLE dummy AS (SELECT bm.id, bm.payload_storage bmps, bm.ext_business_message ext, bm.wire
_message w, bm.app_message a, wm.payload_storage ps, wm.packed_message pm,
  am.payload FROM b2b_business_message bm, b2b_wire_message wm, b2b_app_message am
  WHERE 1=2 and  bm.wire_message = wm.id (+)  AND bm.wire_message = wm.id (+))' ;

  /* insert using variable binding. msgstate is assigned to :1, :2,:3, :4, :5, :6, :7, :8, :9 */


  EXECUTE IMMEDIATE 'INSERT INTO dummy ' || str using p_startDate, p_endDate, p_msgState, p_tpName,
p_direction, p_msgType, p_tpaName, p_idType , p_idVal,p_docType,p_action, p_serv
ice;

  EXECUTE IMMEDIATE 'UPDATE b2b_business_message SET job_id = ''' || num || ''' where id IN (SELECT id from dumm
y)';
  EXECUTE IMMEDIATE 'UPDATE b2b_ext_business_message SET job_id = ''' || num || ''' where id IN (SELECT ext from du
mmy)';
  EXECUTE IMMEDIATE 'UPDATE b2b_wire_message SET job_id = ''' || num ||  ''' where id IN (SELECT w from dummy)';
  EXECUTE IMMEDIATE 'UPDATE b2b_app_message SET job_id = ''' || num || ''' where
 id IN (SELECT a from dummy)';

  EXECUTE IMMEDIATE 'UPDATE b2b_data_storage SET job_id = ''' || num || ''' where id I
N (SELECT ps from dummy)';
  EXECUTE IMMEDIATE 'UPDATE b2b_data_storage SET job_id = ''' || num || ''' where id IN (SELE
CT pm from dummy)';
  EXECUTE IMMEDIATE 'UPDATE b2b_data_storage SET job_id = ''' || num || ''' where id IN (SELECT payl
oad from dummy)';
  EXECUTE IMMEDIATE 'UPDATE b2b_data_storage SET job_id = ''' || num || ''' where id IN (SELECT bmps f
rom dummy)';

  DBMS_OUTPUT.PUT_LINE('Calling export job to file name '||filename);

  b2b_export_job(filename, num);

END B2B_ARCHIVE_INST_MSGS_PS5;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','WRITE_QUERY_COMMENTS','PRD_SOAINFRA') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','B2B_ARCHIVE_PROCEDURE','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."B2B_ARCHIVE_PROCEDURE"
( startdate IN DATE,
  enddate IN DATE,
  msgstate IN VARCHAR2,
  filename IN VARCHAR2,
  should_purge IN CHAR
) AS
str VARCHAR2(10000);
id RAW(16);
num RAW(16);
BEGIN
    str := 'SELECT bm.id, bm.payload_storage bmps, bm.ext_business_message ext, bm.wire_message w, bm.app_message a, wm
.payload_storage ps, wm.packed_message pm, am.payload' ||
  ' FROM b2b_business_message bm, b2b_wire_message wm, b2b_app_message am' ||
  ' WHERE bm.state = :1' ||
  ' AND to_date(bm.created, ''DD-MON-YYYY'') >= to_date('' ' || startdate || ' '', ''DD-MON-YYYY'') '|| 
  ' AND to_date(bm.created, ''DD-MON-YYYY'') <= to_date('' ' || enddate || ' '', ''DD-MO
N-YYYY'') + 1 '||
  ' AND bm.wire_message = wm.id (+)'  ||
  ' AND bm.app_message = am.id(+)';
  num := sys_guid();
   DBMS_OUTPUT.PUT_LINE(num);
  BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE dummy';

  EXCEPTION
  WHEN others THEN
    DBMS_OUTPUT.PUT_LINE('Error dropping table, ignore this error');
  END;

  /* create the table first with the condition 1 = 2, so that we can use variable binding dur
ing the  insert */
  EXECUTE IMMEDIATE 'CREATE TABLE dummy AS (SELECT bm.id, bm.payload_storage bmps, bm.ext_business_me
ssage ext, bm.wire_message w, bm.app_message a, wm.payload_storage ps, wm.packed
_message pm, am.payload
   FROM b2b_business_message bm, b2b_wire_message wm, b2b_app_message am
   WHERE 1 = 2
   AND bm.wire_message = wm.id (+)
   AND bm.app_message = am.id(+))';

   /* insert using variable binding. msgstate is assigned to :1 */
   EXECUTE IMMEDIATE 'INSERT INTO dummy ' || str using msgstate;

  EXECUTE IMMEDIATE 'UPDATE b2b_business_message SET job_id = ''' || num || ''' whe
re id IN (SELECT id from dummy)';
  EXECUTE IMMEDIATE 'UPDATE b2b_ext_business_message SET job_id = ''' || num || ''' wh
ere id IN (SELECT ext from dummy)';
  EXECUTE IMMEDIATE 'UPDATE b2b_wire_message SET job_id = ''' || num ||  ''' where i
d IN (SELECT w from dummy)';
  EXECUTE IMMEDIATE 'UPDATE b2b_app_message SET job_id = ''' || num || ''' where id IN (SEL
ECT a from dummy)';

  EXECUTE IMMEDIATE 'UPDATE b2b_data_storage SET job_id = ''' || num || ''' where id IN (SELECT p
s from dummy)';
  EXECUTE IMMEDIATE 'UPDATE b2b_data_storage SET job_id = ''' || num || ''' where id IN (SELECT pm from
dummy)';
  EXECUTE IMMEDIATE 'UPDATE b2b_data_storage SET job_id = ''' || num || ''' where id IN (SELECT payload from du
mmy)';
select dbms_metadata.get_ddl('PROCEDURE','TEST_DELAY','TDEIPUSR') FROM DUAL;
  EXECUTE IMMEDIATE 'UPDATE b2b_data_storage SET job_id = ''' || num || ''' where id IN (SELECT bmps from dummy)'
;

  DBMS_OUTPUT.PUT_LINE('Calling export job');

  b2b_export_job(filename, num);

  IF should_purge = 'Y' THEN
  DBMS_OUTPUT.PUT_LINE('Calling purge');
  B2B_DISABLE_CONSTRAINTS();
  EXECUTE IMMEDIATE 'DELETE b2b_data_storage WHERE job_id = ''' || num || ''' ';
  EXECUTE IMMEDIATE 'DELETE b2b_data_storage WHERE job_id = ''' || num || ''' ';
  EXECUTE IMMEDIATE 'DELETE b2b_data_storage WHERE job_id = ''' || num || ''' ';
  EXECUTE IMMEDIATE 'DELETE b2b_data_storage WHERE job_id = ''' || num || ''' ';
  EXECUTE IMMEDIATE 'DELETE b2b_app_message WHERE job_id = ''' || num || ''' ';
  EXECUTE IMMEDIATE 'DELETE b2b_wire_message WHERE job_id = ''' || num ||  ''' ';

  EXECUTE IMMEDIATE 'DELETE b2b_ext_business_message WHERE job_id = ''' || num ||
''' ';
  EXECUTE IMMEDIATE 'DELETE b2b_business_message WHERE job_id = ''' || num || ''' ';

  B2B_ENABLE_CONSTRAINTS();

    DBMS_OUTPUT.PUT_LINE('Calling purge done');
    ELSE
    DBMS_OUTPUT.PUT_LINE('Not Calling purge');
  END IF;

END B2B_ARCHIVE_PROCEDURE;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','SP_RCWZL_DATE','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','P_INSERT_DBYJ_SEND_SN_CS2','CSCDS') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','B2B_DBMS_JOB','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."B2B_DBMS_JOB" AS
x NUMBER;
BEGIN
        insert into b2b_parameter (NAME, DATE_VALUE) values ('BAM_LAST_SCAN_TIME', sysd
ate);
        dbms_job.submit(x, 'B2B_INSTANCEMSG;', sysdate, 'sysdate + (1 / 1440)');
        commit;
END;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','P_INSERT_DBYJ_SEND_SN_BZQ_DAY','CSCDS') FROM DUAL;
select dbms_metadata.get_ddl('PROCEDURE','SP_SYSJ_5GD','CSCDS') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','B2B_DBMS_REMOVEJOB','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."B2B_DBMS_REMOVEJOB" AS
CURSOR C1 is SELECT job FROM user_jobs WHERE what='B2B_INSTANCEMSG;';
BEGIN
        FOR rec IN C1 LOOP
                dbms_job.remove(rec.job);
        END LOOP;

        delete from b2b_parameter;
        commit;
        EXCEPTION
        WHEN no_data_found then return;
END;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','SP_COMPLAIN_RD_CT','CSCDS') FROM DUAL;

DBMS_METADATA.GET_DDL('PROCEDURE','B2B_DISABLE_CONSTRAINTS','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."B2B_DISABLE_CONSTRAINTS" AS
BEGIN
  EXECUTE IMMEDIATE 'ALTER TABLE B2B_BUSINESS_MESSAGE DISABLE CONSTRAINT B2B_BM_WM_FK';
EXECUTE IMMEDIATE 'ALTER TABLE B2B_BUSINESS_MESSAGE DISABLE CONSTRAINT B2B_BM_AM_FK';
EXECUTE IMMEDIATE 'ALTER TABLE B2B_BUSINESS_MESSAGE DISABLE CONSTRAINT B2B_BM_NDS_FK';
EXECUTE IMMEDIATE 'ALTER TABLE B2B_BUSINESS_MESSAGE DISABLE CONSTRAINT B2B_BM_TDS_FK';
EXECUTE IMMEDIATE 'ALTER TABLE B2B_BUSINESS_MESSAGE DISABLE CONSTRAINT B2B_BM_AS_FK';
EXECUTE IMMEDIATE 'ALTER TABLE B2B_BUSINESS_MESSAGE DISABLE CONSTRAINT B2B_BM_EBM_FK'
;
EXECUTE IMMEDIATE 'ALTER TABLE B2B_BUSINESS_MESSAGE DISABLE CONSTRAINT B2B_BM_PS_FK';

EXECUTE IMMEDIATE 'ALTER TABLE B2B_WIRE_MESSAGE DISABLE CONSTRAINT B2B_WM_DS_FK';
EXECUTE IMMEDIATE 'ALTER TABLE B2B_WIRE_MESSAGE DISABLE CONSTRAINT B2B_WM_PS_FK';
EXECUTE IMMEDIATE 'ALTER TABLE B2B_EXT_BUSINESS_MESSAGE DISABLE CONSTRAINT B2B_EBM_BM_FK';
EXECUTE IMMEDIATE 'ALTER TABLE B2B_APP_MESSAGE DISABLE CONSTRAINT B2B_AM_PAYLOAD_FK';
EXECUTE IMMEDIATE 'ALTER TABLE B2B_APP_MESSAGE DISABLE CONSTRAINT B2B_AM_BM_FK';
EXECUTE IMMEDIATE 'ALTER TABLE B2B_APP_MESSAGE DISABLE CONSTRAINT B2B_AM_AS_FK';
EXECUTE IMMEDIATE 'ALTER TABLE B2B_DATA_STORAGE DISABLE CONSTRAINT B2B_DS_DOC_ID_FK';
EXECUTE IMMEDIATE 'ALTER TABLE B2B_CONTROL_NUMBER_SET DISABLE CONSTRAINT B2B_CNS_C
N_FK1';
EXECUTE IMMEDIATE 'ALTER TABLE B2B_CONTROL_NUMBER_SET DISABLE CONSTRAINT B2B_CNS_CN_FK2';
EXECUTE IMMEDIATE 'ALTER TABLE B2B_CONTROL_NUMBER_SET DISABLE CONSTRAINT B2B_CNS_CN_FK3';
EXECUTE IMMEDIATE 'ALTER TABLE B2B_LIFECYCLE DISABLE CONSTRAINT B2B_LC_CN_FK';
END B2B_DISABLE_CONSTRAINTS;



SYS@khtsdb1> select dbms_metadata.get_ddl('PROCEDURE','P_TABLE_COMPLAIN_LEADER_GDCX','CSCDS') FROM DUAL;
DBMS_METADATA.GET_DDL('PROCEDURE','B2B_ENABLE_CONSTRAINTS','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."B2B_ENABLE_CONSTRAINTS" AS
BEGIN
   dbms_output.put_line('Enabling constraints');
EXECUTE IMMEDIATE 'ALTER TABLE B2B_BUSINESS_MESSAGE ENABLE CONSTRAINT B2B_BM_WM_FK';
EXECUTE IMMEDIATE 'ALTER TABLE B2B_BUSINESS_MESSAGE ENABLE CONSTRAINT B2B_BM_AM_FK';
EXECUTE IMMEDIATE 'ALTER TABLE B2B_BUSINESS_MESSAGE ENABLE CONSTRAINT B2B_BM_NDS_FK';
EXECUTE IMMEDIATE 'ALTER TABLE B2B_BUSINESS_MESSAGE ENABLE CONSTRAINT B2B_BM_TDS_FK';
EXECUTE IMMEDIATE 'ALTER TABLE B2B_BUSINESS_MESSAGE ENABLE CONSTRAINT B2B_BM_AS_FK';
EXECUTE IMMEDIATE 'ALTER TABLE B2B_BUSINESS_MESSAGE ENABLE CONSTRAINT B2B_BM_EBM_FK'
;
EXECUTE IMMEDIATE 'ALTER TABLE B2B_BUSINESS_MESSAGE ENABLE CONSTRAINT B2B_BM_PS_FK';

EXECUTE IMMEDIATE 'ALTER TABLE B2B_WIRE_MESSAGE ENABLE CONSTRAINT B2B_WM_DS_FK';
EXECUTE IMMEDIATE 'ALTER TABLE B2B_WIRE_MESSAGE ENABLE CONSTRAINT B2B_WM_PS_FK';
EXECUTE IMMEDIATE 'ALTER TABLE B2B_EXT_BUSINESS_MESSAGE ENABLE CONSTRAINT B2B_EBM_BM_FK';
EXECUTE IMMEDIATE 'ALTER TABLE B2B_APP_MESSAGE ENABLE CONSTRAINT B2B_AM_PAYLOAD_FK';
EXECUTE IMMEDIATE 'ALTER TABLE B2B_APP_MESSAGE ENABLE CONSTRAINT B2B_AM_BM_FK';
EXECUTE IMMEDIATE 'ALTER TABLE B2B_APP_MESSAGE ENABLE CONSTRAINT B2B_AM_AS_FK';
EXECUTE IMMEDIATE 'ALTER TABLE B2B_DATA_STORAGE ENABLE CONSTRAINT B2B_DS_DOC_ID_FK';
EXECUTE IMMEDIATE 'ALTER TABLE B2B_CONTROL_NUMBER_SET ENABLE CONSTRAINT B2B_CNS_CN_FK1';
EXECUTE IMMEDIATE 'ALTER TABLE B2B_CONTROL_NUMBER_SET ENABLE CONSTRAINT B2B_CNS_C
N_FK2';
EXECUTE IMMEDIATE 'ALTER TABLE B2B_CONTROL_NUMBER_SET ENABLE CONSTRAINT B2B_CNS_CN_FK3';
EXECUTE IMMEDIATE 'ALTER TABLE B2B_LIFECYCLE ENABLE CONSTRAINT B2B_LC_CN_FK';
dbms_output.put_line('Enabling constraints - done');
END B2B_ENABLE_CONSTRAINTS;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','B2B_EXPORT_JOB','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."B2B_EXPORT_JOB" (filename in varchar2, job_id in varchar2) AS
  ind NUMBER;              /* Loop index */
  h1 NUMBER;               /* Data Pump job handle */
  percent_done NUMBER;     /* Percentage of job complete */
  job_state VARCHAR2(30);  /* To keep track of job state */
  le ku$_LogEntry;         /* For WIP and error messages */
  js ku$_JobStatus;        /* The job status from get_status */
  jd ku$_JobDesc;          /* The job description from get_status */
  sts ku$_Status;          /* The status object returned by get_status */
BEGIN
/* Create a (user-named) Data Pump job to do a schema export. */

   h1 := DBMS_DATAPUMP.OPEN('EXPORT','TABLE',NULL,job_id,'LATEST');

/*
 Specify a single dump file for the job (using the handle just returned)
 and a directory object, which must already be defined and accessible
 to the user running this procedure.
*/

  DBMS_DATAPUMP.ADD_FILE(h1, filename,'B2B_EXPORT_DIR');

  dbms_datapump.metadata_filter(h1,'NAME_EXPR','IN (''B2B_BUSINESS_MESSAGE'', ''B2B_EXT_BUSINESS_M
ESSAGE'', ''B2B_APP_MESSAGE'', ''B2B_WIRE_MESSAGE'',''B2B_DATA_STORAGE'')');



    DBMS_DATAPUMP.DATA_FILTER(
            handle => h1,
            name => 'SUBQUERY',
            value => 'WHERE JOB_ID = ''' || job_id || '''',
                    table_name => 'B2B_BUSINESS_MESSAGE'
        );      

    DBMS_DATAPUMP.DATA_FILTER(
            handle => h1,
            name => 'SUBQUERY',
            value => 'WHERE JOB_ID = ''' || job_id || '''',
                    table_name => 'B2B_EXT_BUSINESS_MESSAGE'
        );      


    DBMS_DATAPUMP.DATA_FILTER(
            handle => h1,
            name => 'SUBQUERY',
            value => 'WHERE JOB_ID = ''' || job_id || '''',
                    table_name => 'B2B_APP_MESSAGE'
        );      

    DBMS_DATAPUMP.DATA_FILTER(
            handle => h1,
            name => 'SUBQUERY',
            value => 'WHERE JOB_ID = ''' || job_id || '''',
                    table_name => 'B2B_WIRE_MESSAGE'
        );      

    DBMS_DATAPUMP.DATA_FILTER(
            handle => h1,
            name => 'SUBQUERY',
            value => 'WHERE JOB_ID = ''' || job_id || '''',
                    table_name => 'B2B_DATA_STORAGE'
        );      


/*
 Start the job. An exception will be generated if something is not set up
 properly.
*/

  DBMS_DATAPUMP.START_JOB(h1);

/*
 The export job should now be running. In the following loop, the job
 is monitored until it completes. In the meantime, progress information is
 displayed.
*/

  percent_done := 0;
  job_state := 'UNDEFINED';
  while (job_state != 'COMPLETED') and (job_state != 'STOPPED') loop
    dbms_datapump.get_status(h1,
           dbms_datapump.ku$_status_job_error +
           dbms_datapump.ku$_status_job_status +
           dbms_datapump.ku$_status_wip,-1,job_state,sts);
    js := sts.job_status;

/* If the percentage done changed, display the new value. */

    if js.percent_done != percent_done
    then
      dbms_output.put_line('*** Job percent done = ' ||
                           to_char(js.percent_done));
      percent_done := js.percent_done;
    end if;

/*
 If any work-in-progress (WIP) or error messages were received for the job,
 display them.
*/

   if (bitand(sts.mask,dbms_datapump.ku$_status_wip) != 0)
    then
      le := sts.wip;
    else
      if (bitand(sts.mask,dbms_datapump.ku$_status_job_error) != 0)
      then
        le := sts.error;
      else
        le := null;
      end if;
    end if;
    if le is not null
    then
      ind := le.FIRST;
      while ind is not null loop
        dbms_output.put_line(le(ind).LogText);
        ind := le.NEXT(ind);
      end loop;
    end if;
  end loop;

/* Indicate that the job finished and detach from it. */

  dbms_output.put_line('Job has completed');
  dbms_output.put_line('Final job state = ' || job_state);
  dbms_datapump.detach(h1);
END B2B_EXPORT_JOB;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','B2B_INSTANCEMSG','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."B2B_INSTANCEMSG" AS


        xml_complete varchar2(10000);
        v_enqueue_options dbms_aq.enqueue_options_t;
        v_message_properties dbms_aq.message_properties_t;
        v_msgid raw(16);
        temp sys.aq$_jms_text_message;
        v_recipients        dbms_aq.aq$_recipient_list_t;
        last_scanned DATE := sysdate - (15/86400); -- subtract 15 seconds as buffer
        --last_scanned DATE;

        CURSOR c1 IS SELECT id, referToId, b2bMessageId, receiverId, senderId, senderN
ame, receiverName, acknowledgeMode, messageDateTime, messageType,state, remainin
gRetry, direction, timeToAck, errorCode, errorText, errorDescription, protocolMe
ssageId, documentType, b2btimestamp, conversationId, protocolWorkArea, correlati
onId, transactionControlNumber, groupControlNumber, interchangeControlNumber, ag
reementid, documentProtocol, exchangeProtocol, transportProtocol, url, tpa_name,
 xpath_expression1, xpath_expression2, xpath_expression3, document_definition, c
reated, modified, send_timestamp, receive_timestamp, native_msg_size, translated
_msg_size, processing_time, fabric_ecid, fabric_composite_name, b2bwiremessageid
, transportheaders, am_resubmit_count, bm_resubmit_count, wm_resubmit_count, xpa
th_name1, xpath_name2, xpath_name3, xpath_value1, xpath_value2, xpath_value3

        FROM B2B_INSTANCEMESSAGE
        --WHERE b2btimestamp BETWEEN (select date_value from b2b_parameter where name='BAM_LAST
_SCAN_TIME') AND sysdate;

        WHERE b2btimestamp BETWEEN (select date_value from b2b_parameter where name='BAM_LAST_SCAN_T
IME') AND last_scanned;


        c1_row                  c1%ROWTYPE;

BEGIN

        dbms_output.put_line('Running db job B2B_INSTANCEMSG');

        FOR c1_row in c1 LOOP   

        temp:=sys.aq$_jms_text_message.construct;

 xml_complete :=
 '<?xml version="1.0"?>' ||
 '<row>' ||
 '<id>' || c1_row.ID || '</id>' ||
 '<referToId>' || DBMS_XMLGEN.CONVERT(c1_row.REFERTOID) || '</referToId>' ||
 '<b2bMessageId>' ||   DBMS_XMLGEN.CONVERT(c1_row.B2BMESSAGEID) || '</b2bMessageId
>' ||
 '<receiverId>' || TRIM(DBMS_XMLGEN.CONVERT(c1_row.RECEIVERID)) || '</receiverId>' ||
 '<senderId>' || TRIM(DBMS_XMLGEN.CONVERT(c1_row.SENDERID)) || '</senderId>' ||
 '<senderName>' || c1_row.SENDERNAME || '</senderName>' ||
 '<receiverName>' || c1_row.RECEIVERNAME || '</receiverName>' ||
 '<acknowledgeMode>' || c1_row.ACKNOWLEDGEMODE || '</acknowledgeMode>' ||
 '<messageDateTime>' || to_char(c1_row.MESSAGEDATETIME,'MM/dd/yy HH24:MI:SS') || '</messageDateTime>' ||
 '<messageType>' || c1_row.MESSAGETYPE || '</messageType>' ||
 '<state>' || c1_row.STATE || '</state>' ||
 '<remainingRetry>' || c1_row.REMAININGRETRY || '</remainingRetry>' ||
 '<direction>' || c1_row.DIRECTION || '</direction>' ||
 '<timeToAck>' || c1_row.TIMETOACK || '</timeToAck>' ||
 '<errorCode>' || c1_row.ERRORCODE || '</errorCode>' ||
 '<errorText>' || TRIM(c1_row.ERRORTEXT) || '</errorText>' ||
 '<errorDescription>' ||  DBMS_XMLGEN.CONVERT(c1_row.ERRORDESCRIPTION) || '</errorDescription>' ||
 '<protocolMessageId>' || DBMS_XMLGEN.CONVERT(c1_row.PROTOCOLMESSAGEID) || '</protocolMessageId>' |
|
 '<documenttype>' || TRIM(c1_row.DOCUMENTTYPE) || '</documenttype>' ||
 '<b2btimestamp>' || to_char(c1_row.B2BTIMESTAMP,'MM/dd/yy HH24:MI:SS') || '</b2btimest
amp>' ||
 '<conversationId>' ||  DBMS_XMLGEN.CONVERT(c1_row.CONVERSATIONID) || '</conversationId>' ||
 '<protocolworkarea>' ||  DBMS_XMLGEN.CONVERT(c1_row.PROTOCOLWORKAREA) || '</protocolworkarea>' ||

 '<correlationId>' || DBMS_XMLGEN.CONVERT(c1_row.CORRELATIONID) || '</correlationId>' ||
 '<transactionControlNumber>' || c1_row.TRANSACTIONCONTROLNUMBER || '</transactionControlNumber>' ||
 '<groupControlNumber>' || c1_row.GROUPCONTROLNUMBER || '</groupControlNumber>' ||
 '<interchangeControlNumber>' || c1_row.INTERCHANGECONTROLNUMBER || '</interchangeCont
rolNumber>' ||
 '<agreementId>' || c1_row.AGREEMENTID || '</agreementId>' ||
 '<documentProtocol>' || TRIM(c1_row.DOCUMENTPROTOCOL) || '</documentProtocol>' ||
 '<exchangeProtocol>' || TRIM(c1_row.EXCHANGEPROTOCOL) || '</exchangeProtocol>'
||
 '<transportProtocol>' || TRIM(c1_row.TRANSPORTPROTOCOL) || '</transportProtocol>' ||
 '<url>' ||  DBMS_XMLGEN.CONVERT(c1_row.URL) || '</url>' ||
 '<tpa_name>' || c1_row.TPA_NAME || '</tpa_name>' ||
 '<xpath_expression1>' ||  DBMS_XMLGEN.CONVERT(c1_row.XPATH_EXPRESSION1) || '</xpath_expression1>' ||
 '<xpath_expression2>' ||  DBMS_XMLGEN.CONVERT(c1_row.XPATH_EXPRESSION2) || '</xpath_expression2
>' ||
 '<xpath_expression3>' ||  DBMS_XMLGEN.CONVERT(c1_row.XPATH_EXPRESSION3) || '</xpath_expression3>' ||
 '<document_definition>' || c1_row.DOCUMENT_DEFINITION || '</document_definition>' ||
 '<created>' || to_char(c1_row.CREATED,'MM/dd/yy HH24:MI:SS') || '</created>' ||
 '<modified>' || to_char(c1_row.MODIFIED,'MM/dd/yy HH24:MI:SS') || '</modified>' ||
 '<send_timestamp>' || to_char(c1_row.SEND_TIMESTAMP,'MM/dd/yy HH24:MI:SS') || '<
/send_timestamp>' ||
 '<receive_timestamp>' || to_char(c1_row.RECEIVE_TIMESTAMP,'MM/dd/yy HH24:MI:SS') || '</receive_tim
estamp>' ||
 '<native_msg_size>' || c1_row.NATIVE_MSG_SIZE || '</native_msg_size>' ||
 '<translated_msg_size>' || c1_row.TRANSLATED_MSG_SIZE || '</translated_msg_size>' ||
 '<processing_time>' || c1_row.PROCESSING_TIME || '</processing_time>' ||
 '<fabric_ecid>' || c1_row.FABRIC_ECID || '</fabric_ecid>' ||
 '<fabric_composite_name>' || c1_row.FABRIC_COMPOSITE_NAME || '</fabric_composite_name>' ||

 '<b2bwiremessageid>' || DBMS_XMLGEN.CONVERT(c1_row.B2BWIREMESSAGEID) || '</b2bwiremessageid>' ||
 '<transportheaders>' || DBMS_XMLGEN.CONVERT(c1_row.TRANSPORTHEADERS) || '</transportheaders>' ||
 '<am_resubmit_count>' || c1_row.AM_RESUBMIT_COUNT || '</am_resubmit_count>' ||
 '<bm_resubmit_count>' || c1_row.BM_RESUBMIT_COUNT || '</bm_resubmit_count>' ||
 '<wm_resubmit_count>' || c1_row.WM_RESUBMIT_COUNT || '</wm_resubmit_count>' ||
 '<xpath_name1>' || c1_row.XPATH_NAME1 || '</xpath_name1>' ||
 '<xpath_name2>' || c1_row.XPATH_NAME2 || '</xpath_name2>' ||
 '<xpath_name3>' || c1_row.XPATH_NAME3 || '</xpath_name3>' ||
 '<xpath_value1>' || DBMS_XMLGEN.CONVERT(c1_row.XPATH_VALUE1) || '</xpath_value1>' ||
 '<xpath_value2>' || DBMS_XMLGEN.CONVERT(c1_row.XPATH_VALUE2) || '</xpath_value2>' ||
 '<xpath_value3>' || DBMS_XMLGEN.CONVERT(c1_row.XPATH_VALUE3) || '</xpath_value3>' ||

 '</row>' ;


  temp.set_text(xml_complete);
      dbms_aq.enqueue(queue_name => 'B2B_BAM_QUEUE',
         enqueue_options => v_enqueue_options,
         message_properties => v_message_properties,
         payload => temp,
         msgid => v_msgid );

        commit;
                
        END LOOP;

        -- update the last_scan_time
--      update B2B_BAM set last_scan_time = last_scanned;
        update B2B_PARAMETER set DATE_VALUE = last_scanned where NAME = 'BAM_LAST_SCAN_TIME';
        commit;

        dbms_output.put_line('Done with db job B2B_INSTANCEMSG');
END;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','B2B_PURGE_INSTANCE_MSGS','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."B2B_PURGE_INSTANCE_MSGS" (
                               p_startDate in varchar2 default NULL
                               ,p_endDate in varchar2 default NULL
                               ,p_msgState in varchar2  default NULL
                               ,p_tpName in varchar2  default NULL
                               ,p_direction in varchar2  default NULL
                               ,p_msgType in varchar2  default NULL
                               ,p_tpaName in varchar2  default NULL
                               ,p_idType in varchar2  default NULL
                               ,p_idVal in varchar2  default NULL
                               ,p_docType in varchar2  default NULL
                               ,p_shouldArchive in varchar2
                               ,p_force_del in varchar2 default 'false'
                               ,p_archiveFileName in varchar2
                               ,p_tpaId in varchar2  default NULL ) IS




b2b_refcur      SYS_REFCURSOR;


     bizid               b2b_business_message.id%TYPE;
     bizstate               b2b_business_message.state%TYPE;
     message_id               b2b_business_message.message_id%TYPE;
     payload_storage     b2b_business_message.payload_storage%TYPE;
     attachment_storage   b2b_app_message.attachment_storage%TYPE;
     native_data_storage  b2b_business_message.native_data_storage%TYPE;
     translated_data_storage b2b_business_message.translated_data_storage%TYPE;
     packed_message    b2b_wire_message.packed_message%TYPE;
     wmps              b2b_wire_message.payload_storage%TYPE;
     payload           b2b_app_message.payload%TYPE;
     amas              b2b_app_message.attachment_storage%TYPE;

l_id  VARCHAR2(256);

str VARCHAR2(10000);
id RAW(16);
num RAW(16);
safestate VARCHAR2(100);
tmpFileName varchar2(100);
firstCond varchar2(10);
BEGIN


     firstCond := 'true';


     if ((p_startDate is not null) AND (p_endDate is not null)) then
           if firstCond='true' then
           begin

             str := str || '  bm.created between to_date( '''|| p_startDate || '''  , ''YYYY-MM-DD HH24:MI:S
S'') AND to_date( '''||p_endDate || ''' , ''YYYY-MM-DD HH24:MI:SS'')'    ;
             firstCond := 'false';
           end;
           else
             str := str || ' AND  bm.created between to_date( '''|| p_startDate || ''' , ''YYYY-MM
-DD HH24:MI:SS'') AND to_date( '''|| p_endDate || ''' , ''YYYY-MM-DD HH24:MI:SS'
')'    ;
           end if ;


       end if;

  if p_msgState is not null then
/*        DBMS_OUTPUT.PUT_LINE('inside msgState'); */

           if firstCond='true' then
           begin
             str := str || '  bm.STATE = '''|| p_msgState || ''' ';
             firstCond := 'false';
           end;
           else
             str := str || ' AND  bm.STATE = '''|| p_msgState || ''' ';

           end if;

     end if  ;

      if p_tpName is not null then
           if firstCond='true' then
           begin
             str := str || '( bm.sender_name = '''|| p_tpName || ''' )';
             firstCond := 'false';
           end;
           else
             str := str || ' AND  (  bm.sender_name ='''|| p_tpName || ''' )';
           end if;

      end if ;

     if p_direction is not null then
           if firstCond='true' then
           begin
             str := str || '  bm.DIRECTION = '''|| p_direction || ''' ';
             firstCond := 'false';
           end;
           else
             str := str || ' AND  bm.DIRECTION = '''|| p_direction || ''' ';
           end if;


     end if  ;



     if p_msgType is not null then
           if firstCond='true' then
             begin
               str := str || '  bm.MESSAGE_TYPE  ='''|| p_msgType || ''' ';
               firstCond := 'false';
             end;
           else
              str := str || ' AND bm.MESSAGE_TYPE  = '''|| p_msgType || '''  ';
           end if;

     end if;

     if p_tpaName is not null then
           if firstCond='true' then
             begin
             str := str  || '  bm.tpa_name  = '''|| p_tpaName || '''  ';
               firstCond := 'false';
             end;
           else
                       str := str  || ' AND  bm.tpa_name  = '''|| p_tpaName || '''  ';

           end if ;

     end if;

     if p_tpaId is not null then
           if firstCond='true' then
             begin
             str := str  || '  bm.tpa_Id  = '''|| p_tpaId || '''  ';
               firstCond := 'false';
             end;
           else
                       str := str  || ' AND  bm.tpa_Id  = '''|| p_tpaId || '''  ';

           end if ;

     end if;

     if p_idType is not null then
           if firstCond='true' then
             begin
               str := str || ' ( bm.SENDER_ID_TYPE  = '''|| p_idType || '''   )';
               firstCond := 'false';
             end;
           else
              str := str || ' AND ( bm.SENDER_ID_TYPE  = '''|| p_idType || '''   )';
           end if;


     end if;
     if p_idVal is not null then
           if firstCond='true' then
             begin
               str := str || ' ( bm.SENDER_ID_VALUE  ='''|| p_idVal || '''  )';
               firstCond := 'false';
             end;
           else
              str := str || ' AND ( bm.SENDER_ID_VALUE  ='''|| p_idVal || '''   )';
           end if;

     end if;
     if p_docType is not null then
           if firstCond='true' then
             begin
               str := str || ' ( bm.DOCTYPE_NAME  ='''|| p_docType || '''  )';
               firstCond := 'false';
             end;
           else
              str := str || ' AND ( bm.DOCTYPE_NAME  ='''|| p_docType || '''   )';
           end if;

     end if;
          if firstCond='true' then
           begin
              str := str || '  bm.wire_message = wm.id (+)
             AND bm.ext_business_message = ext.id (+)
             AND bm.app_message = am.id (+) ';
          end;
         else
           begin
              str := str ||' AND  bm.wire_message = wm.id (+)
             AND bm.ext_business_message = ext.id (+)
             AND bm.app_message = am.id (+) ';
           end;
         end if;

       DBMS_OUTPUT.PUT_LINE(str);
        open b2b_refcur for

     'SELECT  bm.id, bm.state, bm.message_id, bm.payload_storage, bm.attachment_storage, bm.native_data_stor
age,
                  bm.translated_data_storage, wm.packed_message, wm.payload_storage wmps, am.payload, am.attachment
_storage amas
        FROM b2b_business_message bm, b2b_wire_message wm, b2b_app_message am, b2b_ext_business_message ex
t
        WHERE '  || str        ;



       DBMS_OUTPUT.PUT_LINE(str);



           if p_shouldArchive = 'true' then

       dbms_output.put_line('===========' ||  str  );
       tmpFileName := p_archiveFileName;

       if tmpFileName is  null then
         tmpFileName :=  to_char(sysdate, 'DD-Mon-YYYY-HH24:MI:SS');
         tmpFileName := tmpFileName || '.dmp';
       end if;

         B2B_ARCHIVE_INSTANCE_MSGS(p_startDate,p_endDate ,p_msgState ,p_tpName ,p_direction ,p_m
sgType ,p_tpaName ,p_idType ,p_idVal,p_docType,tmpFileName);
     end if ;


  LOOP




  FETCH b2b_refcur INTO bizid, bizstate, message_id, payload_storage,
attachment_storage, native_data_storage, translated_data_storage,
packed_message, wmps, payload, amas;

DELETE FROM b2b_data_storage WHERE id in( payload_storage,packed_message);
       DELETE FROM b2b_data_storage WHERE id in(wmps,native_data_storage,translated_data_storage);
       DELETE FROM b2b_data_storage WHERE id in( attachment_storage,payload);



/*   DBMS_OUTPUT.PUT_LINE('Dheeraj ' || payload_storage); */

      IF MOD(b2b_refcur%ROWCOUNT, 1000) = 0 THEN
        COMMIT;
      END IF;


    EXIT WHEN b2b_refcur%NOTFOUND;
    END LOOP;
CLOSE b2b_refcur;
   COMMIT;


    /* Bug#8438439 */
    /*
     There could be entries in b2b_wiremessage table for which there are
     no corresponding entries in b2b_business_message table. Such entries
     would not get deleted in delete operation occuring above through b2b_cur
     cursor. We are deleting such entries here.

    */

/*
 *   for i in (
 *     select payload_storage, packed_message
 *     from b2b_wire_message wm
 *     where
 *     wm.created >= to_date(p_startDate, 'YYYY-MM-DD HH24:MI:SS')
 *        AND wm.created <= to_date(p_endDate, 'YYYY-MM-DD HH24:MI:SS') AND
 *             wm.created between nvl(to_date(null, 'YYYY-MM-DD HH24:MI:SS'),  nvl((select mi
n(created) from b2b_wire_message),sysdate))
 *                        AND nvl(to_date(null, 'YYYY-MM-DD HH24:MI:SS'),    nvl((select max(created) from b2b_wire_
message),sysdate))
 *      AND wm.state like nvl(p_msgState,'%')
 *  )
 *  loop
 *    DELETE FROM b2b_data_storage where id = i.payload_storage;
 *    DELETE FROM b2b_data_storage where id = i.packed_message;
 *
 *  end loop;
 *
 *
 *  COMMIT;


     * There could be entries in b2b_app_message table for which there are
     * no corresponding entries in b2b_business_message table. Such entries
     * would not get deleted in delete operation occuring above through b2b_cur
     * cursor. We are deleting such entries here.
     *
 *   for i in (
 *     select payload, attachment_storage
 *     from b2b_app_message am
 *     where
 *     am.created >= to_date(p_startDate, 'YYYY-MM-DD HH24:MI:SS')
 *        AND am.created <= to_date(p_endDate, 'YYYY-MM-DD HH24:MI:SS') AND
 *        am.created between nvl(to_date(null, 'YYYY-MM-DD HH24:MI:SS'),  nvl((select min(created) fr
om b2b_app_message),sysdate))
 *                        AND nvl(to_date(null, 'YYYY-MM-DD HH24:MI:SS'),    nvl((select m
ax(created) from b2b_app_message),sysdate))
 *     AND am.state like nvl(p_msgState,'%')
 *  )
 *  loop
 *    DELETE FROM b2b_data_storage where id in (i.payload, i.attachment_storage);
 *  end loop;
 *
 *  COMMIT;
 */


   EXCEPTION
      WHEN OTHERS THEN
         ROLLBACK;
         RAISE;
END B2B_PURGE_INSTANCE_MSGS;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','B2B_PURGE_INSTANCE_MSGS_AUDIT','PRD_SOAINFRA'
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."B2B_PURGE_INSTANCE_MSGS_AUDIT" (
                               p_startDate in varchar2 default NULL
                               ,p_endDate in varchar2 default NULL
                               ,p_msgState in varchar2  default NULL
                               ,p_tpName in varchar2  default NULL
                               ,p_direction in varchar2  default NULL
                               ,p_msgType in varchar2  default NULL
                               ,p_tpaName in varchar2  default NULL
                               ,p_idType in varchar2  default NULL
                               ,p_idVal in varchar2  default NULL
                               ,p_docType in varchar2  default NULL
                               ,p_shouldArchive in varchar2
                               ,p_force_del in varchar2 default 'false'
                               ,p_archiveFileName in varchar2
                               ,p_tpaId in varchar2  default NULL
                               ,p_auditId in varchar2
                               ,p_numOfRecordsPurged out varchar2 )  IS




b2b_refcur      SYS_REFCURSOR;


     bizid               b2b_business_message.id%TYPE;
     bizstate               b2b_business_message.state%TYPE;
     message_id               b2b_business_message.message_id%TYPE;
     payload_storage     b2b_business_message.payload_storage%TYPE;
     attachment_storage   b2b_app_message.attachment_storage%TYPE;
     native_data_storage  b2b_business_message.native_data_storage%TYPE;
     translated_data_storage b2b_business_message.translated_data_storage%TYPE;
     packed_message    b2b_wire_message.packed_message%TYPE;
     wmps              b2b_wire_message.payload_storage%TYPE;
     payload           b2b_app_message.payload%TYPE;
     amas              b2b_app_message.attachment_storage%TYPE;

l_id  VARCHAR2(256);
l_p_rowcount NUMBER := 0;
str VARCHAR2(10000);
id RAW(16);
num RAW(16);
safestate VARCHAR2(100);
tmpFileName varchar2(100);
firstCond varchar2(10);
BEGIN

execute immediate 'alter session force parallel dml parallel 8';

/* avoid unwanted execution plans  */
   execute immediate 'alter session set "_optimizer_sortmerge_join_enabled"=false';
   execute immediate 'alter session set "_optimizer_mjc_enabled"=false';
   execute immediate 'alter session set "_optimizer_cartesian_enabled"=false';
/* and set MBRC high to boost Full Table Scans */
   execute immediate 'alter session set db_file_multiblock_read_count=128';


     firstCond := 'true';


     if ((p_startDate is not null) AND (p_endDate is not null)) then
           if firstCond='true' then
           begin

             str := str || '  bm.created between to_date( '''|| p_startDate || '''  , ''Y
YYY-MM-DD HH24:MI:SS'') AND to_date( '''||p_endDate || ''' , ''YYYY-MM-DD HH24:M
I:SS'')'    ;
             firstCond := 'false';
           end;
           else
             str := str || ' AND  bm.created between to_date( '''|| p_startDate || ''' , ''YYYY-MM-DD HH24:MI:SS'') AND
 to_date( '''|| p_endDate || ''' , ''YYYY-MM-DD HH24:MI:SS'')'    ;
           end if ;


       end if;

  if p_msgState is not null then
/*        DBMS_OUTPUT.PUT_LINE('inside msgState'); */

           if firstCond='true' then
           begin
             str := str || '  bm.STATE = '''|| p_msgState || ''' ';
             firstCond := 'false';
           end;
           else
             str := str || ' AND  bm.STATE = '''|| p_msgState || ''' ';

           end if;

     end if  ;

      if p_tpName is not null then
           if firstCond='true' then
           begin
             str := str || '( bm.sender_name = '''|| p_tpName || ''' )';
             firstCond := 'false';
           end;
           else
             str := str || ' AND  (  bm.sender_name ='''|| p_tpName || ''' )';
           end if;

      end if ;
     if p_tpaId is not null then
           if firstCond='true' then
             begin
             str := str  || '  bm.tpa_id  = '''|| p_tpaId || '''  ';
               firstCond := 'false';
             end;
           else
                       str := str  || ' AND  bm.tpa_id  = '''|| p_tpaId || '''  ';

           end if ;

     end if;

     if p_direction is not null then
           if firstCond='true' then
           begin
             str := str || '  bm.DIRECTION = '''|| p_direction || ''' ';
             firstCond := 'false';
           end;
           else
             str := str || ' AND  bm.DIRECTION = '''|| p_direction || ''' ';
           end if;


     end if  ;



     if p_msgType is not null then
           if firstCond='true' then
             begin
               str := str || '  bm.MESSAGE_TYPE  ='''|| p_msgType || ''' ';
               firstCond := 'false';
             end;
           else
              str := str || ' AND bm.MESSAGE_TYPE  = '''|| p_msgType || '''  ';
           end if;

     end if;

     if p_tpaName is not null then
           if firstCond='true' then
             begin
             str := str  || '  bm.tpa_name  = '''|| p_tpaName || '''  ';
               firstCond := 'false';
             end;
           else
                       str := str  || ' AND  bm.tpa_name  = '''|| p_tpaName || '''  ';

           end if ;

     end if;

     if p_idType is not null then
           if firstCond='true' then
             begin
               str := str || ' ( bm.SENDER_ID_TYPE  = '''|| p_idType || '''   )';
               firstCond := 'false';
             end;
           else
              str := str || ' AND ( bm.SENDER_ID_TYPE  = '''|| p_idType || '''   )';

           end if;


     end if;
     if p_idVal is not null then
           if firstCond='true' then
             begin
               str := str || ' ( bm.SENDER_ID_VALUE  ='''|| p_idVal || '''  )';
               firstCond := 'false';
             end;
           else
              str := str || ' AND ( bm.SENDER_ID_VALUE  ='''|| p_idVal || '''   )';
           end if;

     end if;

     if p_docType is not null then
           if firstCond='true' then
             begin
               str := str || ' ( bm.DOCTYPE_NAME  ='''|| p_docType || '''  )';
               firstCond := 'false';
             end;
           else
              str := str || ' AND ( bm.DOCTYPE_NAME  ='''|| p_docType || '''   )';
           end if;

     end if;

               if firstCond='true' then
           begin
              str := str || '  bm.wire_message = wm.id (+)
             AND bm.ext_business_message = ext.id (+)
             AND bm.app_message = am.id (+) ';
          end;
         else
           begin
              str := str ||' AND  bm.wire_message = wm.id (+)
             AND bm.ext_business_message = ext.id (+)
             AND bm.app_message = am.id (+) ';
           end;
         end if;

       DBMS_OUTPUT.PUT_LINE(str);
        open b2b_refcur for

     'SELECT  bm.id, bm.state, bm.message_id, bm.payload_storage, bm.attachment_sto
rage, bm.native_data_storage,
                  bm.translated_data_storage, wm.packed_message, wm.payload_storage wmps,
am.payload, am.attachment_storage amas
        FROM b2b_business_message bm, b2b_wire_message wm, b2b_app_message am, b2
b_ext_business_message ext
        WHERE '  || str        ;



       DBMS_OUTPUT.PUT_LINE(str);



           if p_shouldArchive = 'true' then

       dbms_output.put_line('===========' ||  str  );
       tmpFileName := p_archiveFileName;

       if tmpFileName is  null then
         tmpFileName :=  to_char(sysdate, 'DD-Mon-YYYY-HH24:MI:SS');
         tmpFileName := tmpFileName || '.dmp';
       end if;

         B2B_ARCHIVE_INSTANCE_MSGS(p_startDate,p_endDate ,p_msgState ,p_tpName ,p_direction ,p_msgType ,p_tpaNa
me ,p_idType ,p_idVal,p_docType,tmpFileName);
     end if ;


  LOOP




  FETCH b2b_refcur INTO bizid, bizstate, message_id, payload_storage,
attachment_storage, native_data_storage, translated_data_storage,
packed_message, wmps, payload, amas;



DELETE FROM b2b_data_storage WHERE id in( payload_storage,packed_message);
       DELETE FROM b2b_data_storage WHERE id in(wmps,native_data_storage,translated_data_storage);
       DELETE FROM b2b_data_storage WHERE id in( attachment_storage,payload);



/*   DBMS_OUTPUT.PUT_LINE('Dheeraj ' || payload_storage); */

      IF MOD(b2b_refcur%ROWCOUNT, 1000) = 0 THEN
        COMMIT;
      END IF;


    EXIT WHEN b2b_refcur%NOTFOUND;
    INSERT INTO B2B_AUDIT_TEMP VALUES ( p_auditId, message_id );
    l_p_rowcount := l_p_rowcount + 1;
    END LOOP;
CLOSE b2b_refcur;
   COMMIT;
p_numOfRecordsPurged := l_p_rowcount;

    /* Bug#8438439 */
    /*
     * There could be entries in b2b_wiremessage table for which there are
     * no corresponding entries in b2b_business_message table. Such entries
     * would not get deleted in delete operation occuring above through b2b_cur
     * cursor. We are deleting such entries here.
     */

/*
 *   for i in (
 *     select payload_storage, packed_message
 *     from b2b_wire_message wm
 *     where
 *     wm.created >= to_date(p_startDate, 'YYYY-MM-DD HH24:MI:SS')
 *        AND wm.created <= to_date(p_endDate, 'YYYY-MM-DD HH24:MI:SS') AND
 *             wm.created between nvl(to_date(null, 'YYYY-MM-DD HH24:MI:SS'),  nvl
((select min(created) from b2b_wire_message),sysdate))
 *                        AND nvl(to_date(null, 'YYYY-MM-DD HH24:MI:SS'),    nvl((select max(created) fro
m b2b_wire_message),sysdate))
 *      AND wm.state like nvl(p_msgState,'%')
 *  )
 *  loop
 *    DELETE FROM b2b_data_storage where id = i.payload_storage;
 *    DELETE FROM b2b_data_storage where id = i.packed_message;
 *
 *  end loop;
 *
 *
 *  COMMIT;
 */


    /*
     * There could be entries in b2b_app_message table for which there are
     * no corresponding entries in b2b_business_message table. Such entries
     * would not get deleted in delete operation occuring above through b2b_cur
     * cursor. We are deleting such entries here.
     */
/*
 *   for i in (
 *     select payload, attachment_storage
 *     from b2b_app_message am
 *     where
 *     am.created >= to_date(p_startDate, 'YYYY-MM-DD HH24:MI:SS')
 *        AND am.created <= to_date(p_endDate, 'YYYY-MM-DD HH24:MI:SS') AND
 *        am.created between nvl(to_date(null, 'YYYY-MM-DD HH24:MI:SS'),  nvl((select min(created) from b2b_app_mes
sage),sysdate))
 *                        AND nvl(to_date(null, 'YYYY-MM-DD HH24:MI:SS'),    nvl((select max(created) fr
om b2b_app_message),sysdate))
 *     AND am.state like nvl(p_msgState,'%')
 *  )
 *  loop
 *    DELETE FROM b2b_data_storage where id in (i.payload, i.attachment_storage);
 *  end loop;
 *
 *  COMMIT;
 */


   EXCEPTION
      WHEN OTHERS THEN
         ROLLBACK;
         RAISE;

END B2B_PURGE_INSTANCE_MSGS_AUDIT;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','B2B_PURGE_INST_MSGS_AUDIT_PS5','PRD_SOAINFRA'
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."B2B_PURGE_INST_MSGS_AUDIT_PS5" (
                               p_startDate in varchar2 default NULL
                               ,p_endDate in varchar2 default NULL
                               ,p_msgState in varchar2  default NULL
                               ,p_tpName in varchar2  default NULL
                               ,p_direction in varchar2  default NULL
                               ,p_msgType in varchar2  default NULL
                               ,p_tpaName in varchar2  default NULL
                               ,p_idType in varchar2  default NULL
                               ,p_idVal in varchar2  default NULL
                               ,p_shouldArchive in varchar2
                               ,p_force_del in varchar2 default 'false'
                               ,p_archiveFileName in varchar2
                               ,p_tpaId in varchar2  default NULL
                               ,p_action in varchar2  default NULL
                               ,p_service in varchar2  default NULL
                               ,p_docType in varchar2  default NULL
                               ,p_auditId in varchar2
                               ,p_numOfRecordsPurged out varchar2 )  IS




b2b_refcur      SYS_REFCURSOR;


     bizid               b2b_business_message.id%TYPE;
     bizstate               b2b_business_message.state%TYPE;
     message_id               b2b_business_message.message_id%TYPE;
     payload_storage     b2b_business_message.payload_storage%TYPE;
     attachment_storage   b2b_app_message.attachment_storage%TYPE;
     native_data_storage  b2b_business_message.native_data_storage%TYPE;
     translated_data_storage b2b_business_message.translated_data_storage%TYPE;
     packed_message    b2b_wire_message.packed_message%TYPE;
     wmps              b2b_wire_message.payload_storage%TYPE;
     payload           b2b_app_message.payload%TYPE;
     amas              b2b_app_message.attachment_storage%TYPE;

l_id  VARCHAR2(256);
l_p_rowcount NUMBER := 0;
str VARCHAR2(10000);
id RAW(16);
num RAW(16);
safestate VARCHAR2(100);
tmpFileName varchar2(100);
firstCond varchar2(10);
BEGIN

execute immediate 'alter session force parallel dml parallel 8';

/* avoid unwanted execution plans  */
   execute immediate 'alter session set "_optimizer_sortmerge_join_enabled"=false';
   execute immediate 'alter session set "_optimizer_mjc_enabled"=false';
   execute immediate 'alter session set "_optimizer_cartesian_enabled"=false';
/* and set MBRC high to boost Full Table Scans */
   execute immediate 'alter session set db_file_multiblock_read_count=128';


     firstCond := 'true';


     if ((p_startDate is not null) AND (p_endDate is not null)) then
           if firstCond='true' then
           begin

             str := str || '  bm.created between to_date( '''|| p_startDate || '''  , ''YYYY-MM-DD HH24:MI:SS'') A
ND to_date( '''||p_endDate || ''' , ''YYYY-MM-DD HH24:MI:SS'')'    ;
             firstCond := 'false';
           end;
           else
             str := str || ' AND  bm.created between to_date( '''|| p_startDate || ''' , ''YYYY-MM-DD HH
24:MI:SS'') AND to_date( '''|| p_endDate || ''' , ''YYYY-MM-DD HH24:MI:SS'')'
 ;
           end if ;


       end if;

  if p_msgState is not null then
/*        DBMS_OUTPUT.PUT_LINE('inside msgState'); */

           if firstCond='true' then
           begin
             str := str || '  bm.STATE = '''|| p_msgState || ''' ';
             firstCond := 'false';
           end;
           else
             str := str || ' AND  bm.STATE = '''|| p_msgState || ''' ';

           end if;

     end if  ;

      if p_tpName is not null then
           if firstCond='true' then
           begin
             str := str || '( bm.sender_name = '''|| p_tpName || ''' )';
             firstCond := 'false';
           end;
           else
             str := str || ' AND  (  bm.sender_name ='''|| p_tpName || ''' )';
           end if;

      end if ;
     if p_tpaId is not null then
           if firstCond='true' then
             begin
             str := str  || '  bm.tpa_id  = '''|| p_tpaId || '''  ';
               firstCond := 'false';
             end;
           else
                       str := str  || ' AND  bm.tpa_id  = '''|| p_tpaId || '''  ';

           end if ;

     end if;

-- Added parameter for action for bug 11773067
     if p_action is not null then
           if firstCond='true' then
             begin
             str := str  || ' substr(bm.attribute2,instr(bm.attribute2,' || ' ''#:#'' ' || ')+3)  = '''|| p_a
ction || '''  ';
               firstCond := 'false';
             end;
           else
                      str := str  || ' AND  substr(bm.attribute2,instr(bm.attribute2,' || ' ''#:#'' ' || ')+3)
= '''|| p_action || '''  ';

           end if ;

     end if;
-- Added parameter for service for bug 11773067
     if p_service is not null then
           if firstCond='true' then
             begin
             str := str  || '  substr(bm.attribute2,1,instr(bm.attribute2,' || ' ''#:#'' ' || ')-1) = '''|| p_service |
| '''  ';
               firstCond := 'false';
             end;
           else
                       str := str  || ' AND  substr(bm.attribute2,1,instr(bm.attribute2,' || ' ''#:#'' ' || ')-1) = '''
|| p_service || '''  ';

           end if ;

     end if;
--

     if p_direction is not null then
           if firstCond='true' then
           begin
             str := str || '  bm.DIRECTION = '''|| p_direction || ''' ';
             firstCond := 'false';
           end;
           else
             str := str || ' AND  bm.DIRECTION = '''|| p_direction || ''' ';
           end if;


     end if  ;



     if p_msgType is not null then
           if firstCond='true' then
             begin
               str := str || '  bm.MESSAGE_TYPE  ='''|| p_msgType || ''' ';
               firstCond := 'false';
             end;
           else
              str := str || ' AND bm.MESSAGE_TYPE  = '''|| p_msgType || '''  ';
           end if;

     end if;

     if p_tpaName is not null then
           if firstCond='true' then
             begin
             str := str  || '  bm.tpa_name  = '''|| p_tpaName || '''  ';
               firstCond := 'false';
             end;
           else
                       str := str  || ' AND  bm.tpa_name  = '''|| p_tpaName || '''  ';


           end if ;

     end if;

     if p_idType is not null then
           if firstCond='true' then
             begin
               str := str || ' ( bm.SENDER_ID_TYPE  = '''|| p_idType || '''   )';
               firstCond := 'false';
             end;
           else
              str := str || ' AND ( bm.SENDER_ID_TYPE  = '''|| p_idType || '''
)';
           end if;


     end if;
     if p_idVal is not null then
           if firstCond='true' then
             begin
               str := str || ' ( bm.SENDER_ID_VALUE  ='''|| p_idVal || '''  )';
               firstCond := 'false';
             end;
           else
              str := str || ' AND ( bm.SENDER_ID_VALUE  ='''|| p_idVal || '''   )';

           end if;

     end if;

     if p_docType is not null then
           if firstCond='true' then
             begin
               str := str || ' ( bm.DOCTYPE_NAME  ='''|| p_docType || '''  )';
               firstCond := 'false';
             end;
           else
              str := str || ' AND ( bm.DOCTYPE_NAME  ='''|| p_docType || '''   )';
           end if;

     end if;

               if firstCond='true' then
           begin
              str := str || '  bm.wire_message = wm.id (+)
             AND bm.ext_business_message = ext.id (+)
             AND bm.app_message = am.id (+) ';
          end;
         else
           begin
              str := str ||' AND  bm.wire_message = wm.id (+)
             AND bm.ext_business_message = ext.id (+)
             AND bm.app_message = am.id (+) ';
           end;
         end if;

       DBMS_OUTPUT.PUT_LINE(str);
        open b2b_refcur for

     'SELECT  bm.id, bm.state, bm.message_id, bm.payload_storage, bm.attachment_
storage, bm.native_data_storage,
                  bm.translated_data_storage, wm.packed_message, wm.payload_storage wmp
s, am.payload, am.attachment_storage amas
        FROM b2b_business_message bm, b2b_wire_message wm, b2b_app_message am, b2b_ext_business_message ext
        WHERE '  || str        ;



       DBMS_OUTPUT.PUT_LINE(str);



           if p_shouldArchive = 'true' then

       dbms_output.put_line('===========' ||  str  );
       tmpFileName := p_archiveFileName;

       if tmpFileName is  null then
         tmpFileName :=  to_char(sysdate, 'DD-Mon-YYYY-HH24:MI:SS');
         tmpFileName := tmpFileName || '.dmp';
       end if;

         B2B_ARCHIVE_INST_MSGS_PS5(p_startDate,p_endDate ,p_msgState ,p_tpName ,p_direction ,p_msgType ,p_tp
aName ,p_idType ,p_idVal,p_action,p_service,p_docType,tmpFileName);
     end if ;


  LOOP




  FETCH b2b_refcur INTO bizid, bizstate, message_id, payload_storage,
attachment_storage, native_data_storage, translated_data_storage,
packed_message, wmps, payload, amas;



DELETE FROM b2b_data_storage WHERE id in( payload_storage,packed_message);
       DELETE FROM b2b_data_storage WHERE id in(wmps,native_data_storage,translated_data_stora
ge);
       DELETE FROM b2b_data_storage WHERE id in( attachment_storage,payload);



/*   DBMS_OUTPUT.PUT_LINE('Dheeraj ' || payload_storage); */

      IF MOD(b2b_refcur%ROWCOUNT, 1000) = 0 THEN
        COMMIT;
      END IF;


    EXIT WHEN b2b_refcur%NOTFOUND;
    INSERT INTO B2B_AUDIT_TEMP VALUES ( p_auditId, message_id );
    l_p_rowcount := l_p_rowcount + 1;
    END LOOP;
CLOSE b2b_refcur;
   COMMIT;
p_numOfRecordsPurged := l_p_rowcount;

    /* Bug#8438439 */
    /*
     * There could be entries in b2b_wiremessage table for which there are
     * no corresponding entries in b2b_business_message table. Such entries
     * would not get deleted in delete operation occuring above through b2b_cur
     * cursor. We are deleting such entries here.
     */

/*
 *   for i in (
 *     select payload_storage, packed_message
 *     from b2b_wire_message wm
 *     where
 *     wm.created >= to_date(p_startDate, 'YYYY-MM-DD HH24:MI:SS')
 *        AND wm.created <= to_date(p_endDate, 'YYYY-MM-DD HH24:MI:SS') AND
 *             wm.created between nvl(to_date(null, 'YYYY-MM-DD HH24:MI:SS'),  nvl((select min(creat
ed) from b2b_wire_message),sysdate))
 *                        AND nvl(to_date(null, 'YYYY-MM-DD HH24:MI:SS'),    nvl((s
elect max(created) from b2b_wire_message),sysdate))
 *      AND wm.state like nvl(p_msgState,'%')
 *  )
 *  loop
 *    DELETE FROM b2b_data_storage where id = i.payload_storage;
 *    DELETE FROM b2b_data_storage where id = i.packed_message;
 *
 *  end loop;
 *
 *
 *  COMMIT;
 */


    /*
     * There could be entries in b2b_app_message table for which there are
     * no corresponding entries in b2b_business_message table. Such entries
     * would not get deleted in delete operation occuring above through b2b_cur
     * cursor. We are deleting such entries here.
     */
/*
 *   for i in (
 *     select payload, attachment_storage
 *     from b2b_app_message am
 *     where
 *     am.created >= to_date(p_startDate, 'YYYY-MM-DD HH24:MI:SS')
 *        AND am.created <= to_date(p_endDate, 'YYYY-MM-DD HH24:MI:SS') AND
 *        am.created between nvl(to_date(null, 'YYYY-MM-DD HH24:MI:SS'),  nvl((select min(cre
ated) from b2b_app_message),sysdate))
 *                        AND nvl(to_date(null, 'YYYY-MM-DD HH24:MI:SS'),    nvl((
select max(created) from b2b_app_message),sysdate))
 *     AND am.state like nvl(p_msgState,'%')
 *  )
 *  loop
 *    DELETE FROM b2b_data_storage where id in (i.payload, i.attachment_storage);
 *  end loop;
 *
 *  COMMIT;
 */


   EXCEPTION
      WHEN OTHERS THEN
         ROLLBACK;
         RAISE;

END B2B_PURGE_INST_MSGS_AUDIT_PS5;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','B2B_PURGE_INST_MSGS_PS5','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."B2B_PURGE_INST_MSGS_PS5" (
                               p_startDate in varchar2 default NULL
                               ,p_endDate in varchar2 default NULL
                               ,p_msgState in varchar2  default NULL
                               ,p_tpName in varchar2  default NULL
                               ,p_direction in varchar2  default NULL
                               ,p_msgType in varchar2  default NULL
                               ,p_tpaName in varchar2  default NULL
                               ,p_idType in varchar2  default NULL
                               ,p_idVal in varchar2  default NULL

                               ,p_shouldArchive in varchar2
                               ,p_force_del in varchar2 default 'false'
                               ,p_archiveFileName in varchar2
                               ,p_tpaId in varchar2  default NULL
                               ,p_action in varchar2  default NULL
                               ,p_service in varchar2  default NULL
                               ,p_docType in varchar2  default NULL) IS




b2b_refcur      SYS_REFCURSOR;


     bizid               b2b_business_message.id%TYPE;
     bizstate               b2b_business_message.state%TYPE;
     message_id               b2b_business_message.message_id%TYPE;
     payload_storage     b2b_business_message.payload_storage%TYPE;
     attachment_storage   b2b_app_message.attachment_storage%TYPE;
     native_data_storage  b2b_business_message.native_data_storage%TYPE;
     translated_data_storage b2b_business_message.translated_data_storage%TYPE;
     packed_message    b2b_wire_message.packed_message%TYPE;
     wmps              b2b_wire_message.payload_storage%TYPE;
     payload           b2b_app_message.payload%TYPE;
     amas              b2b_app_message.attachment_storage%TYPE;

l_id  VARCHAR2(256);

str VARCHAR2(10000);
id RAW(16);
num RAW(16);
safestate VARCHAR2(100);
tmpFileName varchar2(100);
firstCond varchar2(10);
BEGIN


     firstCond := 'true';


     if ((p_startDate is not null) AND (p_endDate is not null)) then
           if firstCond='true' then
           begin

             str := str || '  bm.created between to_date( '''|| p_startDate || '''  , ''YYYY-
MM-DD HH24:MI:SS'') AND to_date( '''||p_endDate || ''' , ''YYYY-MM-DD HH24:MI:SS
'')'    ;
             firstCond := 'false';
           end;
           else
             str := str || ' AND  bm.created between to_date( '''|| p_startDate ||
''' , ''YYYY-MM-DD HH24:MI:SS'') AND to_date( '''|| p_endDate || ''' , ''YYYY-MM
-DD HH24:MI:SS'')'    ;
           end if ;


       end if;

  if p_msgState is not null then
/*        DBMS_OUTPUT.PUT_LINE('inside msgState'); */

           if firstCond='true' then
           begin
             str := str || '  bm.STATE = '''|| p_msgState || ''' ';
             firstCond := 'false';
           end;
           else
             str := str || ' AND  bm.STATE = '''|| p_msgState || ''' ';

           end if;

     end if  ;

      if p_tpName is not null then
           if firstCond='true' then
           begin
             str := str || '( bm.sender_name = '''|| p_tpName || ''' )';
             firstCond := 'false';
           end;
           else
             str := str || ' AND  (  bm.sender_name ='''|| p_tpName || ''' )';
           end if;

      end if ;

     if p_direction is not null then
           if firstCond='true' then
           begin
             str := str || '  bm.DIRECTION = '''|| p_direction || ''' ';
             firstCond := 'false';
           end;
           else
             str := str || ' AND  bm.DIRECTION = '''|| p_direction || ''' ';
           end if;


     end if  ;



     if p_msgType is not null then
           if firstCond='true' then
             begin
               str := str || '  bm.MESSAGE_TYPE  ='''|| p_msgType || ''' ';
               firstCond := 'false';
             end;
           else
              str := str || ' AND bm.MESSAGE_TYPE  = '''|| p_msgType || '''  ';
           end if;

     end if;

     if p_tpaName is not null then
           if firstCond='true' then
             begin
             str := str  || '  bm.tpa_name  = '''|| p_tpaName || '''  ';
               firstCond := 'false';
             end;
           else
                       str := str  || ' AND  bm.tpa_name  = '''|| p_tpaName || '''  ';

           end if ;

     end if;

     if p_tpaId is not null then
           if firstCond='true' then
             begin
             str := str  || '  bm.tpa_Id  = '''|| p_tpaId || '''  ';
               firstCond := 'false';
             end;
           else
                       str := str  || ' AND  bm.tpa_Id  = '''|| p_tpaId || '''  ';

           end if ;

     end if;

    -- Added parameter for action for bug 11773067
     if p_action is not null then
           if firstCond='true' then
             begin
             str := str  || ' substr(bm.attribute2,instr(bm.attribute2,' || ' ''#:#'' ' || ')+3)  = '''|| p_a
ction || '''  ';
               firstCond := 'false';
             end;
           else
                      str := str  || ' AND  substr(bm.attribute2,instr(bm.attribute2,' || ' ''#:#'' ' || ')+3)
= '''|| p_action || '''  ';

           end if ;

     end if;

         -- Added parameter for service for bug 11773067
     if p_service is not null then
           if firstCond='true' then
             begin
             str := str  || '  substr(bm.attribute2,1,instr(bm.attribute2,' || ' ''#:#'' ' || ')-1) = '''|| p_s
ervice || '''  ';
               firstCond := 'false';
             end;
           else
                       str := str  || ' AND  substr(bm.attribute2,1,instr(bm.attribute2,' || ' ''#:#'' ' || ')-
1) = '''|| p_service || '''  ';

           end if ;

     end if;


     if p_idType is not null then
           if firstCond='true' then
             begin
               str := str || ' ( bm.SENDER_ID_TYPE  = '''|| p_idType || '''   )';
               firstCond := 'false';
             end;
           else
              str := str || ' AND ( bm.SENDER_ID_TYPE  = '''|| p_idType || '''   )';
           end if;


     end if;
     if p_idVal is not null then
           if firstCond='true' then
             begin
               str := str || ' ( bm.SENDER_ID_VALUE  ='''|| p_idVal || '''  )';
               firstCond := 'false';
             end;
           else
              str := str || ' AND ( bm.SENDER_ID_VALUE  ='''|| p_idVal || '''   )';
           end if;

     end if;
     if p_docType is not null then
           if firstCond='true' then
             begin
               str := str || ' ( bm.DOCTYPE_NAME  ='''|| p_docType || '''  )';
               firstCond := 'false';
             end;
           else
              str := str || ' AND ( bm.DOCTYPE_NAME  ='''|| p_docType || '''   )';
           end if;

     end if;
          if firstCond='true' then
           begin
              str := str || '  bm.wire_message = wm.id (+)
             AND bm.ext_business_message = ext.id (+)
             AND bm.app_message = am.id (+) ';
          end;
         else
           begin
              str := str ||' AND  bm.wire_message = wm.id (+)
             AND bm.ext_business_message = ext.id (+)
             AND bm.app_message = am.id (+) ';
           end;
         end if;

       DBMS_OUTPUT.PUT_LINE(str);
        open b2b_refcur for

     'SELECT  bm.id, bm.state, bm.message_id, bm.payload_storage, bm.attachment_storage, bm.nat
ive_data_storage,
                  bm.translated_data_storage, wm.packed_message, wm.payload_storage wmps, am.payload,
am.attachment_storage amas
        FROM b2b_business_message bm, b2b_wire_message wm, b2b_app_message am, b2b_ext_busine
ss_message ext
        WHERE '  || str        ;



       DBMS_OUTPUT.PUT_LINE(str);



           if p_shouldArchive = 'true' then

       dbms_output.put_line('===========' ||  str  );
       tmpFileName := p_archiveFileName;

       if tmpFileName is  null then
         tmpFileName :=  to_char(sysdate, 'DD-Mon-YYYY-HH24:MI:SS');
         tmpFileName := tmpFileName || '.dmp';
       end if;

         B2B_ARCHIVE_INST_MSGS_PS5(p_startDate,p_endDate ,p_msgState ,p_tpName ,p_d
irection ,p_msgType ,p_tpaName ,p_action,p_service,p_idType ,p_idVal,p_docType,t
mpFileName);
     end if ;


  LOOP




  FETCH b2b_refcur INTO bizid, bizstate, message_id, payload_storage,
attachment_storage, native_data_storage, translated_data_storage,
packed_message, wmps, payload, amas;

DELETE FROM b2b_data_storage WHERE id in( payload_storage,packed_message);
       DELETE FROM b2b_data_storage WHERE id in(wmps,native_data_storage,translated_data_storage);
       DELETE FROM b2b_data_storage WHERE id in( attachment_storage,payload);



/*   DBMS_OUTPUT.PUT_LINE('Dheeraj ' || payload_storage); */

      IF MOD(b2b_refcur%ROWCOUNT, 1000) = 0 THEN
        COMMIT;
      END IF;


    EXIT WHEN b2b_refcur%NOTFOUND;
    END LOOP;
CLOSE b2b_refcur;
   COMMIT;


    /* Bug#8438439 */
    /*
     There could be entries in b2b_wiremessage table for which there are
     no corresponding entries in b2b_business_message table. Such entries
     would not get deleted in delete operation occuring above through b2b_cur
     cursor. We are deleting such entries here.

    */

/*
 *   for i in (
 *     select payload_storage, packed_message
 *     from b2b_wire_message wm
 *     where
 *     wm.created >= to_date(p_startDate, 'YYYY-MM-DD HH24:MI:SS')
 *        AND wm.created <= to_date(p_endDate, 'YYYY-MM-DD HH24:MI:SS') AND
 *             wm.created between nvl(to_date(null, 'YYYY-MM-DD HH24:MI:SS'),  nvl((select min(create
d) from b2b_wire_message),sysdate))
 *                        AND nvl(to_date(null, 'YYYY-MM-DD HH24:MI:SS'),    nvl((se
lect max(created) from b2b_wire_message),sysdate))
 *      AND wm.state like nvl(p_msgState,'%')
 *  )
 *  loop
 *    DELETE FROM b2b_data_storage where id = i.payload_storage;
 *    DELETE FROM b2b_data_storage where id = i.packed_message;
 *
 *  end loop;
 *
 *
 *  COMMIT;


     * There could be entries in b2b_app_message table for which there are
     * no corresponding entries in b2b_business_message table. Such entries
     * would not get deleted in delete operation occuring above through b2b_cur
     * cursor. We are deleting such entries here.
     *
 *   for i in (
 *     select payload, attachment_storage
 *     from b2b_app_message am
 *     where
 *     am.created >= to_date(p_startDate, 'YYYY-MM-DD HH24:MI:SS')
 *        AND am.created <= to_date(p_endDate, 'YYYY-MM-DD HH24:MI:SS') AND
 *        am.created between nvl(to_date(null, 'YYYY-MM-DD HH24:MI:SS'),  nvl((select min(created) from b2b_a
pp_message),sysdate))
 *                        AND nvl(to_date(null, 'YYYY-MM-DD HH24:MI:SS'),    nvl((select max(creat
ed) from b2b_app_message),sysdate))
 *     AND am.state like nvl(p_msgState,'%')
 *  )
 *  loop
 *    DELETE FROM b2b_data_storage where id in (i.payload, i.attachment_storage);
 *  end loop;
 *
 *  COMMIT;
 */


   EXCEPTION
      WHEN OTHERS THEN
         ROLLBACK;
         RAISE;
END B2B_PURGE_INST_MSGS_PS5;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','B2B_REFRESH_MV','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."B2B_REFRESH_MV" as
begin
        DBMS_MVIEW.REFRESH(LIST=>'b2b_system_mv', METHOD=>'c', ATOMIC_REFRESH=>false);
end b2b_refresh_mv;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','B2B_RESTORE_PROCEDURE','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."B2B_RESTORE_PROCEDURE" (filename in varchar2, source_schema in varchar2 d
efault null, target_schema in varchar2 default null)  AS
   l_handle    NUMBER;     -- not used
   ind NUMBER;              -- Loop index
   log_file VARCHAR2(100);  -- log file name derived from filename
  h1 NUMBER;               -- Data Pump job handle
  percent_done NUMBER;     -- Percentage of job complete
  job_state VARCHAR2(30);  -- To keep track of job state
  le ku$_LogEntry;         -- For WIP and error messages
  js ku$_JobStatus;        -- The job status from get_status
  jd ku$_JobDesc;          -- The job description from get_status
  sts ku$_Status;          -- The status object returned by get_status
BEGIN

log_file := filename || '.log';

dbms_output.put_line('disabling constraints');
B2B_DISABLE_CONSTRAINTS();
dbms_output.put_line('disabling constraints - done');


l_handle := DBMS_DATAPUMP.open(
        operation => 'IMPORT',
        job_mode => 'TABLE',
        job_name => 'IMPORT11');


        DBMS_DATAPUMP.add_file(
        handle => l_handle,
        filename => filename,
        directory => 'B2B_IMPORT_DIR'
        );

DBMS_DATAPUMP.add_file(
        handle => l_handle,
        filename => log_file,
        directory => 'B2B_IMPORT_DIR',
        filetype => DBMS_DATAPUMP.KU$_FILE_TYPE_LOG_FILE
        );
  DBMS_DATAPUMP.set_parameter(
        handle => l_handle,
        name => 'TABLE_EXISTS_ACTION',
        value => 'APPEND');

        IF source_schema IS NOT NULL AND target_schema IS NOT NULL THEN
        DBMS_DATAPUMP.METADATA_REMAP(handle => l_handle,
                            name => 'REMAP_SCHEMA',
                            old_value => source_schema,
                            value => target_schema);
        END IF;

DBMS_DATAPUMP.start_job(l_handle);
-- DBMS_DATAPUMP.detach(l_handle);
-- The export job should now be running. In the following loop, the job
-- is monitored until it completes. In the meantime, progress information is
-- displayed.

  percent_done := 0;
  job_state := 'UNDEFINED';
  while (job_state != 'COMPLETED') and (job_state != 'STOPPED') loop
    dbms_datapump.get_status(l_handle,
           dbms_datapump.ku$_status_job_error +
           dbms_datapump.ku$_status_job_status +
           dbms_datapump.ku$_status_wip,-1,job_state,sts);
    js := sts.job_status;

-- If the percentage done changed, display the new value.

    if js.percent_done != percent_done
    then
      dbms_output.put_line('*** Job percent done = ' ||
                           to_char(js.percent_done));
      percent_done := js.percent_done;
    end if;

-- If any work-in-progress (WIP) or error messages were received for the job,
-- display them.

   if (bitand(sts.mask,dbms_datapump.ku$_status_wip) != 0)
    then
      le := sts.wip;
    else
      if (bitand(sts.mask,dbms_datapump.ku$_status_job_error) != 0)
      then
        le := sts.error;
      else
        le := null;
      end if;
    end if;
    if le is not null
    then
      ind := le.FIRST;
      while ind is not null loop
        dbms_output.put_line(le(ind).LogText);
        ind := le.NEXT(ind);
      end loop;
    end if;
  end loop;

-- Indicate that the job finished and detach from it.

  dbms_output.put_line('Job has completed');
  dbms_output.put_line('Final job state = ' || job_state);
  dbms_datapump.detach(l_handle);


-- Now Enable the constraints
 dbms_output.put_line('Enabling constraints');
 B2B_ENABLE_CONSTRAINTS();
dbms_output.put_line('Enabling constraints - done');
EXCEPTION
 WHEN OTHERS THEN
 dbms_output.put_line('Error: ' || SQLERRM);
 dbms_output.put_line('Enabling constraints');
 B2B_ENABLE_CONSTRAINTS();
dbms_output.put_line('Enabling constraints - done');
  dbms_datapump.detach(l_handle);

END B2B_RESTORE_PROCEDURE;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','CLOSE_FILE','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."CLOSE_FILE" (write_file in out utl_file.file_type) is
   begin
        utl_file.fclose(write_file);
   end close_file;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','DEBUG_PURGE','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."DEBUG_PURGE" (table_name IN VARCHAR2, str IN VARCHAR2 default null,write_
file in utl_file.file_type default null) AS
BEGIN
$IF $$debug_on $THEN
      if str is NULL then
                 write_line(TO_CHAR(sysdate, 'DD-MON-YYYY HH24:MI:SS') || ' Number of rows in table ' || table
_name || ' ' || ' purged is : ' || SQL%ROWCOUNT,write_file);
     ELSE
                 write_line(TO_CHAR(sysdate, 'DD-MON-YYYY HH24:MI:SS') || ' Number of rows in ta
ble ' || table_name || ' ' || str || SQL%ROWCOUNT,write_file);
     END IF;
$ELSE
    null;
$END

END debug_purge;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','EDN_ADD_SHARED_CLUSTER','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."EDN_ADD_SHARED_CLUSTER" (cluster_name in varchar2) as
  sub sys.aq$_agent;
  cluster_table varchar2(64);
  cluster_queue varchar2(64);
  cluster_sub   varchar2(64);
  cluster_id    varchar2(10);
  seq_num       number;
begin
  if not edn_is_shared_mode() then
    raise_application_error(-20000, 'Error: EDN not in shared mode');
  end if;

  select edn_cluster_seq.nextval into seq_num from dual;

  cluster_id    := 'dm' || seq_num;
  cluster_table := 'edn_oaoo_' || cluster_id || '_table';
  cluster_queue := 'edn_oaoo_' || cluster_id || '_queue';
  cluster_sub   := 'edn_' || cluster_id || '_java_subscriber';

  /*  Add Cluster */
  insert into edn_clusters values (cluster_name, cluster_id);

  /*  Add Subscriber */
  sub := sys.aq$_agent(cluster_sub, NULL, NULL);
  DBMS_AQADM.add_subscriber(queue_name=>'edn_event_queue', subscriber=>sub);

  /*  Add OAOO Queue */
  DBMS_AQADM.create_queue_table(queue_table=>cluster_table,
      queue_payload_type=>'PRD_SOAINFRA.edn_oaoo_delivery', multiple_consumers=>TRUE);
  DBMS_AQADM.create_queue(queue_name=>cluster_queue, queue_table=>cluster_table);
  DBMS_AQADM.start_queue(queue_name=>cluster_queue);

  /*  Add OAOO Subscriber */
  sub := sys.aq$_agent('edn_oaoo_subscriber', NULL, NULL);
  DBMS_AQADM.add_subscriber(queue_name=>cluster_queue, subscriber=>sub);
end;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','EDN_CONTEXT_GET','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."EDN_CONTEXT_GET" (subject out varchar2, context out sys.xmltype)
as
begin
  subject := NULL;
  context := NULL;
end;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','EDN_DECOMPRESS_EVENT','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."EDN_DECOMPRESS_EVENT" (event in out edn_business_event)
as
  statement varchar2(2000);
begin
    statement := 'BEGIN :1 := ' || event.decomp_method || '(:2); END;';
    execute immediate statement using OUT event.payload, IN event.compressed_event;
    exception
      when others then
        NULL;  /* TODO: log */
end edn_decompress_event;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','EDN_DEQUEUE_BUS_EVENT','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."EDN_DEQUEUE_BUS_EVENT" (subscriber in varchar2, namespace out varchar2, l
ocal_name out varchar2,
     payload out clob, comp_event out decimal, decomp_proc out varchar2, source out char, targe
t out varchar2,
     subject_info out varchar2)  as
  d_opt         DBMS_AQ.dequeue_options_t;
  m_prop        DBMS_AQ.message_properties_t;
  m_handle      RAW(16);
  event_data    edn_event_data;
  event         edn_business_event;
  ret           pls_integer;
  log_id        number;
  no_messages   exception;
  PRAGMA EXCEPTION_INIT(no_messages, -25228);
begin
  d_opt.navigation := DBMS_AQ.first_message;
  d_opt.consumer_name := subscriber;
  d_opt.wait := 5;  /*Change to 30 before ship*/
  DBMS_AQ.dequeue(
    queue_name          =>  'PRD_SOAINFRA.edn_event_queue',
    dequeue_options     =>  d_opt,
    message_properties  =>  m_prop,
    payload             =>  event_data,
    msgid               =>  m_handle);
  event := event_data.event;
  namespace := event.namespace;
  local_name := event.local_name;
  if event.payload is not null then
    payload := event.payload.getClobVal();
  end if;
  comp_event := event.compressed_event;
  decomp_proc := event.decomp_method;
  target := event_data.target;
  source := event_data.publish_impl;
  subject_info := event_data.subject_info;

  log_id := edn_next_log_event_id;
  edn_log_message (log_id, 'Dequeued event: ' || namespace || '::' || local_name);
  edn_log_message (log_id, 'Subject name: "' || subject_info || '", AQ consumer: "' || subscriber
|| '"');
  if event.payload is not null then
    edn_log_message (log_id, 'Body: ' || event.payload.getStringVal());
  else
    edn_log_message (log_id, 'Event is compressed');
  end if;

  exception when no_messages then
  begin
    namespace := null;
    local_name := null;
  end;
end;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','EDN_DEQUEUE_OAOO_DELIVERY','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."EDN_DEQUEUE_OAOO_DELIVERY" (queueName in varchar2, target out varchar2, s
ubject_info out varchar2, payload out clob, msg_id out raw)  as
  d_opt             DBMS_AQ.dequeue_options_t;
  m_prop            DBMS_AQ.message_properties_t;
  m_handle          RAW(16);
  event_delivery    edn_oaoo_delivery;
  log_id            number;
  no_messages       exception;
  PRAGMA EXCEPTION_INIT(no_messages, -25228);
begin
  d_opt.navigation := DBMS_AQ.first_message;
  d_opt.consumer_name := 'edn_oaoo_subscriber';
  d_opt.wait := 5;   /* Change to 30 before shipping */

  DBMS_AQ.dequeue(
    queue_name          =>  queueName, /*queueName : edn_oaoo_queue*/
    dequeue_options     =>  d_opt,     /*d_opt.consumer_name : edn_oaoo_subscriber*/
    message_properties  =>  m_prop,
    payload             =>  event_delivery,
    msgid               =>  m_handle);
  target := event_delivery.target;
  payload := event_delivery.payload.getClobVal();
  msg_id := m_handle;
  subject_info := event_delivery.subject_info;

  log_id := edn_next_log_event_id;
  edn_log_message (log_id, 'Dequeued OAOO delivery. Subject name: "' || subject_info || '". Target: "' ||
target || '"');
  if event_delivery.payload is not null then
    edn_log_message (log_id, 'Body: ' || event_delivery.payload.getStringVal());
  else
    edn_log_message (log_id, 'Event is compressed');
  end if;

  exception when no_messages then
  begin
    payload := null;
    target := null;
  end;
end;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','EDN_DISABLE_SUBSCRIPTION','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."EDN_DISABLE_SUBSCRIPTION" (sid  number) as
begin
  update edn_event_subscriptions set enabled = 'N' where sub_id = sid;
end;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','EDN_ENABLE_LOGGING','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."EDN_ENABLE_LOGGING" (enabled in int) is
begin
  delete from edn_log_enabled;
  insert into edn_log_enabled values (enabled);
end;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','EDN_ENABLE_SUBSCRIPTION','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."EDN_ENABLE_SUBSCRIPTION" (sid  number) as
begin
  update edn_event_subscriptions set enabled = 'Y' where sub_id = sid;
end;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','EDN_ENQUEUE_BUSINESS_EVENT','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."EDN_ENQUEUE_BUSINESS_EVENT" (event in edn_business_event, source in char,

    subject_info in varchar2, target in varchar2, priority in BINARY_INTEGER) as
  e_opt                  DBMS_AQ.enqueue_options_t;
  m_prop                 DBMS_AQ.message_properties_t;
  m_handle               raw(16);
  message                anydata;
  immediate_subject_info varchar2(256);
  log_id                 number;
begin
  log_id := edn_next_log_event_id;
  edn_log_message (log_id, 'Enqueing event: ' || event.namespace || '::' || event.local_name || ' from ' ||
source);
  if event.payload is not null then
    edn_log_message (log_id, 'Body: ' || event.payload.getStringVal());
  else
    edn_log_message (log_id, 'Event is compressed');
  end if;
  if source = 'S' then
    immediate_subject_info := NULL;
  else
    immediate_subject_info := subject_info;
  end if;

  edn_log_message (log_id, 'Subject name: "' || subject_info || '"');

  for subscriber in
    (select edn_event_agents.agent_id agent, edn_event_agents.agent_callback cal
lback,
          edn_event_subscriptions.xpath_filter xpath_filter, edn_event_subscriptions.xpath_ns_map xpath_ns_map
      from
        edn_event_subscriptions, edn_event_agents
      where
        namespace=event.namespace and local_name=event.local_name and
            edn_event_agents.agent_id=edn_event_subscriptions.agent_id and
            edn_event_subscriptions.sub_level = 'I' and
            edn_event_subscriptions.enabled = 'Y')
  loop
    edn_log_message (log_id, 'Invoking immediate subscriber: ' || subscriber.agent);
    edn_filter_and_deliver_event (subscriber.agent, subscriber.callback, event,
        subscriber.xpath_filter, subscriber.xpath_ns_map, immediate_subject_info, log_id);
  end loop;

  m_prop.priority := priority;
  DBMS_AQ.enqueue(
    queue_name          => 'PRD_SOAINFRA.edn_event_queue',
    enqueue_options     => e_opt,
    message_properties  => m_prop,
    payload             => edn_event_data(event, source, subject_info, target),
    msgid               => m_handle);
  edn_log_message (log_id, 'Enqueing complete');
end;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','EDN_ENQUEUE_OAOO_DELIVERY','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."EDN_ENQUEUE_OAOO_DELIVERY" (queueName in varchar2, target varchar2, subje
ct_info varchar2,  payload in clob) as
  payload_xml   sys.xmltype;
  e_opt         DBMS_AQ.enqueue_options_t;
  m_prop        DBMS_AQ.message_properties_t;
  m_handle      raw(16);
  log_id        number;
begin
  log_id := edn_next_log_event_id;
  edn_log_message (log_id, 'Enqueuing OAOO delivery. Subject name: "' || subject_info || '". Target: "' || targe
t || '"');

  payload_xml := sys.xmltype.createXML(payload);
  if payload is not NULL then
    edn_log_message (log_id, 'Body: ' || payload_xml.getStringVal());
  else
    edn_log_message (log_id, 'Event is compressed');
  end if;

  DBMS_AQ.enqueue(
    queue_name         => queueName,
    enqueue_options    => e_opt,
    message_properties => m_prop,
    payload            => edn_oaoo_delivery(target, subject_info, payload_xml),
    msgid              => m_handle);
  edn_log_message (log_id, 'Enqueuing OAOO delivery complete');
end;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','EDN_ERROR_HANDLER','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."EDN_ERROR_HANDLER" (v_msgid raw, v_namespace varchar2,
  v_local_name varchar2, v_payload clob, v_target varchar2, v_target_type integer,
  v_error_code varchar2, v_error_type integer, v_error_msg varchar2,
  v_short_error_msg varchar2, v_state integer, v_sidecar varchar2) as
begin
  insert into edn_event_error_store values(v_msgid, v_namespace,
    v_local_name, v_target, v_target_type, v_payload, v_error_code,
    v_error_type, v_error_msg, v_short_error_msg, v_state, v_sidecar, CURRENT_TIMESTAMP);
/*  edn_debug('Stored faulted message with msg id = ' || v_msgid || ' into error
store!!'); */
end;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','EDN_EVENT_AGENT','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."EDN_EVENT_AGENT" (context RAW, reginfo SYS.AQ$_REG_INFO,
    descr SYS.AQ$_DESCRIPTOR, payload raw, payloadl NUMBER)  as
  dequeue_options    DBMS_AQ.dequeue_options_t;
  message_properties DBMS_AQ.message_properties_t;
  message_handle     raw(16);
  event              edn_business_event;
  event_data         edn_event_data;
  call_agent         integer;
  err_code           varchar2(50);
  err_msg            varchar2(2000);
  log_id             number;
begin
  dequeue_options.msgid         := descr.msg_id;
  dequeue_options.consumer_name := descr.consumer_name;
  dequeue_options.wait          := DBMS_AQ.no_wait;

  log_id := edn_next_log_event_id;
  edn_log_message (log_id, 'Starting EDN event agent (plsql) from source queue: ' || descr.qu
eue_name);

  DBMS_AQ.DEQUEUE(
    queue_name         => descr.queue_name,
    dequeue_options    => dequeue_options,
    message_properties => message_properties,
    payload            => event_data,
    msgid              => message_handle);

  event := event_data.event;
  edn_log_message (log_id, 'Dequeued event: ' || event.namespace || '::' || event.loc
al_name);
  edn_log_message (log_id, 'Subject name: "' || event_data.subject_info || '", AQ consumer: "' || descr.consum
er_name || '"');
  if event.payload is not null then
    edn_log_message (log_id, 'Body: ' || event.payload.getStringVal());
  else
    edn_log_message (log_id, 'Event is compressed');
  end if;

  for subscriber in
    (select edn_event_agents.agent_id agent, edn_event_agents.agent_callback callback,
          edn_event_subscriptions.xpath_filter xpath_filter, edn_event_subscriptions.xpath_ns_m
ap xpath_ns_map
      from
        edn_event_subscriptions, edn_event_agents
      where
        namespace=event.namespace and local_name=event.local_name and
            edn_event_agents.agent_id=edn_event_subscriptions.agent_id and
            edn_event_subscriptions.sub_level = 'D' and
            edn_event_subscriptions.enabled = 'Y')    /* D: Deferred subscription */
  loop
    begin
      edn_log_message (log_id, 'Invoking deferred subscriber: ' || subscriber.agent
);
      edn_filter_and_deliver_event (subscriber.agent, subscriber.callback, event,
          subscriber.xpath_filter, subscriber.xpath_ns_map, event_data.subject_info, log_id);
    exception
      when others then
        edn_log_message (log_id, 'Error in event subscriber: ' || sqlerrm);
/*
        err_code := TO_CHAR(SQLCODE);
        err_msg := SQLERRM;
        edn_error_handler(descr.msg_id, event.namespace, event.local_name,
          event.payload.getClobVal(), subscriber.agent, 0, err_code, 0,
          err_msg, SUBSTR(err_msg,1,200),1, subscriber.agent);
*/
    end;
  end loop;
end;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','EDN_FILTER_AND_DELIVER_EVENT','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."EDN_FILTER_AND_DELIVER_EVENT" (subscriber_agent in varchar2,
        subscriber_callback in varchar2, event_in in edn_business_event, xpath_filter in va
rchar2,
        xpath_ns_map in varchar2, subject_info in varchar2, log_id in number)
as
  call_agent         integer;
  lwsession_created  boolean;
  lwsession_id       raw(16);
  event              edn_business_event;
begin
  lwsession_created := false;
  event := event_in;

  if xpath_filter is null then
    call_agent := 1;
    edn_log_message (log_id, '  No XPath filter for subscription');
  else
    if event.payload is null then
      edn_decompress_event(event);
    end if;
    call_agent := event.payload.existsNode(xpath_filter, xpath_ns_map);
    edn_log_message (log_id, '  XPath filter result: ' || call_agent);
  end if;
  if call_agent > 0 then
    /*
    if subject_info is not null then
    edn_create_lw_session (subject_info, lwsession_id, lwsession_created);
    end if;
    */
    edn_log_message (log_id, '  Calling subscriber ' || subscriber_agent || ' via callback ' || subscriber_callbac
k);
    execute immediate 'begin ' || subscriber_callback || '(:1, :2, :3); end;'
      using event.namespace, event.local_name, event;
/*
if lwsession_created then
edn_close_lw_session (lwsession_id);
end if;
*/
  end if;
end;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','EDN_INIT_SHARED_EDN','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."EDN_INIT_SHARED_EDN" as
  sub sys.aq$_agent;
begin
  if edn_is_shared_mode() then
    raise_application_error(-20000, 'Error: EDN already in shared mode');
  end if;

  delete from edn_clusters;

  /*  Remove the default Java Subscriber */
  sub := sys.aq$_agent('edn_java_subscriber', NULL, NULL);
  DBMS_AQADM.remove_subscriber(queue_name=>'edn_event_queue', subscriber=>sub);

  /*  Remove the default OAOO Queue */
  DBMS_AQADM.stop_queue(queue_name=>'edn_oaoo_queue');
  DBMS_AQADM.drop_queue(queue_name=>'edn_oaoo_queue');
  DBMS_AQADM.drop_queue_table(queue_table=>'edn_oaoo_delivery_table');
end;




SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','EDN_INTERNAL_DECOMPRESS_EVENT','PRD_SOAINFRA'
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."EDN_INTERNAL_DECOMPRESS_EVENT" (compressed_event in decimal,
        decomp_method in varchar2, payload_clob out clob)
as
  statement varchar2(2000);
  payload sys.xmltype;
begin
    statement := 'BEGIN :1 := '||decomp_method||'(:2); END;';
    execute immediate statement using OUT payload, IN compressed_event;
    payload_clob := payload.getClobVal();
    exception
      when others then
        NULL;  /*TODO: log */
end;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','EDN_INTERNAL_PUBLISH_EVENT','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."EDN_INTERNAL_PUBLISH_EVENT" (namespace in varchar2, local_name in varchar
2,
    payload in clob, source in char, target in varchar2, subject_info in varchar2, priority in BINARY_INTEGER) as
begin
  edn_enqueue_business_event (edn_business_event(namespace, local_name,
      sys.xmltype.createXML(payload), NULL, NULL), source, subject_info, target, pr
iority);
end;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','EDN_LOG_MESSAGE','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."EDN_LOG_MESSAGE" (event_id number, msg clob) as
  PRAGMA AUTONOMOUS_TRANSACTION;
  tmp clob;
begin
  if edn_logging_enabled = 1 then
    tmp := msg || ' [@' || TO_CHAR(sysdate, 'DD-MON-YYYY HH:MI:SS') || ']';
    insert into edn_log_messages values(edn_log_seq.nextval, event_id, tmp);
  end if;
  commit;
end;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','EDN_LOOKUP_CLUSTER_ID','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."EDN_LOOKUP_CLUSTER_ID" (cluster_nm in varchar2, dm_id out varchar2) as
begin
  select cluster_id into dm_id from edn_clusters where cluster_name = cluster_nm;
end;




SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','EDN_PUBLISH_COMPRESSED_EVENT','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."EDN_PUBLISH_COMPRESSED_EVENT" (namespace in varchar2, local_name in varch
ar2,
    compressed_event in decimal, decomp_method in varchar2, priority in binary_integer default 5) as
  subject_info varchar2(256);
begin
  /* edn_get_lw_subject (subject_info); */
  edn_enqueue_business_event (edn_business_event(namespace, local_name, NULL, compressed_even
t, decomp_method),
    'S', NULL, subject_info, priority);
end;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','EDN_PUBLISH_EVENT','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."EDN_PUBLISH_EVENT" (namespace in varchar2, local_name in varchar2,
      payload in clob, priority in binary_integer default 5) as
  subject_info varchar2(256);
  context sys.xmltype;
  payloadCopy clob;
  eventXML sys.xmltype;
  contextEl sys.xmltype;
begin
  edn_context_get(subject_info, context);

  if context is not NULL then
    eventXML := sys.xmltype.createXML(payload);
    contextEl := sys.xmltype.createXML('<context xmlns="http://oracle.com/fabric/businessEve
nt"></context>');
    eventXML := sys.xmltype.appendChildXML (eventXML, '/e:business-event', contextEl,
        'xmlns:e="http://oracle.com/fabric/businessEvent"');
    eventXML := sys.xmltype.appendChildXML (eventXML, '/e:business-event/e:context', context,
        'xmlns:e="http://oracle.com/fabric/businessEvent"');
    payloadCopy := eventXML.getClobVal;
  else
    payloadCopy := payload;
  end if;

  edn_internal_publish_event (namespace, local_name, payloadCopy, 'S', NULL, subject_info, priority);
end;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','EDN_REGISTER_AGENT','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."EDN_REGISTER_AGENT" (agent_id varchar2, agent_callback varchar2) as
begin
  insert into edn_event_agents values (agent_id, agent_callback);
end;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','EDN_REMOVE_SHARED_CLUSTER','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."EDN_REMOVE_SHARED_CLUSTER" (cluster_nm in varchar2) as
  sub sys.aq$_agent;
  cluster_table varchar2(64);
  cluster_queue varchar2(64);
  cluster_sub   varchar2(64);
  dm_id         varchar2(64);
begin
  if not edn_is_shared_mode() then
    raise_application_error(-20000, 'Error: EDN not in shared mode');
  end if;

  select cluster_id into dm_id from edn_clusters where cluster_name = cluster_nm;

  cluster_table := 'edn_oaoo_' || dm_id || '_table';
  cluster_queue := 'edn_oaoo_' || dm_id || '_queue';
  cluster_sub   := 'edn_' || dm_id || '_java_subscriber';

  /*  Remove Cluster */
  delete from edn_clusters where edn_clusters.cluster_name = cluster_name;

  /*  Remove Subscriber */
  sub := sys.aq$_agent(cluster_sub, NULL, NULL);
  DBMS_AQADM.remove_subscriber(queue_name=>'edn_event_queue', subscriber=>sub);

  /*  Remove OAOO Queue */
  DBMS_AQADM.stop_queue(queue_name=>cluster_queue);
  DBMS_AQADM.drop_queue(queue_name=>cluster_queue);
  DBMS_AQADM.drop_queue_table(queue_table=>cluster_table);
end;




SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','EDN_SUBSCRIBE','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."EDN_SUBSCRIBE" (agent_id varchar2, namespace varchar2,
        local_name varchar2, xpath_filter varchar2, xpath_ns_map varchar2, sub_id out number) as
  counter number;
  agent_not_found_exception exception;
  cursor c is select count(*) from edn_event_agents eea where eea.agent_id=agent_id;
begin
  open c;
  fetch c into counter;

  if (counter > 0) then
         select  edn_subscription_seq.nextval into sub_id from dual;
        insert into edn_event_subscriptions values (sub_id, agent_id, namespace, local_name, 'D
', 'Y',
           xpath_filter, xpath_ns_map);
           /* D: Deferred; Y: enabled */
  end if;
end;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','EDN_SUBSCRIBE_IMMEDIATE','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."EDN_SUBSCRIBE_IMMEDIATE" (agent_id varchar2, namespace varchar2,
        local_name varchar2, xpath_filter varchar2, xpath_ns_map varchar2, sub_id out n
umber) as
begin
  select edn_subscription_seq.nextval into sub_id from dual;
  insert into edn_event_subscriptions values (sub_id, agent_id, namespace, local_na
me, 'I', 'Y', xpath_filter, xpath_ns_map);
        /* I: Immeidate; Y: enabled */
end;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','EDN_SUBSCRIPTION_EXISTS','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."EDN_SUBSCRIPTION_EXISTS" (sid in number, exsts out number) is
begin
  select count(*) into exsts from edn_event_subscriptions subs where subs.sub_id = si
d;
end;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','EDN_UNINIT_SHARED_EDN','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."EDN_UNINIT_SHARED_EDN" as
  sub sys.aq$_agent;
begin
  if not edn_is_shared_mode() then
    raise_application_error(-20000, 'Error: EDN not in shared mode');
  end if;

  /*  Remove all clusters */
  for cluzter in
      (select cluster_name from edn_clusters)
  loop
    edn_remove_shared_cluster(cluzter.cluster_name);
  end loop;

  insert into edn_clusters values ('$$$$INTERNAL$$$$', 'standalone');

  /*  Re-add Java subscriber */
  sub := sys.aq$_agent('edn_java_subscriber', NULL, NULL);
  DBMS_AQADM.add_subscriber(queue_name=>'edn_event_queue', subscriber=>sub);

  /*  Re-add OAOO queue and listener */
  DBMS_AQADM.create_queue_table(
    queue_table         => 'edn_oaoo_delivery_table',
    queue_payload_type  => 'PRD_SOAINFRA.edn_oaoo_delivery',
    multiple_consumers  => TRUE);
  DBMS_AQADM.create_queue(
    queue_name          => 'edn_oaoo_queue',
    queue_table         => 'edn_oaoo_delivery_table');
  DBMS_AQADM.start_queue(queue_name=>'edn_oaoo_queue');

  sub := sys.aq$_agent('edn_oaoo_subscriber', NULL, NULL);
  DBMS_AQADM.add_subscriber(queue_name=>'edn_oaoo_queue', subscriber=>sub);
end;




SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','EDN_UNREGISTER_AGENT','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."EDN_UNREGISTER_AGENT" (id varchar2) as
begin
  delete from edn_event_subscriptions where agent_id = id;
  delete from edn_event_agents where agent_id = id;
end;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','EDN_UNSUBSCRIBE','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."EDN_UNSUBSCRIBE" (sid  number) as
begin
  delete from edn_event_subscriptions where sub_id = sid;
end;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','EDN_UNSUBSCRIBE_ALL','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."EDN_UNSUBSCRIBE_ALL" (id varchar2) as
begin
  delete from edn_event_subscriptions where agent_id = id;
end;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','GET_WIREMESSAGE_PID','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."GET_WIREMESSAGE_PID" (PROMSGID IN B2B_WIRE_MESSAGE.PROTOCOL_MESSAGE_ID%TY
PE, DATAOUT OUT WIRE_MESSAGE_TYPES.WDATA) AS
BEGIN
  OPEN DATAOUT FOR
  SELECT
   /*+ INDEX(B2B_WIRE_MESSAGE B2B_IDX_WM_PROT_MSGID) */ *
  FROM B2B_WIRE_MESSAGE
  WHERE PROTOCOL_MESSAGE_ID = PROMSGID;
END;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','GET_WIREMESSAGE_PIDPCID','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."GET_WIREMESSAGE_PIDPCID" (PROMSGID IN B2B_WIRE_MESSAGE.PROTOCOL_MESSAGE_I
D%TYPE, PROCOLID IN B2B_WIRE_MESSAGE.PROTOCOL_COLLABORATION_ID%TYPE, DATAOUT OUT
 WIRE_MESSAGE_TYPES.WDATA) AS
BEGIN
  OPEN DATAOUT FOR
  SELECT
   /*+ INDEX(B2B_WIRE_MESSAGE B2B_IDX_WM_PROT) */ *
  FROM B2B_WIRE_MESSAGE
  WHERE PROTOCOL_MESSAGE_ID = PROMSGID AND PROTOCOL_COLLABORATION_ID = PROCOLID;
END;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','IS_ACTIVE','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."IS_ACTIVE" (inst in varchar2, elapsed in number, res out number) as
pragma autonomous_transaction;
CURSOR c1 IS SELECT INSTANCE, LASTUPDATE FROM B2B_HA_REGISTRY for UPDATE;
reg_rec        c1%ROWTYPE;
dummy        INTEGER;
BEGIN
   res := 0;
   OPEN c1;

   FETCH c1 INTO reg_rec;

       IF c1%NOTFOUND THEN
   insert into B2B_HA_REGISTRY values (inst, SYSDATE);
   res := 1;
       ELSE
       IF reg_rec.INSTANCE = inst THEN
       update B2B_HA_REGISTRY set LASTUPDATE = SYSDATE;
       res := 1;
       ELSE
       IF SYSDATE - reg_rec.LASTUPDATE > elapsed/1440 THEN
       delete B2B_HA_REGISTRY;
       insert into B2B_HA_REGISTRY values (inst, SYSDATE);
       res := 1;
           END IF;
       END IF;
   END IF;
   CLOSE c1;
   COMMIT;
END;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','LOG_ERROR','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."LOG_ERROR" (message in varchar2,write_file utl_file.file_type default nul
l) is
begin
            write_line(TO_CHAR(sysdate, 'DD-MON-YYYY HH24:MI:SS') ||'
: '||message ||'. Error Code = '||SQLCODE||', Error Message = '||SQLERRM,write_file);
end log_error;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','LOG_INFO','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."LOG_INFO" (message in varchar2, write_file utl_file.file_type default nul
l) is

begin
  $IF $$debug_on $THEN
           write_line(TO_CHAR(sysdate, 'DD-MON-YYYY HH24:MI:SS') ||' : '||message,write_fil
e);
  $ELSE
     null;
  $END
end log_info;   



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','PC_CREATEASSIGNEEHISTORY','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."PC_CREATEASSIGNEEHISTORY" (
                          v_taskId IN VARCHAR2,
                          v_maxVersion IN NUMBER,
                          v_assignee IN VARCHAR2)
IS
BEGIN
   IF v_assignee IS NOT NULL THEN
     UPDATE PC_TASKASSIGNEEHISTORY
        SET MaxVersion = v_maxVersion
        WHERE taskId = v_taskId
        AND assignee = v_assignee
        AND MaxVersion is NULL
        AND version <= v_maxVersion;

      DELETE FROM PC_TASKASSIGNEE
          WHERE taskId = v_taskId
                   AND assignee = v_assignee
                   AND version <= v_maxVersion;
    ELSE
      UPDATE PC_TASKASSIGNEEHISTORY
        SET MaxVersion = v_maxVersion
        WHERE taskId = v_taskId
              AND MaxVersion is NULL
              AND version <= v_maxVersion;

      DELETE FROM PC_TASKASSIGNEE
          WHERE taskId = v_taskId
            AND version <= v_maxVersion ;

    END IF;

EXCEPTION
  WHEN OTHERS THEN
     raise_application_error(-20001,
       'Exception while creating Assignee history ', true);
END;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','PC_INSERTASSIGNEE','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."PC_INSERTASSIGNEE" (
                            v_taskId IN VARCHAR2,
                            v_version IN NUMBER,
                            v_assignee IN VARCHAR2,
                            v_guid IN VARCHAR2,
                            v_isGroup IN VARCHAR2)
IS
BEGIN
  INSERT INTO PC_TASKASSIGNEEHISTORY
        (taskId, version ,  Assignee,guid,isGroup)
        VALUES(v_taskId,v_version,v_assignee,v_guid,v_isGroup);
  INSERT INTO PC_TASKASSIGNEE
        (taskId, version ,  Assignee,guid,isGroup)
        VALUES(v_taskId,v_version,v_assignee,v_guid,v_isGroup);


EXCEPTION
  WHEN OTHERS THEN
     raise_application_error(-20001,
       'Exception while creating Assignee history ', true);
END;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','PURGE_ALL','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."PURGE_ALL" as
BEGIN
        dbms_output.put_line('disabling constraints');
        B2B_DISABLE_CONSTRAINTS();
        dbms_output.put_line('disabling constraints - done');

        EXECUTE IMMEDIATE 'truncate table B2B_CONTROL_NUMBER';
        EXECUTE IMMEDIATE 'truncate table B2B_PENDING_MESSAGE';
        EXECUTE IMMEDIATE 'truncate table B2B_BATCH_EVENT';
        EXECUTE IMMEDIATE 'truncate table B2B_TRANSPORT_MANAGER';
        EXECUTE IMMEDIATE 'truncate table B2B_HA_REGISTRY';
        EXECUTE IMMEDIATE 'truncate table B2B_LIFECYCLE';
        EXECUTE IMMEDIATE 'truncate table B2B_SEQUENCE_MANAGER';
        EXECUTE IMMEDIATE 'truncate table B2B_CTL_NUMBER';
        EXECUTE IMMEDIATE 'truncate table B2B_CONTROL_NUMBER_SET';

        EXECUTE IMMEDIATE 'truncate table B2B_BUSINESS_MESSAGE';
        EXECUTE IMMEDIATE 'truncate table B2B_WIRE_MESSAGE';
        EXECUTE IMMEDIATE 'truncate table B2B_EXT_BUSINESS_MESSAGE';
        EXECUTE IMMEDIATE 'truncate table B2B_APP_MESSAGE';
        EXECUTE IMMEDIATE 'truncate table B2B_DATA_STORAGE';

         /* Now Enable the constraints */
        dbms_output.put_line('Enabling constraints');
        B2B_ENABLE_CONSTRAINTS();
        dbms_output.put_line('Enabling constraints - done');
END;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','PURGE_B2B_INSTANCES_DOWN','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."PURGE_B2B_INSTANCES_DOWN" (p_lower_band DATE, p_upper_band DATE, givenSta
te IN VARCHAR2, p_rownum NUMBER default 1000, p_stop_time INTEGER default NULL)
AS
  v_counter NUMBER := 1;
  v_startdate timestamp := sysdate;
  v_loopstart timestamp;
  v_loopend timestamp;
  v_stoptime date := sysdate + NVL(p_stop_time,24*60)/(24*60);
  v_nr_rows integer := 0;
  v_nextloop BOOLEAN := TRUE;
  v_timeout BOOLEAN := FALSE;
  v_code NUMBER;
  v_errm VARCHAR2(90);
  v_stmt VARCHAR2(100);
  v_sqlstmt varchar2(2000);
  v_wireState VARCHAR2(100);
  has_rows_bm_instance boolean := FALSE;
  has_rows_wm_instance boolean := FALSE;
  has_rows_am_instance boolean := FALSE;

BEGIN
v_stmt := 'Start';
execute immediate 'alter session force parallel dml parallel 8';

/* before starting clean up temp tables */
EXECUTE IMMEDIATE 'TRUNCATE TABLE b2b_purge_temp_bm';
EXECUTE IMMEDIATE 'TRUNCATE TABLE b2b_purge_temp_wm';
EXECUTE IMMEDIATE 'TRUNCATE TABLE b2b_purge_temp_am';

/* avoid unwanted execution plans  */
   execute immediate 'alter session set "_optimizer_sortmerge_join_enabled"=false';
   execute immediate 'alter session set "_optimizer_mjc_enabled"=false';
   execute immediate 'alter session set "_optimizer_cartesian_enabled"=false';
/* and set MBRC high to boost Full Table Scans */
   execute immediate 'alter session set db_file_multiblock_read_count=128';

   execute immediate 'ALTER TABLE B2B_WIRE_MESSAGE DROP CONSTRAINT B2B_WM_DS_FK';
   execute immediate 'ALTER TABLE B2B_WIRE_MESSAGE DROP CONSTRAINT B2B_WM_PS_FK';
   execute immediate 'ALTER TABLE B2B_BUSINESS_MESSAGE DROP CONSTRAINT B2B_BM_WM_FK';
   execute immediate 'ALTER TABLE B2B_BUSINESS_MESSAGE DROP CONSTRAINT B2B_BM_AM_FK';
   execute immediate 'ALTER TABLE B2B_BUSINESS_MESSAGE DROP CONSTRAINT B2B_BM_NDS_FK';
   execute immediate 'ALTER TABLE B2B_BUSINESS_MESSAGE DROP CONSTRAINT B2B_BM_TDS_FK';
   execute immediate 'ALTER TABLE B2B_BUSINESS_MESSAGE DROP CONSTRAINT B2B_BM_AS_FK';

   execute immediate 'ALTER TABLE B2B_BUSINESS_MESSAGE DROP CONSTRAINT B2B_BM_EBM_FK';
   execute immediate 'ALTER TABLE B2B_BUSINESS_MESSAGE DROP CONSTRAINT B2B_BM_PS_FK';
   execute immediate 'ALTER TABLE B2B_EXT_BUSINESS_MESSAGE DROP CONSTRAINT B2B_EBM_BM_FK';
   execute immediate 'ALTER TABLE B2B_APP_MESSAGE DROP CONSTRAINT B2B_AM_PAYLOAD_FK';
   execute immediate 'ALTER TABLE B2B_APP_MESSAGE DROP CONSTRAINT B2B_AM_BM_FK';
   execute immediate 'ALTER TABLE B2B_APP_MESSAGE DROP CONSTRAINT B2B_AM_AS_FK';

/* here starts the loop */
v_stmt := 'Jump into Loop BM';

WHILE v_nextloop = TRUE LOOP

   v_nextloop := FALSE;
   has_rows_bm_instance := FALSE;
   dbms_output.put_line('======Start run '|| v_counter||' '|| p_rownum||' rows to delete======');

/* Populate table with information about older instances */
   v_stmt := 'Insert into b2b_purge_temp_bm';
   debug_purge('b2b_purge_temp_bm', 'Before');
insert into b2b_purge_temp_bm(bm_id, bm_message_id, bm_payload_storage, bm_attachment_s
torage, bm_native_data_storage, bm_translated_data_storage, wm_packed_message, w
m_payload_storage, am_payload, am_attachment_storage, ext_bm_id, am_id, wm_id)
      SELECT bm.id, bm.message_id, bm.payload_storage, bm.attachment_storage, bm
.native_data_storage,
              bm.translated_data_storage,
              wm.packed_message, wm.payload_storage,
              am.payload, am.attachment_storage, ext.id, am.id, wm.id
       FROM b2b_business_message bm, b2b_wire_message wm, b2b_app_message am, b2b_ext_business_me
ssage ext
       WHERE
       TRUNC(bm.CPST_INST_CREATED_TIME) BETWEEN TRUNC(p_lower_band) AND TRUNC(p_upper_band) AND
       bm.state = givenState AND
       bm.wire_message = wm.id (+)
       AND bm.ext_business_message = ext.id (+)
       AND bm.app_message = am.id (+)
       AND rownum <= p_rownum;

   debug_purge('b2b_purge_temp_bm', 'After');
   IF SQL%ROWCOUNT > 0 THEN
       has_rows_bm_instance := TRUE;
   END IF;

   IF SQL%ROWCOUNT = p_rownum THEN
       v_nextloop := TRUE ;
   END IF;

   COMMIT;

IF has_rows_bm_instance = TRUE
THEN

   v_stmt := 'delete from b2b_business_message';
   debug_purge('b2b_business_message', 'Before');

   DELETE FROM b2b_business_message
         WHERE id in (select bm_id from b2b_purge_temp_bm);
   debug_purge('b2b_business_message', 'After');

   IF givenState='MSG_WAIT_BATCH' THEN
      DELETE FROM b2b_pending_message where message_id in (select bm_id from b2b_purge_temp_bm);
   END IF;

   v_stmt := 'delete from b2b_ext_business_message';
   debug_purge('b2b_ext_business_message', 'Before');

   DELETE FROM b2b_ext_business_message
         WHERE id in (select ext_bm_id from b2b_purge_temp_bm);
   debug_purge('b2b_ext_business_message', 'After');

   v_stmt := 'delete from b2b_app_message';
   debug_purge('b2b_app_message', 'Before');

   DELETE FROM b2b_app_message
         WHERE id in (select am_id from b2b_purge_temp_bm);
   debug_purge('b2b_app_message', 'After');

   v_stmt := 'delete from b2b_wire_message';
   debug_purge('b2b_wire_message', 'Before');

   DELETE FROM b2b_wire_message
         WHERE id in (select wm_id from b2b_purge_temp_bm);
   debug_purge('b2b_wire_message', 'After');

   v_stmt := 'delete from b2b_data_storage bm_payload_storage';
   debug_purge('b2b_data_storage', 'Before');

   DELETE FROM b2b_data_storage
         WHERE id in (select bm_payload_storage from  b2b_purge_temp_bm);
   debug_purge('b2b_data_storage', 'After');

   v_stmt := 'delete from b2b_data_storage bm_attachment_storage';
   debug_purge('b2b_data_storage', 'Before');

   DELETE FROM b2b_data_storage
         WHERE id in (select bm_attachment_storage from  b2b_purge_temp_bm);
   debug_purge('b2b_data_storage', 'After');

   v_stmt := 'delete from b2b_data_storage bm_native_data_storage';
   debug_purge('b2b_data_storage', 'Before');

   DELETE FROM b2b_data_storage
         WHERE id in (select bm_native_data_storage from  b2b_purge_temp_bm);
   debug_purge('b2b_data_storage', 'After');

   v_stmt := 'delete from b2b_data_storage bm_translated_data_storage';
   debug_purge('b2b_data_storage', 'Before');

   DELETE FROM b2b_data_storage
         WHERE id in (select bm_translated_data_storage from  b2b_purge_temp_bm);
   debug_purge('b2b_data_storage', 'After');

   v_stmt := 'delete from b2b_data_storage wm_packed_message';
   debug_purge('b2b_data_storage', 'Before');

   DELETE FROM b2b_data_storage
         WHERE id in (select wm_packed_message from b2b_purge_temp_bm);
   debug_purge('b2b_data_storage', 'After');

   v_stmt := 'delete from b2b_data_storage wm_payload_storage';
   debug_purge('b2b_data_storage', 'Before');

   DELETE FROM b2b_data_storage
         WHERE id in (select wm_payload_storage from b2b_purge_temp_bm);
   debug_purge('b2b_data_storage', 'After');

   v_stmt := 'delete from b2b_data_storage am_payload';
   debug_purge('b2b_data_storage', 'Before');

   DELETE FROM b2b_data_storage
         WHERE id in (select am_payload  from  b2b_purge_temp_bm);
   debug_purge('b2b_data_storage', 'After');

   v_stmt := 'delete from b2b_data_storage am_attachment_storage';
   debug_purge('b2b_data_storage', 'Before');

   DELETE FROM b2b_data_storage
         WHERE id in (select am_attachment_storage from  b2b_purge_temp_bm);
   debug_purge('b2b_data_storage', 'After');

   delete b2b_purge_temp_bm;

   COMMIT;

END IF;


   IF (sysdate >= v_stoptime) THEN
     v_timeout := TRUE;
     v_nextloop := FALSE;
   END IF;

v_stmt := 'End Loop BM';
END LOOP;

IF (v_timeout = FALSE) THEN
   v_stmt := 'Jump into Loop WM';
   v_nextloop := TRUE;
END IF;

WHILE v_nextloop = TRUE LOOP

   v_nextloop := FALSE;
   has_rows_wm_instance := FALSE;
   dbms_output.put_line('======Start run '|| v_counter||' '|| p_rownum||' rows to delete===
===');

   IF givenState = 'MSG_COMPLETE' THEN
      v_wireState := 'COMPLETE';
   ELSE IF givenState = 'MSG_ERROR' THEN
      v_wireState := 'ERROR';
   ELSE v_wireState := 'PROCESSING';
        END IF;
   END IF;

/* Populate table with information about older instances */
   v_stmt := 'Insert into b2b_purge_temp_wm';
   debug_purge('b2b_purge_temp_wm', 'Before');
insert into b2b_purge_temp_wm(wm_id, wm_payload_storage, wm_packed_message)        SELECT wm.id, wm.payload_sto
rage, wm.packed_message
       FROM b2b_wire_message wm
       WHERE
       TRUNC(wm.CPST_INST_CREATED_TIME) BETWEEN TRUNC(p_lower_band) AND TRUNC(p_upper_band) AND       wm.state
 = v_wireState AND
       rownum <= p_rownum;

   debug_purge('b2b_purge_temp_wm', 'After');
   IF SQL%ROWCOUNT > 0 THEN
       has_rows_wm_instance := TRUE;
   END IF;

   IF SQL%ROWCOUNT = p_rownum THEN
       v_nextloop := TRUE ;
   END IF;

   COMMIT;

IF has_rows_wm_instance = TRUE
THEN

   v_stmt := 'delete from b2b_wire_message';
   debug_purge('b2b_wire_message', 'Before');

   DELETE FROM b2b_wire_message
         WHERE id in (select wm_id from b2b_purge_temp_wm);
   debug_purge('b2b_wire_message', 'After');

   v_stmt := 'delete from b2b_data_storage wm_payload_storage';
   debug_purge('b2b_data_storage', 'Before');

   DELETE FROM b2b_data_storage
         WHERE id in (select wm_payload_storage from b2b_purge_temp_wm);
   debug_purge('b2b_data_storage', 'After');

   v_stmt := 'delete from b2b_data_storage wm_packed_message';
   debug_purge('b2b_data_storage', 'Before');

   DELETE FROM b2b_data_storage
         WHERE id in (select wm_packed_message from b2b_purge_temp_wm);
   debug_purge('b2b_data_storage', 'After');

   delete b2b_purge_temp_wm;

   COMMIT;

END IF;


   IF (sysdate >= v_stoptime) THEN
     v_timeout := TRUE;
     v_nextloop := FALSE;
   END IF;

v_stmt := 'End Loop WM';
END LOOP;

IF (v_timeout = FALSE) THEN
   v_stmt := 'Jump into Loop AM';
   v_nextloop := TRUE;
END IF;


WHILE v_nextloop = TRUE LOOP

   v_nextloop := FALSE;
   has_rows_am_instance := FALSE;
   dbms_output.put_line('======Start run '|| v_counter||' '|| p_rownum||' rows to delete======');

/* Populate table with information about older instances */
   v_stmt := 'Insert into b2b_purge_temp_am';
   debug_purge('b2b_purge_temp_am', 'Before');
insert into b2b_purge_temp_am(am_id, am_payload, am_attachment_storage)        SELECT am.id
, am.payload, am.attachment_storage
       FROM b2b_app_message am
       WHERE
       TRUNC(am.CPST_INST_CREATED_TIME) BETWEEN TRUNC(p_lower_band) AND TRUNC(p_upper_band) AND
       am.state = givenState AND
       rownum <= p_rownum;

   debug_purge('b2b_purge_temp_am', 'After');
   IF SQL%ROWCOUNT > 0 THEN
       has_rows_am_instance := TRUE;
   END IF;

   IF SQL%ROWCOUNT = p_rownum THEN
       v_nextloop := TRUE ;
   END IF;

   COMMIT;

IF has_rows_wm_instance = TRUE
THEN

   v_stmt := 'delete from b2b_app_message';
   debug_purge('b2b_app_message', 'Before');

   DELETE FROM b2b_app_message
         WHERE id in (select am_id from b2b_purge_temp_am);
   debug_purge('b2b_app_message', 'After');

   v_stmt := 'delete from b2b_data_storage am_payload';
   debug_purge('b2b_data_storage', 'Before');

   DELETE FROM b2b_data_storage
         WHERE id in (select am_payload  from  b2b_purge_temp_am);
   debug_purge('b2b_data_storage', 'After');

   v_stmt := 'delete from b2b_data_storage am_attachment_storage';
   debug_purge('b2b_data_storage', 'Before');

   DELETE FROM b2b_data_storage
         WHERE id in (select am_attachment_storage from  b2b_purge_temp_am);
   debug_purge('b2b_data_storage', 'After');

   delete b2b_purge_temp_am;

   COMMIT;

END IF;


   IF (sysdate >= v_stoptime) THEN
     v_nextloop := FALSE;
   END IF;

v_stmt := 'End Loop AM';
END LOOP;

/* WireMessage */
execute immediate 'ALTER TABLE B2B_WIRE_MESSAGE ADD CONSTRAINT B2B_WM_DS_FK FOREIGN KEY(PA
CKED_MESSAGE) REFERENCES B2B_DATA_STORAGE (ID) ON DELETE CASCADE ENABLE';
execute immediate 'ALTER TABLE B2B_WIRE_MESSAGE ADD CONSTRAINT B2B_WM_PS_FK FOREIGN KE
Y(PAYLOAD_STORAGE) REFERENCES B2B_DATA_STORAGE (ID)  ON DELETE CASCADE  ENABLE';


/* BusinessMessage */

execute immediate 'ALTER TABLE B2B_BUSINESS_MESSAGE ADD CONSTRAINT B2B_BM_WM_FK FOREIGN KEY (WI
RE_MESSAGE) REFERENCES B2B_WIRE_MESSAGE (ID) ON DELETE CASCADE  ENABLE';
execute immediate 'ALTER TABLE B2B_BUSINESS_MESSAGE ADD CONSTRAINT B2B_BM_AM_FK FOREIGN
 KEY (APP_MESSAGE) REFERENCES B2B_APP_MESSAGE (ID) ON DELETE CASCADE  ENABLE';
execute immediate 'ALTER TABLE B2B_BUSINESS_MESSAGE ADD CONSTRAINT B2B_BM_NDS_FK
FOREIGN KEY (NATIVE_DATA_STORAGE) REFERENCES B2B_DATA_STORAGE (ID)  ON DELETE CA
SCADE ENABLE';
execute immediate 'ALTER TABLE B2B_BUSINESS_MESSAGE ADD CONSTRAINT B2B_BM_TDS_FK FOREIGN KEY (TRANSLATED_
DATA_STORAGE) REFERENCES B2B_DATA_STORAGE (ID)  ON DELETE CASCADE  ENABLE';
execute immediate 'ALTER TABLE B2B_BUSINESS_MESSAGE ADD CONSTRAINT B2B_BM_AS_FK FORE
IGN KEY (ATTACHMENT_STORAGE) REFERENCES B2B_DATA_STORAGE (ID)  ON DELETE CASCADE
 ENABLE';
execute immediate 'ALTER TABLE B2B_BUSINESS_MESSAGE ADD CONSTRAINT B2B_BM_EBM_FK FOREIGN KEY (EXT_BUSINESS_MES
SAGE) REFERENCES B2B_EXT_BUSINESS_MESSAGE (ID) ON DELETE CASCADE ENABLE';
execute immediate 'ALTER TABLE B2B_BUSINESS_MESSAGE ADD CONSTRAINT B2B_BM_PS_FK FOREIG
N KEY (PAYLOAD_STORAGE) REFERENCES B2B_DATA_STORAGE (ID)  ON DELETE CASCADE ENAB
LE';

/* ExtBusinessMessage */
execute immediate 'ALTER TABLE B2B_EXT_BUSINESS_MESSAGE ADD CONSTRAINT B2B_EBM_BM_FK FORE
IGN KEY (BUSINESS_MESSAGE) REFERENCES B2B_BUSINESS_MESSAGE(ID) ON DELETE CASCADE
 ENABLE';

/* AppMessage */
execute immediate 'ALTER TABLE B2B_APP_MESSAGE ADD CONSTRAINT B2B_AM_PAYLOAD_FK FOREIGN KEY
(PAYLOAD) REFERENCES B2B_DATA_STORAGE (ID)  ON DELETE CASCADE ENABLE';
execute immediate 'ALTER TABLE B2B_APP_MESSAGE ADD CONSTRAINT B2B_AM_BM_FK FOREIGN KEY (B
USINESS_MESSAGE) REFERENCES B2B_BUSINESS_MESSAGE(ID) ON DELETE CASCADE ENABLE';
execute immediate 'ALTER TABLE B2B_APP_MESSAGE ADD CONSTRAINT B2B_AM_AS_FK FOREI
GN KEY (ATTACHMENT_STORAGE) REFERENCES B2B_DATA_STORAGE (ID)  ON DELETE CASCADE
ENABLE';

EXCEPTION
  when others then
    v_code := SQLCODE;
    v_errm := SUBSTR(SQLERRM, 1 , 64);
    DBMS_OUTPUT.PUT_LINE('Error code ' || v_code || ': ' || v_errm || ' at line : ' || v_stmt);

END purge_b2b_instances_down;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','PURGE_RUNTIME','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."PURGE_RUNTIME" (startDate IN DATE, endDate IN DATE, givenState IN VARCHAR
2)  AS

   CURSOR b2b_cur IS
       SELECT bm.id, bm.state, bm.message_id, bm.payload_storage, bm.attachment_storage, bm
.native_data_storage,
              bm.translated_data_storage,
              wm.packed_message, wm.payload_storage wmps,
              am.payload, am.attachment_storage amas
       FROM b2b_business_message bm, b2b_wire_message wm, b2b_app_message am, b2b_ext_business_message ext
       WHERE
       TRUNC(bm.created) BETWEEN TRUNC(startDate) AND TRUNC(endDate) AND
       bm.state = givenState AND
       bm.wire_message = wm.id (+)
       AND bm.ext_business_message = ext.id (+)
       AND bm.app_message = am.id (+);

BEGIN

   FOR b2b_rec IN b2b_cur
   LOOP
      DELETE FROM b2b_data_storage WHERE id = b2b_rec.payload_storage;
      DELETE FROM b2b_data_storage WHERE id = b2b_rec.attachment_storage;
      DELETE FROM b2b_data_storage WHERE id = b2b_rec.native_data_storage;
      DELETE FROM b2b_data_storage WHERE id = b2b_rec.translated_data_storage;
      DELETE FROM b2b_data_storage WHERE id = b2b_rec.packed_message;
      DELETE FROM b2b_data_storage WHERE id = b2b_rec.wmps;
      DELETE FROM b2b_data_storage WHERE id = b2b_rec.payload;
      DELETE FROM b2b_data_storage WHERE id = b2b_rec.amas;
      IF b2b_rec.state='MSG_WAIT_BATCH' THEN
        DELETE FROM b2b_pending_message where message_id = b2b_rec.message_id;
      END IF;

      IF MOD(b2b_cur%ROWCOUNT, 1000) = 0 THEN
        COMMIT;
      END IF;

   END LOOP;

  COMMIT;

   /*
    * Bug#8438439
    * There could be entries in b2b_wiremessage table for which there are
    * no corresponding entries in b2b_business_message table. Such entries
    * would not get deleted in delete operation occuring above through b2b_cur
    * cursor. We are deleting such entries here.
   /*

   for i in (
     select payload_storage, packed_message
     from b2b_wire_message wm
     where  TRUNC(wm.created) BETWEEN TRUNC(startDate) AND TRUNC(endDate) AND
     wm.state = givenState
  )
  loop
    DELETE FROM b2b_data_storage where id = i.payload_storage;
    DELETE FROM b2b_data_storage where id = i.packed_message;
  end loop;


  COMMIT;       


   /*
    * There could be entries in b2b_app_message table for which there are
    * no corresponding entries in b2b_business_message table. Such entries
    * would not get deleted in delete operation occuring above through b2b_cur
    * cursor. We are deleting such entries here.
    */
   for i in (
     select payload, attachment_storage
     from b2b_app_message am
     where  TRUNC(am.created) BETWEEN TRUNC(startDate) AND TRUNC(endDate) AND
     am.state = givenState
  )
  loop
    DELETE FROM b2b_data_storage where id = i.payload;
    DELETE FROM b2b_data_storage where id = i.attachment_storage;
  end loop;

  COMMIT;


  EXCEPTION
     WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','PURGE_RUNTIME_BY_ID','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."PURGE_RUNTIME_BY_ID" ( msg_id IN VARCHAR2
) AS
   CURSOR b2b_cur IS
       SELECT bm.id, bm.state, bm.message_id, bm.payload_storage, bm.attachment_stora
ge, bm.native_data_storage, bm.translated_data_storage,
              wm.packed_message, wm.payload_storage wmps,
              am.payload, am.attachment_storage amas
       FROM b2b_business_message bm, b2b_wire_message wm, b2b_app_message am, b2b_ext_business_message ext
       WHERE
       bm.message_id = msg_id AND
       bm.wire_message = wm.id (+)
       AND bm.ext_business_message = ext.id (+)
       AND bm.app_message = am.id (+);

BEGIN

   FOR b2b_rec IN b2b_cur
   LOOP
      DELETE FROM b2b_data_storage WHERE id = b2b_rec.payload_storage;
      DELETE FROM b2b_data_storage WHERE id = b2b_rec.attachment_storage;
      DELETE FROM b2b_data_storage WHERE id = b2b_rec.native_data_storage;
      DELETE FROM b2b_data_storage WHERE id = b2b_rec.translated_data_storage;
      DELETE FROM b2b_data_storage WHERE id = b2b_rec.packed_message;
      DELETE FROM b2b_data_storage WHERE id = b2b_rec.wmps;
      DELETE FROM b2b_data_storage WHERE id = b2b_rec.payload;
      DELETE FROM b2b_data_storage WHERE id = b2b_rec.amas;
      IF b2b_rec.state='MSG_WAIT_BATCH' THEN
        DELETE FROM b2b_pending_message where message_id = b2b_rec.message_id;
      END IF;

   END LOOP;

  COMMIT;


  EXCEPTION
     WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','PURGE_RUNTIME_WITH_TIMEOUT','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."PURGE_RUNTIME_WITH_TIMEOUT" (p_lower_band IN DATE, p_upper_band IN DATE,
givenState IN VARCHAR2, p_rownum NUMBER default 1000, p_stop_time INTEGER defaul
t NULL)  AS
  v_counter NUMBER := 1;
  v_startdate timestamp := sysdate;
  v_loopstart timestamp;
  v_loopend timestamp;
  v_stoptime date := sysdate + NVL(p_stop_time,24*60)/(24*60);
  v_nr_rows integer := 0;
  v_nextloop BOOLEAN := TRUE;
  v_timeout BOOLEAN := FALSE;
  v_code NUMBER;
  v_errm VARCHAR2(90);
  v_stmt VARCHAR2(100);
  v_sqlstmt varchar2(2000);
  v_wireState VARCHAR2(100);
  has_rows_bm_instance boolean := FALSE;
  has_rows_wm_instance boolean := FALSE;
  has_rows_am_instance boolean := FALSE;

BEGIN
v_stmt := 'Start';
execute immediate 'alter session force parallel dml parallel 8';

/* before starting clean up temp tables */
EXECUTE IMMEDIATE 'TRUNCATE TABLE b2b_purge_temp_bm';
EXECUTE IMMEDIATE 'TRUNCATE TABLE b2b_purge_temp_wm';
EXECUTE IMMEDIATE 'TRUNCATE TABLE b2b_purge_temp_am';

/* avoid unwanted execution plans */
   execute immediate 'alter session set "_optimizer_sortmerge_join_enabled"=false';
   execute immediate 'alter session set "_optimizer_mjc_enabled"=false';
   execute immediate 'alter session set "_optimizer_cartesian_enabled"=false';
/* and set MBRC high to boost Full Table Scans */
   execute immediate 'alter session set db_file_multiblock_read_count=128';

/* here starts the loop */
v_stmt := 'Jump into Loop BM';

WHILE v_nextloop = TRUE LOOP

   v_nextloop := FALSE;
   has_rows_bm_instance := FALSE;
   dbms_output.put_line('======Start run '|| v_counter||' '|| p_rownum||' rows t
o delete======');

/* Populate table with information about older instances */
   v_stmt := 'Insert into b2b_purge_temp_bm';
   debug_purge('b2b_purge_temp_bm', 'Before');
insert into b2b_purge_temp_bm(bm_id, bm_message_id, bm_payload_storage, bm_attachment_storage, bm_native_dat
a_storage, bm_translated_data_storage, wm_packed_message, wm_payload_storage, am
_payload, am_attachment_storage, ext_bm_id, am_id, wm_id)        SELECT bm.id, b
m.message_id, bm.payload_storage, bm.attachment_storage, bm.native_data_storage,

              bm.translated_data_storage,
              wm.packed_message, wm.payload_storage,
              am.payload, am.attachment_storage, ext.id, am.id, wm.id
       FROM b2b_business_message bm, b2b_wire_message wm, b2b_app_message am, b2b_ext_business_message ext
       WHERE
       TRUNC(bm.created) BETWEEN TRUNC(p_lower_band) AND TRUNC(p_upper_band) AND
       bm.state = givenState AND
       bm.wire_message = wm.id (+)
       AND bm.ext_business_message = ext.id (+)
       AND bm.app_message = am.id (+)
       AND rownum <= p_rownum;

   debug_purge('b2b_purge_temp_bm', 'After');
   IF SQL%ROWCOUNT > 0 THEN
       has_rows_bm_instance := TRUE;
   END IF;

   IF SQL%ROWCOUNT = p_rownum THEN
       v_nextloop := TRUE ;
   END IF;

   COMMIT;

IF has_rows_bm_instance = TRUE
THEN

   v_stmt := 'delete from b2b_business_message';
   debug_purge('b2b_business_message', 'Before');

   for b2b_rec in (
     select bm_message_id, bm_payload_storage, bm_attachment_storage, bm_native_data_storage, bm_trans
lated_data_storage, wm_packed_message, wm_payload_storage, am_payload, am_attach
ment_storage
     from b2b_purge_temp_bm
  )
  LOOP
      DELETE FROM b2b_data_storage WHERE id = b2b_rec.bm_payload_storage;
      DELETE FROM b2b_data_storage WHERE id = b2b_rec.bm_attachment_storage;
      DELETE FROM b2b_data_storage WHERE id = b2b_rec.bm_native_data_storage;
      DELETE FROM b2b_data_storage WHERE id = b2b_rec.bm_translated_data_storage;
      DELETE FROM b2b_data_storage WHERE id = b2b_rec.wm_packed_message;
      DELETE FROM b2b_data_storage WHERE id = b2b_rec.wm_payload_storage;
      DELETE FROM b2b_data_storage WHERE id = b2b_rec.am_payload;
      DELETE FROM b2b_data_storage WHERE id = b2b_rec.am_attachment_storage;
      IF givenState='MSG_WAIT_BATCH' THEN
        DELETE FROM b2b_pending_message where message_id = b2b_rec.bm_message_id;
      END IF;
  END LOOP;

   debug_purge('b2b_business_message', 'After');

   delete b2b_purge_temp_bm;

   COMMIT;

END IF;

   IF (sysdate >= v_stoptime) THEN
     v_timeout := TRUE;
     v_nextloop := FALSE;
   END IF;

v_stmt := 'End Loop BM';
END LOOP;

IF (v_timeout = FALSE) THEN
   v_stmt := 'Jump into Loop WM';
   v_nextloop := TRUE;
END IF;

WHILE v_nextloop = TRUE LOOP

   v_nextloop := FALSE;
   has_rows_wm_instance := FALSE;
   dbms_output.put_line('======Start run '|| v_counter||' '|| p_rownum||' rows to delete======');

   IF givenState = 'MSG_COMPLETE' THEN
      v_wireState := 'COMPLETE';
   ELSE IF givenState = 'MSG_ERROR' THEN
      v_wireState := 'ERROR';
   ELSE v_wireState := 'PROCESSING';
        END IF;
   END IF;

/* Populate table with information about older instances */
   v_stmt := 'Insert into b2b_purge_temp_wm';
   debug_purge('b2b_purge_temp_wm', 'Before');
insert into b2b_purge_temp_wm(wm_id, wm_payload_storage, wm_packed_message)        SELECT wm.id, wm.payload_storage, w
m.packed_message
       FROM b2b_wire_message wm
       WHERE
       TRUNC(wm.created) BETWEEN TRUNC(p_lower_band) AND TRUNC(p_upper_band) AND       wm.state = v_wireState AND
       rownum <= p_rownum;

   debug_purge('b2b_purge_temp_wm', 'After');
   IF SQL%ROWCOUNT > 0 THEN
       has_rows_wm_instance := TRUE;
   END IF;

   IF SQL%ROWCOUNT = p_rownum THEN
       v_nextloop := TRUE ;
   END IF;

   COMMIT;

IF has_rows_wm_instance = TRUE
THEN

   v_stmt := 'delete from b2b_wire_message';
   debug_purge('b2b_wire_message', 'Before');
   for i in (
     select wm_payload_storage, wm_packed_message
     from b2b_purge_temp_wm
  )
  loop
    DELETE FROM b2b_data_storage where id = i.wm_payload_storage;
    DELETE FROM b2b_data_storage where id = i.wm_packed_message;
  end loop;

   debug_purge('b2b_wire_message', 'After');

   delete b2b_purge_temp_wm;

   COMMIT;

END IF;


   IF (sysdate >= v_stoptime) THEN
     v_timeout := TRUE;
     v_nextloop := FALSE;
   END IF;

v_stmt := 'End Loop WM';
END LOOP;

IF (v_timeout = FALSE) THEN
   v_stmt := 'Jump into Loop AM';
   v_nextloop := TRUE;
END IF;


WHILE v_nextloop = TRUE LOOP

   v_nextloop := FALSE;
   has_rows_am_instance := FALSE;
   dbms_output.put_line('======Start run '|| v_counter||' '|| p_rownum||' rows to delete======'
);

/* Populate table with information about older instances */
   v_stmt := 'Insert into b2b_purge_temp_am';
   debug_purge('b2b_purge_temp_am', 'Before');
insert into b2b_purge_temp_am(am_id, am_payload, am_attachment_storage)        SELE
CT am.id, am.payload, am.attachment_storage
       FROM b2b_app_message am
       WHERE
       TRUNC(am.created) BETWEEN TRUNC(p_lower_band) AND TRUNC(p_upper_band) AND
       am.state = givenState AND
       rownum <= p_rownum;

   debug_purge('b2b_purge_temp_am', 'After');
   IF SQL%ROWCOUNT > 0 THEN
       has_rows_am_instance := TRUE;
   END IF;

   IF SQL%ROWCOUNT = p_rownum THEN
       v_nextloop := TRUE ;
   END IF;

   COMMIT;

IF has_rows_wm_instance = TRUE
THEN

   for i in (
     select am_payload, am_attachment_storage
     from b2b_purge_temp_am
  )
  loop
    DELETE FROM b2b_data_storage where id = i.am_payload;
    DELETE FROM b2b_data_storage where id = i.am_attachment_storage;
  end loop;

   delete b2b_purge_temp_am;

   COMMIT;

END IF;


   IF (sysdate >= v_stoptime) THEN
     v_nextloop := FALSE;
   END IF;

v_stmt := 'End Loop AM';
END LOOP;

EXCEPTION
  when others then
    v_code := SQLCODE;
    v_errm := SUBSTR(SQLERRM, 1 , 64);
    DBMS_OUTPUT.PUT_LINE('Error code ' || v_code || ': ' || v_errm || ' at line : ' || v_s
tmt);

END purge_runtime_with_timeout;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','WRITE_DROP_PARTITION_QUERY','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."WRITE_DROP_PARTITION_QUERY" (p_table_name varchar2,p_partition_name varch
ar2,write_file  utl_file.file_type)
is
v_query varchar2(4000);
begin
   if partition_exists(p_table_name, p_partition_name)  = true then
      v_query := 'ALTER TABLE ' || p_table_name || ' drop partition ' || p_partition_name ||' UPDATE GL
OBAL INDEXES;';
      write_line(v_query,write_file);
   end if;
end write_drop_partition_query;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','WRITE_LINE','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."WRITE_LINE" (line in varchar2, write_file in  utl_file.file_type default
null) is
begin

 if utl_file.is_open(write_file)=false  then
      dbms_output.put_line(line);
  else
     utl_file.put_line (write_file,line);
  end if;
end write_line;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','WRITE_QUERY_COMMENTS','PRD_SOAINFRA')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "PRD_SOAINFRA"."WRITE_QUERY_COMMENTS" (comments varchar2, write_file utl_file.file_type)
is
begin
     write_line('-- ' || comments,write_file );
end write_query_comments;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','TEST_DELAY','TDEIPUSR')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "TDEIPUSR"."TEST_DELAY" (second in number,result out varchar2) as
t number;
begin
  DBMS_LOCK.SLEEP(second);
  dbms_output.put_line( 'YES');
  result:='OK';
end TEST_DELAY;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','SP_RCWZL_DATE','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."SP_RCWZL_DATE" (p_sn          varchar2,
                                          p_complain_id number,P_linkbelongsarea
 varchar2) as
  -- 农村网络质量类投诉处理质量报表
  row_rcwzl     xcy_rcwzl_date%rowtype;
  exceptionCode number;
  exceptionInfo varchar(4000);
  current_line  varchar(100);
begin
  delete from xcy_rcwzl_date where sn = p_sn;
  row_rcwzl.sn := p_sn;
  row_rcwzl.complain_id := p_complain_id;
  row_rcwzl.create_date := sysdate;
  row_rcwzl.linkbelongsarea := P_linkbelongsarea;

  current_line := p_sn || '工单整体处理时长（小时）：工单受理时间到工单最后归档
时间。';
  -- 工单整体处理时长（小时）：工单受理时间到工单最后归档时间
  select t.deal_time, to_date(t.f_slsj,'yyyy-mm-dd HH24:mi:ss'),w.create_date
    into row_rcwzl.f_gddj, row_rcwzl.f_slsj,row_rcwzl.f_cjsj
    from f8_report t,w_complain_manager w
   where t.f_serialno = p_sn and w.f_serialno = p_sn
     and t.curworkgroup = '归档';

   current_line := p_complain_id || '归档时间。';
  -- 工单整体处理时长（小时）：工单受理时间到工单最后归档时间
  select t.handlerdate
    into  row_rcwzl.f_gddj
    from XCY_COMPLAIN_SHENGJI_LOG t
   where t.complainid = p_complain_id
     and t.handletype = '归档'
     and rownum < 2;

  current_line := p_sn || ' 协助处理时长。';
  select min(nvl(TASK2_SUM_TIME_SS,0)) into row_rcwzl.f_xz_sc
    from w_complain_manager w, v_task2_time_max t
   where w.f_serialno = p_sn
     and w.f_actinstid = t.F_ACTINSTID;

  current_line := p_sn || ' 处理时长：工单派单到反馈时长（牵头时长+协助时长）。'
;
  select TASK2_SUM_TIME_SS
    into row_rcwzl.f_cl_sc
    from w_complain_manager w, v_task_time t
   where w.f_serialno = p_sn
     and w.f_actinstid = t.F_ACTINSTID;

  current_line := p_sn || ' 牵头处理时间。';
  select TASK2_SUM_TIME_SS
    into row_rcwzl.f_qt_sc
    from w_complain_manager w, v_task1_time t
   where w.f_serialno = p_sn
     and w.f_actinstid = t.F_ACTINSTID;

  current_line := p_sn || ' ' || p_complain_id || ' 复核时间。';
  select to_date(t.accepttime,'yyyy-mm-dd HH24:mi:ss'), t.create_date
    into row_rcwzl.f_fh_start, row_rcwzl.f_fh_end
    from xcy_complain_option t
   where t.complain_id = '' || p_complain_id
     and t.state = '复核'
     and rownum < 2;

  current_line := p_sn || ' ' || p_complain_id || ' 回复客户归档处理时长。';
  select handlerdate into row_rcwzl.f_zfk_date
    from (select t.handlerdate
            from XCY_COMPLAIN_SHENGJI_LOG t
           where t.complainid = p_complain_id
             and t.flowto in ('zfk', 'qt-eoms2qt','back')
           order by t.handlerdate desc) t
   where rownum < 2;

  insert into xcy_rcwzl_date values row_rcwzl;

exception
  WHEN OTHERS THEN
    exceptionCode := sqlcode;
    exceptionInfo := SUBSTR(sqlerrm, 1, 2000);
    insert into sp_rcwzl_date_exception
      (sn, message)
    values
      (p_sn, current_line || exceptionCode || ':' || exceptionInfo);
end;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','P_INSERT_DBYJ_SEND_SN_CS2','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_INSERT_DBYJ_SEND_SN_CS2" (v_tsfl   VARCHAR2,
                                                      v_byr    VARCHAR2,
                                                      v_sendId NUMBER,
                                                      v_task   varchar2) as
  v_send_serialno_id NUMBER(20); --发送流水号表id
  v_temp_tsfl_count  number; -- 查询是不是存在tsfl
begin
  -- 2019年12月5日19:59:50

  --根据投诉分类，查询昨天16:30到今天16:30之间创建的工单流水号
  for i in (select t.f_serialno
              from f8_report t, w_complain_manager w
             where t.accept_corp not in
                   ('20130614083208-一级客服工作组',
                    '20130614083231-二线客服工作组')
               and decode(t.flowkey, 'tsgl', w.wholetime, w.f_fksj) < sysdate
               and t.create_date between trunc(next_day(sysdate - 8 - 8, 6)) and
 trunc(next_day(sysdate - 8, 6))
               and t.f_serialno = w.f_serialno
               and decode(t.curworkgroup, '[workgroup^10000009870955^区公司网管]
', nvl(w.wg_new_group_name, t.curworkgroup), t.curworkgroup) = v_tsfl
               and t.task_ in('UserTask1','UserTask2') and t.task_ = v_task) loop
    v_send_serialno_id := 0;
    --根据v_sendId和v_serialNo来查看w_dbyj_send_serialno_cs表中是否有记录
    begin
      select t.id
        into v_send_serialno_id
        from w_dbyj_send_serialno_cs t
       where t.f_sendid = v_sendId
         and t.f_serialno = i.f_serialno;
      --如果记录存在，就更新记录
      if (v_byr = 0) then
        update w_dbyj_send_serialno_cs
           set f_blue = 'true'
         where id = v_send_serialno_id;
      elsif (v_byr = 1) then
        update w_dbyj_send_serialno_cs
           set f_yellow = 'true'
         where id = v_send_serialno_id;
      elsif (v_byr = 2) then
        update w_dbyj_send_serialno_cs
           set f_red = 'true'
         where id = v_send_serialno_id;
      end if;
    EXCEPTION
      WHEN others THEN
        DBMS_OUTPUT.PUT_LINE(i.f_serialno || ':' || SQLCODE || '---' ||
                             SQLERRM);
        --如果不存在，就新增一条
        insert into w_dbyj_send_serialno_cs
          (ID, F_SENDID, F_SERIALNO, F_BLUE, F_YELLOW, F_RED)
        values
          (SEQ_DBYJ_SEND_SERIALNO.Nextval,
           v_sendId,
           i.f_serialno,
           decode(v_byr, 0, 'true', null),
           decode(v_byr, 1, 'true', null),
           decode(v_byr, 2, 'true', null));
    end;
  end loop;
  commit;
end;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','P_INSERT_DBYJ_SEND_SN_BZQ_DAY','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_INSERT_DBYJ_SEND_SN_BZQ_DAY" (v_tsfl   VARCHAR2,
                                                        v_byr    VARCHAR2,
                                                        v_sendId NUMBER) as
  v_send_serialno_id NUMBER(20); --发送流水号表id
  v_temp_tsfl_count number; -- 查询是不是存在tsfl
begin
  -- 2019年12月5日19:59:50
  select count(1) into v_temp_tsfl_count
  from xcy_yujing_tsfl_dict_bzq
  where tsfl_id = v_tsfl;

  if v_temp_tsfl_count = 0 then
    --根据投诉分类，查询昨天16:30到今天16:30之间创建的工单流水号
    for i in (select c.f_serialno
                from w_complain_manager c
               where c.servicerequesttypeid = v_tsfl
                 and nvl(c.consultationorcomplaint,'0') = '0'
                 and c.create_date >= trunc(sysdate - 1) + ((16 * 2) / (24 * 2))
                 and c.create_date < trunc(sysdate) + ((16 * 2 ) / (24 * 2))) loop
      v_send_serialno_id := 0;
      --根据v_sendId和v_serialNo来查看w_dbyj_send_serialno_bzq表中是否有记录
      begin
        select t.id
          into v_send_serialno_id
          from w_dbyj_send_serialno_bzq t
         where t.f_sendid = v_sendId
           and t.f_serialno = i.f_serialno;
        --如果记录存在，就更新记录
        if (v_byr = 0) then
          update w_dbyj_send_serialno_bzq
             set f_blue = 'true'
           where id = v_send_serialno_id;
        elsif (v_byr = 1) then
          update w_dbyj_send_serialno_bzq
             set f_yellow = 'true'
           where id = v_send_serialno_id;
        elsif (v_byr = 2) then
          update w_dbyj_send_serialno_bzq
             set f_red = 'true'
           where id = v_send_serialno_id;
        end if;
      EXCEPTION
        WHEN others THEN
          DBMS_OUTPUT.PUT_LINE(i.f_serialno || ':' || SQLCODE || '---' || SQLERRM);
          --如果不存在，就新增一条
          insert into w_dbyj_send_serialno_bzq
            (ID, F_SENDID, F_SERIALNO, F_BLUE, F_YELLOW, F_RED)
          values
            (SEQ_DBYJ_SEND_SERIALNO.Nextval,
             v_sendId,
             i.f_serialno,
             decode(v_byr, 0, 'true', null),
             decode(v_byr, 1, 'true', null),
             decode(v_byr, 2, 'true', null));
      end;
    end loop;
  else
    -- 需要通过字典表来处理
    for i in (select c.f_serialno
                from w_complain_manager c,xcy_yujing_tsfl_dict_bzq d -- 2019年12月5日19:24:38
               where d.tsfl_id = v_tsfl
                 and d.tsfl_real_id = c.servicerequesttypeid
                 and nvl(c.consultationorcomplaint,'0') = '0'
                 and c.create_date >= trunc(sysdate - 1) + ((16 * 2) / (24 * 2))
                 and c.create_date < trunc(sysdate) + ((16 * 2) / (24 * 2))) loop
      v_send_serialno_id := 0;
      --根据v_sendId和v_serialNo来查看w_dbyj_send_serialno_bzq表中是否有记录
      begin
        select t.id
          into v_send_serialno_id
          from w_dbyj_send_serialno_bzq t
         where t.f_sendid = v_sendId
           and t.f_serialno = i.f_serialno;
        --如果记录存在，就更新记录
        if (v_byr = 0) then
          update w_dbyj_send_serialno_bzq
             set f_blue = 'true'
           where id = v_send_serialno_id;
        elsif (v_byr = 1) then
          update w_dbyj_send_serialno_bzq
             set f_yellow = 'true'
           where id = v_send_serialno_id;
        elsif (v_byr = 2) then
          update w_dbyj_send_serialno_bzq
             set f_red = 'true'
           where id = v_send_serialno_id;
        end if;
      EXCEPTION
        WHEN others THEN
          DBMS_OUTPUT.PUT_LINE(i.f_serialno || ':' || SQLCODE || '---' || SQLERRM);
          --如果不存在，就新增一条
          insert into w_dbyj_send_serialno_bzq
            (ID, F_SENDID, F_SERIALNO, F_BLUE, F_YELLOW, F_RED)
          values
            (SEQ_DBYJ_SEND_SERIALNO.Nextval,
             v_sendId,
             i.f_serialno,
             decode(v_byr, 0, 'true', null),
             decode(v_byr, 1, 'true', null),
             decode(v_byr, 2, 'true', null));
      end;
    end loop;
  end if;


  commit;
end;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','SP_SYSJ_5GD','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."SP_SYSJ_5GD" as

  vd_cur_month date := trunc(sysdate, 'mm');

  cursor cur_sql(month date, vn_b number) is
    select t.f_slhm,
           count(1) c,
           '' || LISTAGG(t.f_serialno, ',') WITHIN GROUP(ORDER BY f_slhm) || '',
           trunc(sysdate, 'mm'),
           max(t.f_yhtsds) yhtsds,
           max(t.fullname)
      from f8_report t
     where t.curworkgroup = '归档'
       and t.create_date > month
       and t.flowkey = 'sjts'
     group by t.f_slhm
    having count(1) >= vn_b;
  vv_slhm     varchar2(100);
  vn_count    number;
  vc_serialno varchar2(4000);
  vd_month    date;
  vv_byr      varchar2(5);
  vn_R        number;
  vn_Y        number;
  vn_B        number;
  vn_type     number := 90000006170032; -- 归档
  vn_yjfz     number;
  vc_yhtsds   varchar2(40);
  vc_fullname varchar2(200);

  vt_base   xcy_sjyj_base%rowtype;
  vn_action number := 0; --0 add , 1 update

  exceptionCode number;
  exceptionInfo varchar(4000);
  vn_base_id    number;
  v_msg_content varchar2(400);
  v_date_fromat VARCHAR2(40) := 'YYYY"年"MM"月"DD"日"HH24"时"MI"分"SS"秒"';
begin

  select d.blue, d.yellow, d.red
    into vn_b, vn_y, vn_r
    from xcy_sjyj_dict d
   where d.id = vn_type;

  open cur_sql(vd_cur_month, vn_b);

  loop
    fetch cur_sql
      into vv_slhm, vn_count, vc_serialno, vd_month, vc_yhtsds, vc_fullname; --取游标的值给变量。

    -- 判断游标
    exit when cur_sql%notfound;

    -- 生成 RBG
    if vn_count >= vn_r then
      vv_byr  := 'R';
      vn_yjfz := vn_r;
    elsif vn_count >= vn_y then
      vv_byr  := 'Y';
      vn_yjfz := vn_y;
    else
      vv_byr  := 'B';
      vn_yjfz := vn_b;
    end if;

    -- 查询是不是已经存在

    vn_action := 0;
    begin
      select t.*
        into vt_base
        from xcy_sjyj_base t
       where t.type = vn_type
         and t.current_frequency = to_char(vd_month, 'yyyy-mm-dd')
         and t.comm = vv_slhm
         and t.byr = vv_byr;
      vn_action  := 1;
      vn_base_id := vt_base.id;
    exception
      when no_data_found then
        vn_action := 0;
        /*exceptionCode := sqlcode;
        exceptionInfo := SUBSTR(sqlerrm, 1, 2000);
        insert into tab_reflush_exception(proceduresname,tabname,exceptioncode,excepti
oninfo)
        values('sp_sysj_5gd',vd_month||'-'||vv_slhm,exceptionCode,exceptionInfo);*/
    end;

    -- vc_serialno 记录流水号

    -- 添加信息
    if vn_action = 0 then
      vn_base_id := SQ_SJYJ.Nextval;
      insert into xcy_sjyj_base
        (id,
         type,
         title,
         byr,
         current_count,
         yjfz,
         comm,
         current_frequency)
      values
        (vn_base_id,
         vn_type,
         '归档环节',
         vv_byr,
         vn_count,
         vn_yjfz,
         vv_slhm,
         to_char(vd_month, 'yyyy-mm-dd'));

    end if;


    insert into xcy_sysj_sn
      (id, base_id, sn, byr)
      SELECT SQ_SJYJ.Nextval, vn_base_id, COLUMN_VALUE sn, vv_byr
        FROM table(split(vc_serialno))
       where COLUMN_VALUE not in
             (select s.sn from xcy_sysj_sn s where base_id = vn_base_id);

    -- 更新信息--添加流水号
    if vn_action = 1 then
      -- 上一个bry == 继续下一个，不发短信，记录流水号
      if vt_base.byr = vv_byr then
        continue;
      end if;

    end if;

    v_msg_content := '重复升级投诉预警' || to_char(sysdate, v_date_fromat) ||
                     '，投诉号码为XXX' || vv_slhm || '（投诉地市：' || vc_yhtsds ||
                     '）关于【' || vc_fullname || '】' || '分类重复升级投诉已达'
 ||
                     vn_count || '件，请及时处理。(OA投诉处理系统)。';
    -- 发送短信
    -- 重复升级投诉预警：YYYY年MM月DD日HH时MI分SS秒，投诉号码为XXX（投诉地市：XX
X）关于【某某类型】分类重复升级投诉已达XX件，请及时处理。
    insert into xcy_sjyj_message
      (id, base_id, byr, username, message)
      select SQ_SJYJ.Nextval, vn_base_id, vv_byr, account, v_msg_content
        from (
              -- 组织里面的人员
              SELECT u.account
                FROM SYS_USER_POS           a,
                      sys_user               u,
                      sys_org                o,
                      sys_pos                p,
                      sys_job                j,
                      xcy_sjyj_5gd_base_user b
               WHERE b.yhgsd = vc_yhtsds
                 and a.ORGID = b.group_id
                 AND a.ISDELETE = 0
                 and a.userid = u.userid
                 and a.orgid = o.orgid
                 and p.posid = a.posid
                 and j.jobid = p.jobid
              union
              -- 归档角色里面的人员
              SELECT ur.account
                FROM SYS_USER_ROLE urro, SYS_USER ur
               WHERE urro.userId = ur.userId
                 AND urro.roleId = vn_type) t;

  end loop;

  close cur_sql;

end;



SYS@khtsdb1> 
DBMS_METADATA.GET_DDL('PROCEDURE','SP_COMPLAIN_RD_CT','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."SP_COMPLAIN_RD_CT" (pn_batchId number) as
begin
  for i in (select w.rowid rd
              from w_complain_manager w, xcy_complain_rd_ct t,bpm_pro_run r
             where w.create_date > sysdate - 4
               and t.accept_num = w.f_slhm
               and r.actinstid = w.f_actinstid
               and t.batch_id = pn_batchId) loop
    update w_complain_manager w
       set w.pubdynachar107 = '是'
     where rowid = i.rd;
  end loop;
  commit;
end;



SYS@khtsdb1> 

DBMS_METADATA.GET_DDL('PROCEDURE','P_TABLE_COMPLAIN_LEADER_GDCX','CSCDS')
--------------------------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "CSCDS"."P_TABLE_COMPLAIN_LEADER_GDCX" AS
  var_startdate date := sysdate;
  tabName       varchar(100);
  exceptionCode number;
  exceptionInfo varchar(4000);
Begin
  begin
    for i in (select v.f_serialno from v_complain_update_serialno v) loop
      delete from XCY_LYL_GDCX t where t.f_serialno = i.f_serialno;
    end loop;
  end;
  insert into XCY_LYL_GDCX
    select w.f_serialno,
           w.f_ywnr,
           w.f_fullname,
           w.f_yhgsd,
           w.f_yhtsds,
           w.is_db,
           w.channelid,
           w.f_slqd,
           w.f_fksj,
           replay_date,
           tasktime,
           round(nvl(to_date(反馈时间, 'yyyy-mm-dd hh24:mi:ss'), sysdate) -
                 decode('2', '2', w.wholetime, w.f_fksj),
                 2) * 24 times_pt,
           abs((nvl(to_date(反馈时间, 'yyyy-mm-dd hh24:mi:ss'), sysdate) -
               decode('2', '2', w.wholetime, w.f_fksj)) * 24 * 60 * 60 * 1000) tim
es_hm_pt,

           round(nvl(to_date(反馈时间, 'yyyy-mm-dd hh24:mi:ss'), sysdate) -
                 decode('1', '2', w.wholetime, w.f_fksj),
                 2) * 24 times_sj,
           abs((nvl(to_date(反馈时间, 'yyyy-mm-dd hh24:mi:ss'), sysdate) -
               decode('1', '2', w.wholetime, w.f_fksj)) * 24 * 60 * 60 * 1000) times_hm_sj,
           w.acceptcorp,
           f8.是否逾期,
           b.CURWORKGROUP,
           nvl(f8.是否重复, '否') sfcf,
           w.id,
           w.F_SLSJ,
           是否重复,
           w.servicerequesttypeid,
           f8.createtime,
           w.belongCityId,
           w.COMPLAINTCITYID,
           b.flowkey
      from W_COMPLAIN_MANAGER         w,
           t_complaints_details       f8,
           f8_report                  b,
           v_complain_update_serialno v
     where w.f_serialno = f8.流水号
       and w.f_serialno = b.f_serialno
       and w.f_actinstid is not null
       and w.f_serialno = v.f_serialno;
  insert into sys_report_proc_excute_result
  values
    ('p_table_complain_leader_gdcx',
     'p_table_complain_leader_gdcx',
     1,
     var_startdate,
     sysdate);
  COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    exceptionCode := sqlcode;
    exceptionInfo := SUBSTR(sqlerrm, 1, 2000);
    insert into tab_reflush_exception
      (proceduresname, tabname, exceptioncode, exceptioninfo)
    values
      ('p_table_complain_leader_gdcx',
       tabName,
       exceptionCode,
       exceptionInfo);
    commit;
END p_table_complain_leader_gdcx;



SYS@khtsdb1> 
SYS@khtsdb1> 
SYS@khtsdb1> 
SYS@khtsdb1> 
SYS@khtsdb1> 
